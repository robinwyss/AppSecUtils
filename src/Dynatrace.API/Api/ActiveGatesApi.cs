/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActiveGatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists all available ActiveGates
        /// </summary>
        /// <remarks>
        /// The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>ActiveGateList</returns>
        ActiveGateList GetAllActiveGates (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null);

        /// <summary>
        /// Lists all available ActiveGates
        /// </summary>
        /// <remarks>
        /// The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse of ActiveGateList</returns>
        ApiResponse<ActiveGateList> GetAllActiveGatesWithHttpInfo (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null);
        /// <summary>
        /// Gets the details of the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ActiveGate</returns>
        ActiveGate GetOneActiveGateById (string agId);

        /// <summary>
        /// Gets the details of the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of ActiveGate</returns>
        ApiResponse<ActiveGate> GetOneActiveGateByIdWithHttpInfo (string agId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Lists all available ActiveGates
        /// </summary>
        /// <remarks>
        /// The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ActiveGateList</returns>
        System.Threading.Tasks.Task<ActiveGateList> GetAllActiveGatesAsync (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null);

        /// <summary>
        /// Lists all available ActiveGates
        /// </summary>
        /// <remarks>
        /// The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (ActiveGateList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveGateList>> GetAllActiveGatesAsyncWithHttpInfo (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null);
        /// <summary>
        /// Gets the details of the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ActiveGate</returns>
        System.Threading.Tasks.Task<ActiveGate> GetOneActiveGateByIdAsync (string agId);

        /// <summary>
        /// Gets the details of the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (ActiveGate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveGate>> GetOneActiveGateByIdAsyncWithHttpInfo (string agId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActiveGatesApi : IActiveGatesApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActiveGatesApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActiveGatesApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActiveGatesApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Lists all available ActiveGates The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>ActiveGateList</returns>
        public ActiveGateList GetAllActiveGates (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null)
        {
             ApiResponse<ActiveGateList> localVarResponse = GetAllActiveGatesWithHttpInfo(hostname, osType, networkAddress, type, networkZone, updateStatus, versionCompareType, version, autoUpdate, group, online, enabledModule, disabledModule, containerized);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all available ActiveGates The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse of ActiveGateList</returns>
        public ApiResponse< ActiveGateList > GetAllActiveGatesWithHttpInfo (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null)
        {

            var localVarPath = "/activeGates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (osType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "osType", osType)); // query parameter
            if (networkAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkAddress", networkAddress)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (networkZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkZone", networkZone)); // query parameter
            if (updateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateStatus", updateStatus)); // query parameter
            if (versionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionCompareType", versionCompareType)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (autoUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoUpdate", autoUpdate)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (online != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "online", online)); // query parameter
            if (enabledModule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enabledModule", enabledModule)); // query parameter
            if (disabledModule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "disabledModule", disabledModule)); // query parameter
            if (containerized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "containerized", containerized)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllActiveGates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateList)));
        }

        /// <summary>
        /// Lists all available ActiveGates The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ActiveGateList</returns>
        public async System.Threading.Tasks.Task<ActiveGateList> GetAllActiveGatesAsync (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null)
        {
             ApiResponse<ActiveGateList> localVarResponse = await GetAllActiveGatesAsyncWithHttpInfo(hostname, osType, networkAddress, type, networkZone, updateStatus, versionCompareType, version, autoUpdate, group, online, enabledModule, disabledModule, containerized);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all available ActiveGates The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filters the resulting set of ActiveGates by the name of the host it&#x27;s running on.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="osType">Filters the resulting set of ActiveGates by the OS type of the host it&#x27;s running on. (optional)</param>
        /// <param name="networkAddress">Filters the resulting set of ActiveGates by the network address.    You can specify a partial address. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="type">Filters the resulting set of ActiveGates by the ActiveGate type. (optional)</param>
        /// <param name="networkZone">Filters the resulting set of ActiveGates by the network zone.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="updateStatus">Filters the resulting set of ActiveGates by the auto-update status. (optional)</param>
        /// <param name="versionCompareType">Filters the resulting set of ActiveGates by the specified version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="version">Filters the resulting set of ActiveGates by the specified version.    Specify the version in &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60; format (for example, &#x60;1.195.0&#x60;) here. (optional)</param>
        /// <param name="autoUpdate">Filters the resulting set of ActiveGates by the actual state of auto-update. (optional)</param>
        /// <param name="group">Filters the resulting set of ActiveGates by the group.    You can specify a partial name. In that case, the &#x60;CONTAINS&#x60; operator is used. (optional)</param>
        /// <param name="online">Filters the resulting set of ActiveGates by the communication status. (optional)</param>
        /// <param name="enabledModule">Filters the resulting set of ActiveGates by the enabled modules. (optional)</param>
        /// <param name="disabledModule">Filters the resulting set of ActiveGates by the disabled modules. (optional)</param>
        /// <param name="containerized">Filters the resulting set of ActiveGates to those which are running in container (&#x60;true&#x60;) or not (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (ActiveGateList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActiveGateList>> GetAllActiveGatesAsyncWithHttpInfo (string hostname = null, string osType = null, string networkAddress = null, string type = null, string networkZone = null, string updateStatus = null, string versionCompareType = null, string version = null, string autoUpdate = null, string group = null, bool? online = null, List<string> enabledModule = null, List<string> disabledModule = null, bool? containerized = null)
        {

            var localVarPath = "/activeGates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hostname", hostname)); // query parameter
            if (osType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "osType", osType)); // query parameter
            if (networkAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkAddress", networkAddress)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (networkZone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkZone", networkZone)); // query parameter
            if (updateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateStatus", updateStatus)); // query parameter
            if (versionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionCompareType", versionCompareType)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (autoUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoUpdate", autoUpdate)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (online != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "online", online)); // query parameter
            if (enabledModule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enabledModule", enabledModule)); // query parameter
            if (disabledModule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "disabledModule", disabledModule)); // query parameter
            if (containerized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "containerized", containerized)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllActiveGates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateList)));
        }

        /// <summary>
        /// Gets the details of the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ActiveGate</returns>
        public ActiveGate GetOneActiveGateById (string agId)
        {
             ApiResponse<ActiveGate> localVarResponse = GetOneActiveGateByIdWithHttpInfo(agId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of ActiveGate</returns>
        public ApiResponse< ActiveGate > GetOneActiveGateByIdWithHttpInfo (string agId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesApi->GetOneActiveGateById");

            var localVarPath = "/activeGates/{agId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneActiveGateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGate)));
        }

        /// <summary>
        /// Gets the details of the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ActiveGate</returns>
        public async System.Threading.Tasks.Task<ActiveGate> GetOneActiveGateByIdAsync (string agId)
        {
             ApiResponse<ActiveGate> localVarResponse = await GetOneActiveGateByIdAsyncWithHttpInfo(agId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (ActiveGate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActiveGate>> GetOneActiveGateByIdAsyncWithHttpInfo (string agId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesApi->GetOneActiveGateById");

            var localVarPath = "/activeGates/{agId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOneActiveGateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGate)));
        }

    }
}
