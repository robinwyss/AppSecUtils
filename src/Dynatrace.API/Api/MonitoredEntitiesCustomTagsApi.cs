/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMonitoredEntitiesCustomTagsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the specified tag from the specified entities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>DeletedEntityTags</returns>
        DeletedEntityTags DeleteTags (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null);

        /// <summary>
        /// Deletes the specified tag from the specified entities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of DeletedEntityTags</returns>
        ApiResponse<DeletedEntityTags> DeleteTagsWithHttpInfo (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null);
        /// <summary>
        /// Gets a list of custom tags applied to the specified entities
        /// </summary>
        /// <remarks>
        /// Automatically applied tags and imported tags are not included.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>CustomEntityTags</returns>
        CustomEntityTags GetTags (string entitySelector, string from = null, string to = null);

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities
        /// </summary>
        /// <remarks>
        /// Automatically applied tags and imported tags are not included.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of CustomEntityTags</returns>
        ApiResponse<CustomEntityTags> GetTagsWithHttpInfo (string entitySelector, string from = null, string to = null);
        /// <summary>
        /// Adds custom tags to the specified entities
        /// </summary>
        /// <remarks>
        /// All existing tags remain unaffected.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>AddedEntityTags</returns>
        AddedEntityTags PostTags (string entitySelector, AddEntityTags body = null, string from = null, string to = null);

        /// <summary>
        /// Adds custom tags to the specified entities
        /// </summary>
        /// <remarks>
        /// All existing tags remain unaffected.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of AddedEntityTags</returns>
        ApiResponse<AddedEntityTags> PostTagsWithHttpInfo (string entitySelector, AddEntityTags body = null, string from = null, string to = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the specified tag from the specified entities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of DeletedEntityTags</returns>
        System.Threading.Tasks.Task<DeletedEntityTags> DeleteTagsAsync (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null);

        /// <summary>
        /// Deletes the specified tag from the specified entities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedEntityTags)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedEntityTags>> DeleteTagsAsyncWithHttpInfo (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null);
        /// <summary>
        /// Gets a list of custom tags applied to the specified entities
        /// </summary>
        /// <remarks>
        /// Automatically applied tags and imported tags are not included.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of CustomEntityTags</returns>
        System.Threading.Tasks.Task<CustomEntityTags> GetTagsAsync (string entitySelector, string from = null, string to = null);

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities
        /// </summary>
        /// <remarks>
        /// Automatically applied tags and imported tags are not included.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (CustomEntityTags)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomEntityTags>> GetTagsAsyncWithHttpInfo (string entitySelector, string from = null, string to = null);
        /// <summary>
        /// Adds custom tags to the specified entities
        /// </summary>
        /// <remarks>
        /// All existing tags remain unaffected.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of AddedEntityTags</returns>
        System.Threading.Tasks.Task<AddedEntityTags> PostTagsAsync (string entitySelector, AddEntityTags body = null, string from = null, string to = null);

        /// <summary>
        /// Adds custom tags to the specified entities
        /// </summary>
        /// <remarks>
        /// All existing tags remain unaffected.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (AddedEntityTags)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddedEntityTags>> PostTagsAsyncWithHttpInfo (string entitySelector, AddEntityTags body = null, string from = null, string to = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MonitoredEntitiesCustomTagsApi : IMonitoredEntitiesCustomTagsApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredEntitiesCustomTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitoredEntitiesCustomTagsApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredEntitiesCustomTagsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MonitoredEntitiesCustomTagsApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredEntitiesCustomTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitoredEntitiesCustomTagsApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the specified tag from the specified entities 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>DeletedEntityTags</returns>
        public DeletedEntityTags DeleteTags (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null)
        {
             ApiResponse<DeletedEntityTags> localVarResponse = DeleteTagsWithHttpInfo(key, entitySelector, value, deleteAllWithKey, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified tag from the specified entities 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of DeletedEntityTags</returns>
        public ApiResponse< DeletedEntityTags > DeleteTagsWithHttpInfo (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MonitoredEntitiesCustomTagsApi->DeleteTags");
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->DeleteTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (deleteAllWithKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteAllWithKey", deleteAllWithKey)); // query parameter
            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedEntityTags)));
        }

        /// <summary>
        /// Deletes the specified tag from the specified entities 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of DeletedEntityTags</returns>
        public async System.Threading.Tasks.Task<DeletedEntityTags> DeleteTagsAsync (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null)
        {
             ApiResponse<DeletedEntityTags> localVarResponse = await DeleteTagsAsyncWithHttpInfo(key, entitySelector, value, deleteAllWithKey, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified tag from the specified entities 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The tag to be deleted.</param>
        /// <param name="entitySelector">Specifies the entities where you want to delete tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="value">The tag to be deleted. (optional)</param>
        /// <param name="deleteAllWithKey">The tag to be deleted. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (DeletedEntityTags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedEntityTags>> DeleteTagsAsyncWithHttpInfo (string key, string entitySelector, string value = null, bool? deleteAllWithKey = null, string from = null, string to = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MonitoredEntitiesCustomTagsApi->DeleteTags");
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->DeleteTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (deleteAllWithKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteAllWithKey", deleteAllWithKey)); // query parameter
            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedEntityTags)));
        }

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities Automatically applied tags and imported tags are not included.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>CustomEntityTags</returns>
        public CustomEntityTags GetTags (string entitySelector, string from = null, string to = null)
        {
             ApiResponse<CustomEntityTags> localVarResponse = GetTagsWithHttpInfo(entitySelector, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities Automatically applied tags and imported tags are not included.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of CustomEntityTags</returns>
        public ApiResponse< CustomEntityTags > GetTagsWithHttpInfo (string entitySelector, string from = null, string to = null)
        {
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->GetTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomEntityTags)));
        }

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities Automatically applied tags and imported tags are not included.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of CustomEntityTags</returns>
        public async System.Threading.Tasks.Task<CustomEntityTags> GetTagsAsync (string entitySelector, string from = null, string to = null)
        {
             ApiResponse<CustomEntityTags> localVarResponse = await GetTagsAsyncWithHttpInfo(entitySelector, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of custom tags applied to the specified entities Automatically applied tags and imported tags are not included.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to read tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (CustomEntityTags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomEntityTags>> GetTagsAsyncWithHttpInfo (string entitySelector, string from = null, string to = null)
        {
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->GetTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomEntityTags)));
        }

        /// <summary>
        /// Adds custom tags to the specified entities All existing tags remain unaffected.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>AddedEntityTags</returns>
        public AddedEntityTags PostTags (string entitySelector, AddEntityTags body = null, string from = null, string to = null)
        {
             ApiResponse<AddedEntityTags> localVarResponse = PostTagsWithHttpInfo(entitySelector, body, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds custom tags to the specified entities All existing tags remain unaffected.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>ApiResponse of AddedEntityTags</returns>
        public ApiResponse< AddedEntityTags > PostTagsWithHttpInfo (string entitySelector, AddEntityTags body = null, string from = null, string to = null)
        {
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->PostTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddedEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddedEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddedEntityTags)));
        }

        /// <summary>
        /// Adds custom tags to the specified entities All existing tags remain unaffected.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of AddedEntityTags</returns>
        public async System.Threading.Tasks.Task<AddedEntityTags> PostTagsAsync (string entitySelector, AddEntityTags body = null, string from = null, string to = null)
        {
             ApiResponse<AddedEntityTags> localVarResponse = await PostTagsAsyncWithHttpInfo(entitySelector, body, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds custom tags to the specified entities All existing tags remain unaffected.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitySelector">Specifies the entities where you want to update tags. You must set one of these criteria: * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60; * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified. * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive. * Management zone ID: &#x60;mzId(123)&#x60; * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60;* Entity name: &#x60;entityName(\&quot;value\&quot;)&#x60;. By default this filters for entities, whose name **contains** the given value and is **not** case sensitive.  The following modifications are available: * &#x60;entityName.equals&#x60;: changes the operator to &#x60;EQUALS&#x60;.  * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.  * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.  * &#x60;caseSensitive(entityName(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive.* Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60;* First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.  The following operators are available: * &#x60;lte&#x60;: earlier than or at the specified time * &#x60;lt&#x60;: earlier than the specified time * &#x60;gte&#x60;: later than or at the specified time * &#x60;gt&#x60;: later than the specified time* Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **properties** field. * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET all entity types](https://dt-url.net/dw03s7h) and check the **fromRelationships** and **toRelationships** fields.* Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**. For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation. To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response. The length of the string is limited to 10,000 characters. </param>
        /// <param name="body">The JSON body of the request. Contains tags to be added to the matching entities. (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of 24 hours is used (&#x60;now-24h&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <returns>Task of ApiResponse (AddedEntityTags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddedEntityTags>> PostTagsAsyncWithHttpInfo (string entitySelector, AddEntityTags body = null, string from = null, string to = null)
        {
            // verify the required parameter 'entitySelector' is set
            if (entitySelector == null)
                throw new ApiException(400, "Missing required parameter 'entitySelector' when calling MonitoredEntitiesCustomTagsApi->PostTags");

            var localVarPath = "/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entitySelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entitySelector", entitySelector)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddedEntityTags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddedEntityTags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddedEntityTags)));
        }

    }
}
