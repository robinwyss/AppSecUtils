/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAccessTokensAPITokensApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new API token
        /// </summary>
        /// <remarks>
        /// The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>ApiTokenCreated</returns>
        ApiTokenCreated CreateApiToken (ApiTokenCreate body);

        /// <summary>
        /// Creates a new API token
        /// </summary>
        /// <remarks>
        /// The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>ApiResponse of ApiTokenCreated</returns>
        ApiResponse<ApiTokenCreated> CreateApiTokenWithHttpInfo (ApiTokenCreate body);
        /// <summary>
        /// Deletes an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns></returns>
        void DeleteApiToken (string id);

        /// <summary>
        /// Deletes an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiTokenWithHttpInfo (string id);
        /// <summary>
        /// Gets API token metadata by token ID
        /// </summary>
        /// <remarks>
        /// The token secret is **not** exposed.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>ApiToken</returns>
        ApiToken GetApiToken (string id);

        /// <summary>
        /// Gets API token metadata by token ID
        /// </summary>
        /// <remarks>
        /// The token secret is **not** exposed.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>ApiResponse of ApiToken</returns>
        ApiResponse<ApiToken> GetApiTokenWithHttpInfo (string id);
        /// <summary>
        /// Lists all available API tokens
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>ApiTokenList</returns>
        ApiTokenList ListApiTokens (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null);

        /// <summary>
        /// Lists all available API tokens
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>ApiResponse of ApiTokenList</returns>
        ApiResponse<ApiTokenList> ListApiTokensWithHttpInfo (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null);
        /// <summary>
        /// Gets API token metadata by token secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>ApiToken</returns>
        ApiToken LookupApiToken (ApiTokenSecret body);

        /// <summary>
        /// Gets API token metadata by token secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>ApiResponse of ApiToken</returns>
        ApiResponse<ApiToken> LookupApiTokenWithHttpInfo (ApiTokenSecret body);
        /// <summary>
        /// Updates an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns></returns>
        void UpdateApiToken (ApiTokenUpdate body, string id);

        /// <summary>
        /// Updates an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateApiTokenWithHttpInfo (ApiTokenUpdate body, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new API token
        /// </summary>
        /// <remarks>
        /// The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>Task of ApiTokenCreated</returns>
        System.Threading.Tasks.Task<ApiTokenCreated> CreateApiTokenAsync (ApiTokenCreate body);

        /// <summary>
        /// Creates a new API token
        /// </summary>
        /// <remarks>
        /// The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>Task of ApiResponse (ApiTokenCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiTokenCreated>> CreateApiTokenAsyncWithHttpInfo (ApiTokenCreate body);
        /// <summary>
        /// Deletes an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiTokenAsync (string id);

        /// <summary>
        /// Deletes an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiTokenAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets API token metadata by token ID
        /// </summary>
        /// <remarks>
        /// The token secret is **not** exposed.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>Task of ApiToken</returns>
        System.Threading.Tasks.Task<ApiToken> GetApiTokenAsync (string id);

        /// <summary>
        /// Gets API token metadata by token ID
        /// </summary>
        /// <remarks>
        /// The token secret is **not** exposed.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>Task of ApiResponse (ApiToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiToken>> GetApiTokenAsyncWithHttpInfo (string id);
        /// <summary>
        /// Lists all available API tokens
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>Task of ApiTokenList</returns>
        System.Threading.Tasks.Task<ApiTokenList> ListApiTokensAsync (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null);

        /// <summary>
        /// Lists all available API tokens
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>Task of ApiResponse (ApiTokenList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiTokenList>> ListApiTokensAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null);
        /// <summary>
        /// Gets API token metadata by token secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>Task of ApiToken</returns>
        System.Threading.Tasks.Task<ApiToken> LookupApiTokenAsync (ApiTokenSecret body);

        /// <summary>
        /// Gets API token metadata by token secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>Task of ApiResponse (ApiToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiToken>> LookupApiTokenAsyncWithHttpInfo (ApiTokenSecret body);
        /// <summary>
        /// Updates an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateApiTokenAsync (ApiTokenUpdate body, string id);

        /// <summary>
        /// Updates an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApiTokenAsyncWithHttpInfo (ApiTokenUpdate body, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AccessTokensAPITokensApi : IAccessTokensAPITokensApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokensAPITokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccessTokensAPITokensApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokensAPITokensApi"/> class
        /// </summary>
        /// <returns></returns>
        public AccessTokensAPITokensApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokensAPITokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccessTokensAPITokensApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new API token The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>ApiTokenCreated</returns>
        public ApiTokenCreated CreateApiToken (ApiTokenCreate body)
        {
             ApiResponse<ApiTokenCreated> localVarResponse = CreateApiTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new API token The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>ApiResponse of ApiTokenCreated</returns>
        public ApiResponse< ApiTokenCreated > CreateApiTokenWithHttpInfo (ApiTokenCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->CreateApiToken");

            var localVarPath = "/apiTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiTokenCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiTokenCreated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiTokenCreated)));
        }

        /// <summary>
        /// Creates a new API token The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>Task of ApiTokenCreated</returns>
        public async System.Threading.Tasks.Task<ApiTokenCreated> CreateApiTokenAsync (ApiTokenCreate body)
        {
             ApiResponse<ApiTokenCreated> localVarResponse = await CreateApiTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new API token The newly created token will be owned by the same user who owns the token used for authentication of the call.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new API token.</param>
        /// <returns>Task of ApiResponse (ApiTokenCreated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiTokenCreated>> CreateApiTokenAsyncWithHttpInfo (ApiTokenCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->CreateApiToken");

            var localVarPath = "/apiTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiTokenCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiTokenCreated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiTokenCreated)));
        }

        /// <summary>
        /// Deletes an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns></returns>
        public void DeleteApiToken (string id)
        {
             DeleteApiTokenWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApiTokenWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->DeleteApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiTokenAsync (string id)
        {
             await DeleteApiTokenAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token to be deleted. You can specify either the ID or the secret of the token. You can&#x27;t delete the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiTokenAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->DeleteApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets API token metadata by token ID The token secret is **not** exposed.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>ApiToken</returns>
        public ApiToken GetApiToken (string id)
        {
             ApiResponse<ApiToken> localVarResponse = GetApiTokenWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets API token metadata by token ID The token secret is **not** exposed.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>ApiResponse of ApiToken</returns>
        public ApiResponse< ApiToken > GetApiTokenWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->GetApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiToken)));
        }

        /// <summary>
        /// Gets API token metadata by token ID The token secret is **not** exposed.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>Task of ApiToken</returns>
        public async System.Threading.Tasks.Task<ApiToken> GetApiTokenAsync (string id)
        {
             ApiResponse<ApiToken> localVarResponse = await GetApiTokenAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets API token metadata by token ID The token secret is **not** exposed.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the token.</param>
        /// <returns>Task of ApiResponse (ApiToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiToken>> GetApiTokenAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->GetApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiToken)));
        }

        /// <summary>
        /// Lists all available API tokens You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>ApiTokenList</returns>
        public ApiTokenList ListApiTokens (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null)
        {
             ApiResponse<ApiTokenList> localVarResponse = ListApiTokensWithHttpInfo(nextPageKey, pageSize, apiTokenSelector, fields, from, to, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all available API tokens You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>ApiResponse of ApiTokenList</returns>
        public ApiResponse< ApiTokenList > ListApiTokensWithHttpInfo (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null)
        {

            var localVarPath = "/apiTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (apiTokenSelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiTokenSelector", apiTokenSelector)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiTokenList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiTokenList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiTokenList)));
        }

        /// <summary>
        /// Lists all available API tokens You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>Task of ApiTokenList</returns>
        public async System.Threading.Tasks.Task<ApiTokenList> ListApiTokensAsync (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null)
        {
             ApiResponse<ApiTokenList> localVarResponse = await ListApiTokensAsyncWithHttpInfo(nextPageKey, pageSize, apiTokenSelector, fields, from, to, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all available API tokens You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of API tokens in a single response payload. The maximal allowed page size is 10000 and the minimal allowed page size is 100. If not set, 200 is used. (optional)</param>
        /// <param name="apiTokenSelector">Filters the resulting sets of tokens. Only tokens matching the specified criteria are included into response. You can set one or more of the following criteria: * Owner: &#x60;owner(\&quot;value\&quot;)&#x60;. The user that owns the token. Case-sensitive.* Personal access token: &#x60;personalAccessToken(false)&#x60;. Set to &#x60;true&#x60; to include only personal access tokens or to &#x60;false&#x60; to include only API tokens.* Token scope: &#x60;scope(\&quot;scope1\&quot;,\&quot;scope2\&quot;)&#x60;. If several values are specified, the **OR** logic applies. To set multiple criteria, separate them with commas (&#x60;,&#x60;). Only results matching **all** criteria are included into response. (optional)</param>
        /// <param name="fields">Specifies the fields to be included in the response.The following fields are included by default: * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;enabled&#x60; * &#x60;owner&#x60; * &#x60;creationDate&#x60; To remove fields from the response, specify them with the minus (&#x60;-&#x60;) operator as a comma-separated list (for example, &#x60;-creationDate,-owner&#x60;). You can include additional fields: * &#x60;personalAccessToken&#x60; * &#x60;expirationDate&#x60; * &#x60;lastUsedDate&#x60; * &#x60;lastUsedIpAddress&#x60; * &#x60;scopes&#x60; To add fields to the response, specify them with the plus (&#x60;+&#x60;) operator as a comma-separated list (for example, &#x60;+expirationDate,+scopes&#x60;). You can combine adding and removing of fields (for example, &#x60;+scopes,-creationDate&#x60;). Alternatively, you can define the desired set of fields in the response. Specify the required fields as a comma-separated list, without operators (for example, &#x60;creationDate,expirationDate,owner&#x60;). The ID is always included in the response. The **fields** string must be URL-encoded. (optional)</param>
        /// <param name="from">Filters tokens based on the last usage time. The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years  (optional)</param>
        /// <param name="to">Filters tokens based on the last usage time. The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sort order of the token list. You can sort by the following properties with a sign prefix for the sort order:  * &#x60;name&#x60;: token name (&#x60;+&#x60; a...z or &#x60;-&#x60; z...a)  * &#x60;lastUsedDate&#x60; last used (&#x60;+&#x60; never used tokens first &#x60;-&#x60; most recently used tokens first)  * &#x60;creationDate&#x60; (&#x60;+&#x60; oldest tokens first &#x60;-&#x60; newest tokens first)  * &#x60;expirationDate&#x60; (&#x60;+&#x60; tokens that expire soon first &#x60;-&#x60; unlimited tokens first) If no prefix is set, + is used. If not set, tokens are sorted by creation date with newest first. (optional, default to -creationDate)</param>
        /// <returns>Task of ApiResponse (ApiTokenList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiTokenList>> ListApiTokensAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string apiTokenSelector = null, string fields = null, string from = null, string to = null, string sort = null)
        {

            var localVarPath = "/apiTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (apiTokenSelector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiTokenSelector", apiTokenSelector)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiTokenList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiTokenList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiTokenList)));
        }

        /// <summary>
        /// Gets API token metadata by token secret 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>ApiToken</returns>
        public ApiToken LookupApiToken (ApiTokenSecret body)
        {
             ApiResponse<ApiToken> localVarResponse = LookupApiTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets API token metadata by token secret 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>ApiResponse of ApiToken</returns>
        public ApiResponse< ApiToken > LookupApiTokenWithHttpInfo (ApiTokenSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->LookupApiToken");

            var localVarPath = "/apiTokens/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiToken)));
        }

        /// <summary>
        /// Gets API token metadata by token secret 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>Task of ApiToken</returns>
        public async System.Threading.Tasks.Task<ApiToken> LookupApiTokenAsync (ApiTokenSecret body)
        {
             ApiResponse<ApiToken> localVarResponse = await LookupApiTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets API token metadata by token secret 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the required token.</param>
        /// <returns>Task of ApiResponse (ApiToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiToken>> LookupApiTokenAsyncWithHttpInfo (ApiTokenSecret body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->LookupApiToken");

            var localVarPath = "/apiTokens/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiToken)));
        }

        /// <summary>
        /// Updates an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns></returns>
        public void UpdateApiToken (ApiTokenUpdate body, string id)
        {
             UpdateApiTokenWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateApiTokenWithHttpInfo (ApiTokenUpdate body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->UpdateApiToken");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->UpdateApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateApiTokenAsync (ApiTokenUpdate body, string id)
        {
             await UpdateApiTokenAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates an API token 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the API token.</param>
        /// <param name="id">The ID of the token to be updated.  You can&#x27;t disable the token you&#x27;re using for authentication of the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApiTokenAsyncWithHttpInfo (ApiTokenUpdate body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccessTokensAPITokensApi->UpdateApiToken");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensAPITokensApi->UpdateApiToken");

            var localVarPath = "/apiTokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
