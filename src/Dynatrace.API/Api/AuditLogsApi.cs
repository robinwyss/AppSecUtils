/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuditLogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>AuditLogEntry</returns>
        AuditLogEntry GetLog (string id);

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        ApiResponse<AuditLogEntry> GetLogWithHttpInfo (string id);
        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>AuditLog</returns>
        AuditLog GetLogs (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null);

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>ApiResponse of AuditLog</returns>
        ApiResponse<AuditLog> GetLogsWithHttpInfo (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>Task of AuditLogEntry</returns>
        System.Threading.Tasks.Task<AuditLogEntry> GetLogAsync (string id);

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetLogAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>Task of AuditLog</returns>
        System.Threading.Tasks.Task<AuditLog> GetLogsAsync (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null);

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLog>> GetLogsAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuditLogsApi : IAuditLogsApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogsApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>AuditLogEntry</returns>
        public AuditLogEntry GetLog (string id)
        {
             ApiResponse<AuditLogEntry> localVarResponse = GetLogWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        public ApiResponse< AuditLogEntry > GetLogWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->GetLog");

            var localVarPath = "/auditlogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>Task of AuditLogEntry</returns>
        public async System.Threading.Tasks.Task<AuditLogEntry> GetLogAsync (string id)
        {
             ApiResponse<AuditLogEntry> localVarResponse = await GetLogAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the specified entry of the audit log | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required log entry.</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetLogAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->GetLog");

            var localVarPath = "/auditlogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>AuditLog</returns>
        public AuditLog GetLogs (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null)
        {
             ApiResponse<AuditLog> localVarResponse = GetLogsWithHttpInfo(nextPageKey, pageSize, filter, from, to, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>ApiResponse of AuditLog</returns>
        public ApiResponse< AuditLog > GetLogsWithHttpInfo (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null)
        {

            var localVarPath = "/auditlogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>Task of AuditLog</returns>
        public async System.Threading.Tasks.Task<AuditLog> GetLogsAsync (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null)
        {
             ApiResponse<AuditLog> localVarResponse = await GetLogsAsyncWithHttpInfo(nextPageKey, pageSize, filter, from, to, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the audit log of your Dynatrace environment | maturity&#x3D;EARLY_ADOPTER You can limit the output by using pagination: 1. Specify the number of results per page in the **pageSize** query parameter. 2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of log entries in a single response payload. The maximal allowed page size is 5000. If not set, 1000 is used. (optional)</param>
        /// <param name="filter">Filters the audit log. You can use the following criteria: * User: &#x60;user(\&quot;userIdentification\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Event type: &#x60;eventType(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Category of a logged operation: &#x60;category(\&quot;value\&quot;)&#x60;. The &#x60;EQUALS&#x60; operator applies. * Entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. The &#x60;CONTAINS&#x60; operator applies. For each criterion, you can specify multiple alternatives with comma-separated values. In this case, the OR logic applies. For example, &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;)&#x60; means eventType can be \&quot;CREATE\&quot; or \&quot;UPDATE\&quot;. You can specify multiple comma-separated criteria, such as &#x60;eventType(\&quot;CREATE\&quot;,\&quot;UPDATE\&quot;),category(\&quot;CONFIG\&quot;)&#x60;. Only results matching **all** criteria are included in response. Specify the value of a criterion as a quoted string. The following special characters must be escaped with a tilde (&#x60;~&#x60;) inside quotes: * Tilde &#x60;~&#x60; * Quote &#x60;\&quot;&#x60; (optional)</param>
        /// <param name="from">The start of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the relative timeframe of two weeks is used (&#x60;now-2w&#x60;). (optional)</param>
        /// <param name="to">The end of the requested timeframe. You can use one of the following formats: * Timestamp in UTC milliseconds. * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week. You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;. Supported time units for the relative timeframe are:    * &#x60;m&#x60;: minutes    * &#x60;h&#x60;: hours    * &#x60;d&#x60;: days    * &#x60;w&#x60;: weeks    * &#x60;M&#x60;: months    * &#x60;y&#x60;: years If not set, the current timestamp is used. (optional)</param>
        /// <param name="sort">The sorting of audit log entries: * &#x60;timestamp&#x60;: Oldest first. * &#x60;-timestamp&#x60;: Newest first. If not set, the newest first sorting is applied. (optional, default to -timestamp)</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLog>> GetLogsAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string filter = null, string from = null, string to = null, string sort = null)
        {

            var localVarPath = "/auditlogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

    }
}
