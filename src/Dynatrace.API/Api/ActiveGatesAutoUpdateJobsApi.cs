/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActiveGatesAutoUpdateJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new update job for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>UpdateJob</returns>
        UpdateJob CreateUpdateJobForAg (UpdateJob body, string agId);

        /// <summary>
        /// Creates a new update job for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of UpdateJob</returns>
        ApiResponse<UpdateJob> CreateUpdateJobForAgWithHttpInfo (UpdateJob body, string agId);
        /// <summary>
        /// Deletes the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns></returns>
        void DeleteUpdateJobByJobIdForAg (string agId, string jobId);

        /// <summary>
        /// Deletes the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUpdateJobByJobIdForAgWithHttpInfo (string agId, string jobId);
        /// <summary>
        /// List ActiveGates with update jobs
        /// </summary>
        /// <remarks>
        /// The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>UpdateJobsAll</returns>
        UpdateJobsAll GetAllUpdateJobList (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);

        /// <summary>
        /// List ActiveGates with update jobs
        /// </summary>
        /// <remarks>
        /// The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>ApiResponse of UpdateJobsAll</returns>
        ApiResponse<UpdateJobsAll> GetAllUpdateJobListWithHttpInfo (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);
        /// <summary>
        /// Gets the parameters of the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>UpdateJob</returns>
        UpdateJob GetUpdateJobByJobIdForAg (string agId, string jobId);

        /// <summary>
        /// Gets the parameters of the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>ApiResponse of UpdateJob</returns>
        ApiResponse<UpdateJob> GetUpdateJobByJobIdForAgWithHttpInfo (string agId, string jobId);
        /// <summary>
        /// Lists update jobs for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// The job can update the ActiveGate to the specified version or the latest available one.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>UpdateJobList</returns>
        UpdateJobList GetUpdateJobListByAgId (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);

        /// <summary>
        /// Lists update jobs for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// The job can update the ActiveGate to the specified version or the latest available one.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>ApiResponse of UpdateJobList</returns>
        ApiResponse<UpdateJobList> GetUpdateJobListByAgIdWithHttpInfo (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        void ValidateUpdateJobForAg (UpdateJob body, string agId);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateUpdateJobForAgWithHttpInfo (UpdateJob body, string agId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new update job for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of UpdateJob</returns>
        System.Threading.Tasks.Task<UpdateJob> CreateUpdateJobForAgAsync (UpdateJob body, string agId);

        /// <summary>
        /// Creates a new update job for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (UpdateJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateJob>> CreateUpdateJobForAgAsyncWithHttpInfo (UpdateJob body, string agId);
        /// <summary>
        /// Deletes the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUpdateJobByJobIdForAgAsync (string agId, string jobId);

        /// <summary>
        /// Deletes the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUpdateJobByJobIdForAgAsyncWithHttpInfo (string agId, string jobId);
        /// <summary>
        /// List ActiveGates with update jobs
        /// </summary>
        /// <remarks>
        /// The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of UpdateJobsAll</returns>
        System.Threading.Tasks.Task<UpdateJobsAll> GetAllUpdateJobListAsync (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);

        /// <summary>
        /// List ActiveGates with update jobs
        /// </summary>
        /// <remarks>
        /// The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (UpdateJobsAll)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateJobsAll>> GetAllUpdateJobListAsyncWithHttpInfo (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);
        /// <summary>
        /// Gets the parameters of the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of UpdateJob</returns>
        System.Threading.Tasks.Task<UpdateJob> GetUpdateJobByJobIdForAgAsync (string agId, string jobId);

        /// <summary>
        /// Gets the parameters of the specified update job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of ApiResponse (UpdateJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateJob>> GetUpdateJobByJobIdForAgAsyncWithHttpInfo (string agId, string jobId);
        /// <summary>
        /// Lists update jobs for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// The job can update the ActiveGate to the specified version or the latest available one.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of UpdateJobList</returns>
        System.Threading.Tasks.Task<UpdateJobList> GetUpdateJobListByAgIdAsync (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);

        /// <summary>
        /// Lists update jobs for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// The job can update the ActiveGate to the specified version or the latest available one.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (UpdateJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateJobList>> GetUpdateJobListByAgIdAsyncWithHttpInfo (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateUpdateJobForAgAsync (UpdateJob body, string agId);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateUpdateJobForAgAsyncWithHttpInfo (UpdateJob body, string agId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActiveGatesAutoUpdateJobsApi : IActiveGatesAutoUpdateJobsApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateJobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActiveGatesAutoUpdateJobsApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateJobsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActiveGatesAutoUpdateJobsApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateJobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActiveGatesAutoUpdateJobsApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new update job for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>UpdateJob</returns>
        public UpdateJob CreateUpdateJobForAg (UpdateJob body, string agId)
        {
             ApiResponse<UpdateJob> localVarResponse = CreateUpdateJobForAgWithHttpInfo(body, agId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new update job for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of UpdateJob</returns>
        public ApiResponse< UpdateJob > CreateUpdateJobForAgWithHttpInfo (UpdateJob body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateJobsApi->CreateUpdateJobForAg");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->CreateUpdateJobForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateJobForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJob)));
        }

        /// <summary>
        /// Creates a new update job for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of UpdateJob</returns>
        public async System.Threading.Tasks.Task<UpdateJob> CreateUpdateJobForAgAsync (UpdateJob body, string agId)
        {
             ApiResponse<UpdateJob> localVarResponse = await CreateUpdateJobForAgAsyncWithHttpInfo(body, agId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new update job for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (UpdateJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateJob>> CreateUpdateJobForAgAsyncWithHttpInfo (UpdateJob body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateJobsApi->CreateUpdateJobForAg");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->CreateUpdateJobForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateJobForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJob)));
        }

        /// <summary>
        /// Deletes the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns></returns>
        public void DeleteUpdateJobByJobIdForAg (string agId, string jobId)
        {
             DeleteUpdateJobByJobIdForAgWithHttpInfo(agId, jobId);
        }

        /// <summary>
        /// Deletes the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUpdateJobByJobIdForAgWithHttpInfo (string agId, string jobId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->DeleteUpdateJobByJobIdForAg");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActiveGatesAutoUpdateJobsApi->DeleteUpdateJobByJobIdForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUpdateJobByJobIdForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUpdateJobByJobIdForAgAsync (string agId, string jobId)
        {
             await DeleteUpdateJobByJobIdForAgAsyncWithHttpInfo(agId, jobId);

        }

        /// <summary>
        /// Deletes the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUpdateJobByJobIdForAgAsyncWithHttpInfo (string agId, string jobId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->DeleteUpdateJobByJobIdForAg");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActiveGatesAutoUpdateJobsApi->DeleteUpdateJobByJobIdForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUpdateJobByJobIdForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List ActiveGates with update jobs The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>UpdateJobsAll</returns>
        public UpdateJobsAll GetAllUpdateJobList (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
             ApiResponse<UpdateJobsAll> localVarResponse = GetAllUpdateJobListWithHttpInfo(from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List ActiveGates with update jobs The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>ApiResponse of UpdateJobsAll</returns>
        public ApiResponse< UpdateJobsAll > GetAllUpdateJobListWithHttpInfo (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {

            var localVarPath = "/activeGates/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (startVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersionCompareType", startVersionCompareType)); // query parameter
            if (startVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersion", startVersion)); // query parameter
            if (updateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateType", updateType)); // query parameter
            if (targetVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersionCompareType", targetVersionCompareType)); // query parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersion", targetVersion)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUpdateJobList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJobsAll>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJobsAll) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJobsAll)));
        }

        /// <summary>
        /// List ActiveGates with update jobs The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of UpdateJobsAll</returns>
        public async System.Threading.Tasks.Task<UpdateJobsAll> GetAllUpdateJobListAsync (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
             ApiResponse<UpdateJobsAll> localVarResponse = await GetAllUpdateJobListAsyncWithHttpInfo(from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List ActiveGates with update jobs The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (UpdateJobsAll)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateJobsAll>> GetAllUpdateJobListAsyncWithHttpInfo (string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {

            var localVarPath = "/activeGates/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (startVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersionCompareType", startVersionCompareType)); // query parameter
            if (startVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersion", startVersion)); // query parameter
            if (updateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateType", updateType)); // query parameter
            if (targetVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersionCompareType", targetVersionCompareType)); // query parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersion", targetVersion)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUpdateJobList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJobsAll>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJobsAll) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJobsAll)));
        }

        /// <summary>
        /// Gets the parameters of the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>UpdateJob</returns>
        public UpdateJob GetUpdateJobByJobIdForAg (string agId, string jobId)
        {
             ApiResponse<UpdateJob> localVarResponse = GetUpdateJobByJobIdForAgWithHttpInfo(agId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the parameters of the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>ApiResponse of UpdateJob</returns>
        public ApiResponse< UpdateJob > GetUpdateJobByJobIdForAgWithHttpInfo (string agId, string jobId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobByJobIdForAg");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobByJobIdForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpdateJobByJobIdForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJob)));
        }

        /// <summary>
        /// Gets the parameters of the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of UpdateJob</returns>
        public async System.Threading.Tasks.Task<UpdateJob> GetUpdateJobByJobIdForAgAsync (string agId, string jobId)
        {
             ApiResponse<UpdateJob> localVarResponse = await GetUpdateJobByJobIdForAgAsyncWithHttpInfo(agId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the parameters of the specified update job 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="jobId">A unique identifier for a update-job of ActiveGate.</param>
        /// <returns>Task of ApiResponse (UpdateJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateJob>> GetUpdateJobByJobIdForAgAsyncWithHttpInfo (string agId, string jobId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobByJobIdForAg");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobByJobIdForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpdateJobByJobIdForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJob)));
        }

        /// <summary>
        /// Lists update jobs for the specified ActiveGate The job can update the ActiveGate to the specified version or the latest available one.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>UpdateJobList</returns>
        public UpdateJobList GetUpdateJobListByAgId (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
             ApiResponse<UpdateJobList> localVarResponse = GetUpdateJobListByAgIdWithHttpInfo(agId, from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists update jobs for the specified ActiveGate The job can update the ActiveGate to the specified version or the latest available one.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>ApiResponse of UpdateJobList</returns>
        public ApiResponse< UpdateJobList > GetUpdateJobListByAgIdWithHttpInfo (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobListByAgId");

            var localVarPath = "/activeGates/{agId}/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (startVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersionCompareType", startVersionCompareType)); // query parameter
            if (startVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersion", startVersion)); // query parameter
            if (updateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateType", updateType)); // query parameter
            if (targetVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersionCompareType", targetVersionCompareType)); // query parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersion", targetVersion)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpdateJobListByAgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJobList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJobList)));
        }

        /// <summary>
        /// Lists update jobs for the specified ActiveGate The job can update the ActiveGate to the specified version or the latest available one.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of UpdateJobList</returns>
        public async System.Threading.Tasks.Task<UpdateJobList> GetUpdateJobListByAgIdAsync (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
             ApiResponse<UpdateJobList> localVarResponse = await GetUpdateJobListByAgIdAsyncWithHttpInfo(agId, from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists update jobs for the specified ActiveGate The job can update the ActiveGate to the specified version or the latest available one.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <param name="from">The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)</param>
        /// <param name="to">The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)</param>
        /// <param name="startVersionCompareType">Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="startVersion">Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <param name="updateType">Filters the resulting set of update-jobs by the update type. (optional)</param>
        /// <param name="targetVersionCompareType">Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)</param>
        /// <param name="targetVersion">Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (UpdateJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateJobList>> GetUpdateJobListByAgIdAsyncWithHttpInfo (string agId, string from = null, string to = null, string startVersionCompareType = null, string startVersion = null, string updateType = null, string targetVersionCompareType = null, string targetVersion = null)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->GetUpdateJobListByAgId");

            var localVarPath = "/activeGates/{agId}/updateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (startVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersionCompareType", startVersionCompareType)); // query parameter
            if (startVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startVersion", startVersion)); // query parameter
            if (updateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateType", updateType)); // query parameter
            if (targetVersionCompareType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersionCompareType", targetVersionCompareType)); // query parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetVersion", targetVersion)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpdateJobListByAgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateJobList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateJobList)));
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        public void ValidateUpdateJobForAg (UpdateJob body, string agId)
        {
             ValidateUpdateJobForAgWithHttpInfo(body, agId);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidateUpdateJobForAgWithHttpInfo (UpdateJob body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateJobsApi->ValidateUpdateJobForAg");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->ValidateUpdateJobForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateUpdateJobForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateUpdateJobForAgAsync (UpdateJob body, string agId)
        {
             await ValidateUpdateJobForAgAsyncWithHttpInfo(body, agId);

        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing update-job parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateUpdateJobForAgAsyncWithHttpInfo (UpdateJob body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateJobsApi->ValidateUpdateJobForAg");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateJobsApi->ValidateUpdateJobForAg");

            var localVarPath = "/activeGates/{agId}/updateJobs/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateUpdateJobForAg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
