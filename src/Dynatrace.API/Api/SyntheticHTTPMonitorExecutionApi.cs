/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISyntheticHTTPMonitorExecutionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>MonitorExecutionResults</returns>
        MonitorExecutionResults GetExecutionResult (string monitorId, string resultType, string locationId = null);

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>ApiResponse of MonitorExecutionResults</returns>
        ApiResponse<MonitorExecutionResults> GetExecutionResultWithHttpInfo (string monitorId, string resultType, string locationId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>Task of MonitorExecutionResults</returns>
        System.Threading.Tasks.Task<MonitorExecutionResults> GetExecutionResultAsync (string monitorId, string resultType, string locationId = null);

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>Task of ApiResponse (MonitorExecutionResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonitorExecutionResults>> GetExecutionResultAsyncWithHttpInfo (string monitorId, string resultType, string locationId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SyntheticHTTPMonitorExecutionApi : ISyntheticHTTPMonitorExecutionApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticHTTPMonitorExecutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SyntheticHTTPMonitorExecutionApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticHTTPMonitorExecutionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SyntheticHTTPMonitorExecutionApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticHTTPMonitorExecutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SyntheticHTTPMonitorExecutionApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>MonitorExecutionResults</returns>
        public MonitorExecutionResults GetExecutionResult (string monitorId, string resultType, string locationId = null)
        {
             ApiResponse<MonitorExecutionResults> localVarResponse = GetExecutionResultWithHttpInfo(monitorId, resultType, locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>ApiResponse of MonitorExecutionResults</returns>
        public ApiResponse< MonitorExecutionResults > GetExecutionResultWithHttpInfo (string monitorId, string resultType, string locationId = null)
        {
            // verify the required parameter 'monitorId' is set
            if (monitorId == null)
                throw new ApiException(400, "Missing required parameter 'monitorId' when calling SyntheticHTTPMonitorExecutionApi->GetExecutionResult");
            // verify the required parameter 'resultType' is set
            if (resultType == null)
                throw new ApiException(400, "Missing required parameter 'resultType' when calling SyntheticHTTPMonitorExecutionApi->GetExecutionResult");

            var localVarPath = "/synthetic/execution/{monitorId}/{resultType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitorId != null) localVarPathParams.Add("monitorId", this.Configuration.ApiClient.ParameterToString(monitorId)); // path parameter
            if (resultType != null) localVarPathParams.Add("resultType", this.Configuration.ApiClient.ParameterToString(resultType)); // path parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitorExecutionResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitorExecutionResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitorExecutionResults)));
        }

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>Task of MonitorExecutionResults</returns>
        public async System.Threading.Tasks.Task<MonitorExecutionResults> GetExecutionResultAsync (string monitorId, string resultType, string locationId = null)
        {
             ApiResponse<MonitorExecutionResults> localVarResponse = await GetExecutionResultAsyncWithHttpInfo(monitorId, resultType, locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns detailed information about last HTTP monitor execution. | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monitorId">Identifier of the HTTP monitor for which last execution result is returned.</param>
        /// <param name="resultType">Defines the result type of the last HTTP monitor&#x27;s execution.</param>
        /// <param name="locationId">Filters the results to those executed by specified Synthetic location. Specify the ID of the location. (optional)</param>
        /// <returns>Task of ApiResponse (MonitorExecutionResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MonitorExecutionResults>> GetExecutionResultAsyncWithHttpInfo (string monitorId, string resultType, string locationId = null)
        {
            // verify the required parameter 'monitorId' is set
            if (monitorId == null)
                throw new ApiException(400, "Missing required parameter 'monitorId' when calling SyntheticHTTPMonitorExecutionApi->GetExecutionResult");
            // verify the required parameter 'resultType' is set
            if (resultType == null)
                throw new ApiException(400, "Missing required parameter 'resultType' when calling SyntheticHTTPMonitorExecutionApi->GetExecutionResult");

            var localVarPath = "/synthetic/execution/{monitorId}/{resultType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (monitorId != null) localVarPathParams.Add("monitorId", this.Configuration.ApiClient.ParameterToString(monitorId)); // path parameter
            if (resultType != null) localVarPathParams.Add("resultType", this.Configuration.ApiClient.ParameterToString(resultType)); // path parameter
            if (locationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locationId", locationId)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitorExecutionResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitorExecutionResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitorExecutionResults)));
        }

    }
}
