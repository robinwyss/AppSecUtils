/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface INetworkZonesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>EntityShortRepresentation</returns>
        EntityShortRepresentation CreateOrUpdateNetworkZone (NetworkZone body, string id);

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>ApiResponse of EntityShortRepresentation</returns>
        ApiResponse<EntityShortRepresentation> CreateOrUpdateNetworkZoneWithHttpInfo (NetworkZone body, string id);
        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns></returns>
        void DeleteNetworkZone (string id);

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNetworkZoneWithHttpInfo (string id);
        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NetworkZoneList</returns>
        NetworkZoneList GetAllNetworkZones ();

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NetworkZoneList</returns>
        ApiResponse<NetworkZoneList> GetAllNetworkZonesWithHttpInfo ();
        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NetworkZoneSettings</returns>
        NetworkZoneSettings GetNetworkZoneSettings ();

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NetworkZoneSettings</returns>
        ApiResponse<NetworkZoneSettings> GetNetworkZoneSettingsWithHttpInfo ();
        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>NetworkZone</returns>
        NetworkZone GetSingleNetworkZone (string id);

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> GetSingleNetworkZoneWithHttpInfo (string id);
        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns></returns>
        void UpdateNetworkZoneSettings (NetworkZoneSettings body);

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNetworkZoneSettingsWithHttpInfo (NetworkZoneSettings body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>Task of EntityShortRepresentation</returns>
        System.Threading.Tasks.Task<EntityShortRepresentation> CreateOrUpdateNetworkZoneAsync (NetworkZone body, string id);

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>Task of ApiResponse (EntityShortRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityShortRepresentation>> CreateOrUpdateNetworkZoneAsyncWithHttpInfo (NetworkZone body, string id);
        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNetworkZoneAsync (string id);

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkZoneAsyncWithHttpInfo (string id);
        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NetworkZoneList</returns>
        System.Threading.Tasks.Task<NetworkZoneList> GetAllNetworkZonesAsync ();

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NetworkZoneList)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZoneList>> GetAllNetworkZonesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NetworkZoneSettings</returns>
        System.Threading.Tasks.Task<NetworkZoneSettings> GetNetworkZoneSettingsAsync ();

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NetworkZoneSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZoneSettings>> GetNetworkZoneSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> GetSingleNetworkZoneAsync (string id);

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> GetSingleNetworkZoneAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNetworkZoneSettingsAsync (NetworkZoneSettings body);

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNetworkZoneSettingsAsyncWithHttpInfo (NetworkZoneSettings body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class NetworkZonesApi : INetworkZonesApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZonesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkZonesApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZonesApi"/> class
        /// </summary>
        /// <returns></returns>
        public NetworkZonesApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZonesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkZonesApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>EntityShortRepresentation</returns>
        public EntityShortRepresentation CreateOrUpdateNetworkZone (NetworkZone body, string id)
        {
             ApiResponse<EntityShortRepresentation> localVarResponse = CreateOrUpdateNetworkZoneWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>ApiResponse of EntityShortRepresentation</returns>
        public ApiResponse< EntityShortRepresentation > CreateOrUpdateNetworkZoneWithHttpInfo (NetworkZone body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZonesApi->CreateOrUpdateNetworkZone");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->CreateOrUpdateNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityShortRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityShortRepresentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityShortRepresentation)));
        }

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>Task of EntityShortRepresentation</returns>
        public async System.Threading.Tasks.Task<EntityShortRepresentation> CreateOrUpdateNetworkZoneAsync (NetworkZone body, string id)
        {
             ApiResponse<EntityShortRepresentation> localVarResponse = await CreateOrUpdateNetworkZoneAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing network zone or creates a new one | maturity&#x3D;EARLY_ADOPTER If the network zone with the specified ID does not exist, a new network zone is created.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the network zone.</param>
        /// <param name="id">The ID of the network zone to be updated.  If you set the ID in the body as well, it must match this ID.  The ID is not case sensitive. Dynatrace stores the ID in lowercase.</param>
        /// <returns>Task of ApiResponse (EntityShortRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityShortRepresentation>> CreateOrUpdateNetworkZoneAsyncWithHttpInfo (NetworkZone body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZonesApi->CreateOrUpdateNetworkZone");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->CreateOrUpdateNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityShortRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityShortRepresentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityShortRepresentation)));
        }

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns></returns>
        public void DeleteNetworkZone (string id)
        {
             DeleteNetworkZoneWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNetworkZoneWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->DeleteNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNetworkZoneAsync (string id)
        {
             await DeleteNetworkZoneAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the specified network zone | maturity&#x3D;EARLY_ADOPTER You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).  If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the network zone to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkZoneAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->DeleteNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NetworkZoneList</returns>
        public NetworkZoneList GetAllNetworkZones ()
        {
             ApiResponse<NetworkZoneList> localVarResponse = GetAllNetworkZonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NetworkZoneList</returns>
        public ApiResponse< NetworkZoneList > GetAllNetworkZonesWithHttpInfo ()
        {

            var localVarPath = "/networkZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNetworkZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZoneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZoneList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZoneList)));
        }

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NetworkZoneList</returns>
        public async System.Threading.Tasks.Task<NetworkZoneList> GetAllNetworkZonesAsync ()
        {
             ApiResponse<NetworkZoneList> localVarResponse = await GetAllNetworkZonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all existing network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NetworkZoneList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZoneList>> GetAllNetworkZonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/networkZones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNetworkZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZoneList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZoneList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZoneList)));
        }

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NetworkZoneSettings</returns>
        public NetworkZoneSettings GetNetworkZoneSettings ()
        {
             ApiResponse<NetworkZoneSettings> localVarResponse = GetNetworkZoneSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NetworkZoneSettings</returns>
        public ApiResponse< NetworkZoneSettings > GetNetworkZoneSettingsWithHttpInfo ()
        {

            var localVarPath = "/networkZoneSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworkZoneSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZoneSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZoneSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZoneSettings)));
        }

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NetworkZoneSettings</returns>
        public async System.Threading.Tasks.Task<NetworkZoneSettings> GetNetworkZoneSettingsAsync ()
        {
             ApiResponse<NetworkZoneSettings> localVarResponse = await GetNetworkZoneSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NetworkZoneSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZoneSettings>> GetNetworkZoneSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/networkZoneSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworkZoneSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZoneSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZoneSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZoneSettings)));
        }

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>NetworkZone</returns>
        public NetworkZone GetSingleNetworkZone (string id)
        {
             ApiResponse<NetworkZone> localVarResponse = GetSingleNetworkZoneWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > GetSingleNetworkZoneWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->GetSingleNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> GetSingleNetworkZoneAsync (string id)
        {
             ApiResponse<NetworkZone> localVarResponse = await GetSingleNetworkZoneAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets parameters of the specified network zone | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the required network zone.</param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> GetSingleNetworkZoneAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NetworkZonesApi->GetSingleNetworkZone");

            var localVarPath = "/networkZones/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns></returns>
        public void UpdateNetworkZoneSettings (NetworkZoneSettings body)
        {
             UpdateNetworkZoneSettingsWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateNetworkZoneSettingsWithHttpInfo (NetworkZoneSettings body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZonesApi->UpdateNetworkZoneSettings");

            var localVarPath = "/networkZoneSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetworkZoneSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNetworkZoneSettingsAsync (NetworkZoneSettings body)
        {
             await UpdateNetworkZoneSettingsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the global configuration of network zones | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains global configuration of network zones.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNetworkZoneSettingsAsyncWithHttpInfo (NetworkZoneSettings body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZonesApi->UpdateNetworkZoneSettings");

            var localVarPath = "/networkZoneSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetworkZoneSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
