/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISyntheticLocationsAndNodesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>SyntheticLocationIdsDto</returns>
        SyntheticLocationIdsDto AddLocation (PrivateSyntheticLocation body = null);

        /// <summary>
        /// Creates a new private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>ApiResponse of SyntheticLocationIdsDto</returns>
        ApiResponse<SyntheticLocationIdsDto> AddLocationWithHttpInfo (PrivateSyntheticLocation body = null);
        /// <summary>
        /// Gets properties of the specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>SyntheticLocation</returns>
        SyntheticLocation GetLocation (string locationId);

        /// <summary>
        /// Gets properties of the specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>ApiResponse of SyntheticLocation</returns>
        ApiResponse<SyntheticLocation> GetLocationWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>SyntheticLocations</returns>
        SyntheticLocations GetLocations (string cloudPlatform = null, string type = null);

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>ApiResponse of SyntheticLocations</returns>
        ApiResponse<SyntheticLocations> GetLocationsWithHttpInfo (string cloudPlatform = null, string type = null);
        /// <summary>
        /// Checks the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SyntheticPublicLocationsStatus</returns>
        SyntheticPublicLocationsStatus GetLocationsStatus ();

        /// <summary>
        /// Checks the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SyntheticPublicLocationsStatus</returns>
        ApiResponse<SyntheticPublicLocationsStatus> GetLocationsStatusWithHttpInfo ();
        /// <summary>
        /// Lists properties of the specified synthetic node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Node</returns>
        Node GetNode (string nodeId);

        /// <summary>
        /// Lists properties of the specified synthetic node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>ApiResponse of Node</returns>
        ApiResponse<Node> GetNodeWithHttpInfo (string nodeId);
        /// <summary>
        /// Lists all synthetic nodes available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Nodes</returns>
        Nodes GetNodes ();

        /// <summary>
        /// Lists all synthetic nodes available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Nodes</returns>
        ApiResponse<Nodes> GetNodesWithHttpInfo ();
        /// <summary>
        /// Deletes the specified private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns></returns>
        void RemoveLocation (string locationId);

        /// <summary>
        /// Deletes the specified private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveLocationWithHttpInfo (string locationId);
        /// <summary>
        /// Updates the specified synthetic location
        /// </summary>
        /// <remarks>
        /// For public locations you can only change the location status.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns></returns>
        void UpdateLocation (string locationId, SyntheticLocationUpdate body = null);

        /// <summary>
        /// Updates the specified synthetic location
        /// </summary>
        /// <remarks>
        /// For public locations you can only change the location status.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLocationWithHttpInfo (string locationId, SyntheticLocationUpdate body = null);
        /// <summary>
        /// Changes the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns></returns>
        void UpdateLocationsStatus (SyntheticPublicLocationsStatus body = null);

        /// <summary>
        /// Changes the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLocationsStatusWithHttpInfo (SyntheticPublicLocationsStatus body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>Task of SyntheticLocationIdsDto</returns>
        System.Threading.Tasks.Task<SyntheticLocationIdsDto> AddLocationAsync (PrivateSyntheticLocation body = null);

        /// <summary>
        /// Creates a new private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>Task of ApiResponse (SyntheticLocationIdsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyntheticLocationIdsDto>> AddLocationAsyncWithHttpInfo (PrivateSyntheticLocation body = null);
        /// <summary>
        /// Gets properties of the specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>Task of SyntheticLocation</returns>
        System.Threading.Tasks.Task<SyntheticLocation> GetLocationAsync (string locationId);

        /// <summary>
        /// Gets properties of the specified location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>Task of ApiResponse (SyntheticLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyntheticLocation>> GetLocationAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>Task of SyntheticLocations</returns>
        System.Threading.Tasks.Task<SyntheticLocations> GetLocationsAsync (string cloudPlatform = null, string type = null);

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>Task of ApiResponse (SyntheticLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyntheticLocations>> GetLocationsAsyncWithHttpInfo (string cloudPlatform = null, string type = null);
        /// <summary>
        /// Checks the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SyntheticPublicLocationsStatus</returns>
        System.Threading.Tasks.Task<SyntheticPublicLocationsStatus> GetLocationsStatusAsync ();

        /// <summary>
        /// Checks the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SyntheticPublicLocationsStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyntheticPublicLocationsStatus>> GetLocationsStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Lists properties of the specified synthetic node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Task of Node</returns>
        System.Threading.Tasks.Task<Node> GetNodeAsync (string nodeId);

        /// <summary>
        /// Lists properties of the specified synthetic node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        System.Threading.Tasks.Task<ApiResponse<Node>> GetNodeAsyncWithHttpInfo (string nodeId);
        /// <summary>
        /// Lists all synthetic nodes available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Nodes</returns>
        System.Threading.Tasks.Task<Nodes> GetNodesAsync ();

        /// <summary>
        /// Lists all synthetic nodes available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Nodes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nodes>> GetNodesAsyncWithHttpInfo ();
        /// <summary>
        /// Deletes the specified private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveLocationAsync (string locationId);

        /// <summary>
        /// Deletes the specified private synthetic location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLocationAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Updates the specified synthetic location
        /// </summary>
        /// <remarks>
        /// For public locations you can only change the location status.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLocationAsync (string locationId, SyntheticLocationUpdate body = null);

        /// <summary>
        /// Updates the specified synthetic location
        /// </summary>
        /// <remarks>
        /// For public locations you can only change the location status.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationAsyncWithHttpInfo (string locationId, SyntheticLocationUpdate body = null);
        /// <summary>
        /// Changes the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLocationsStatusAsync (SyntheticPublicLocationsStatus body = null);

        /// <summary>
        /// Changes the status of public synthetic locations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationsStatusAsyncWithHttpInfo (SyntheticPublicLocationsStatus body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SyntheticLocationsAndNodesApi : ISyntheticLocationsAndNodesApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticLocationsAndNodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SyntheticLocationsAndNodesApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticLocationsAndNodesApi"/> class
        /// </summary>
        /// <returns></returns>
        public SyntheticLocationsAndNodesApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticLocationsAndNodesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SyntheticLocationsAndNodesApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>SyntheticLocationIdsDto</returns>
        public SyntheticLocationIdsDto AddLocation (PrivateSyntheticLocation body = null)
        {
             ApiResponse<SyntheticLocationIdsDto> localVarResponse = AddLocationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>ApiResponse of SyntheticLocationIdsDto</returns>
        public ApiResponse< SyntheticLocationIdsDto > AddLocationWithHttpInfo (PrivateSyntheticLocation body = null)
        {

            var localVarPath = "/synthetic/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocationIdsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocationIdsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocationIdsDto)));
        }

        /// <summary>
        /// Creates a new private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>Task of SyntheticLocationIdsDto</returns>
        public async System.Threading.Tasks.Task<SyntheticLocationIdsDto> AddLocationAsync (PrivateSyntheticLocation body = null)
        {
             ApiResponse<SyntheticLocationIdsDto> localVarResponse = await AddLocationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains parameters of the new private synthetic location. (optional)</param>
        /// <returns>Task of ApiResponse (SyntheticLocationIdsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyntheticLocationIdsDto>> AddLocationAsyncWithHttpInfo (PrivateSyntheticLocation body = null)
        {

            var localVarPath = "/synthetic/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocationIdsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocationIdsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocationIdsDto)));
        }

        /// <summary>
        /// Gets properties of the specified location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>SyntheticLocation</returns>
        public SyntheticLocation GetLocation (string locationId)
        {
             ApiResponse<SyntheticLocation> localVarResponse = GetLocationWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets properties of the specified location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>ApiResponse of SyntheticLocation</returns>
        public ApiResponse< SyntheticLocation > GetLocationWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->GetLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocation)));
        }

        /// <summary>
        /// Gets properties of the specified location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>Task of SyntheticLocation</returns>
        public async System.Threading.Tasks.Task<SyntheticLocation> GetLocationAsync (string locationId)
        {
             ApiResponse<SyntheticLocation> localVarResponse = await GetLocationAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets properties of the specified location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the required location.</param>
        /// <returns>Task of ApiResponse (SyntheticLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyntheticLocation>> GetLocationAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->GetLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocation)));
        }

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>SyntheticLocations</returns>
        public SyntheticLocations GetLocations (string cloudPlatform = null, string type = null)
        {
             ApiResponse<SyntheticLocations> localVarResponse = GetLocationsWithHttpInfo(cloudPlatform, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>ApiResponse of SyntheticLocations</returns>
        public ApiResponse< SyntheticLocations > GetLocationsWithHttpInfo (string cloudPlatform = null, string type = null)
        {

            var localVarPath = "/synthetic/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloudPlatform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cloudPlatform", cloudPlatform)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocations)));
        }

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>Task of SyntheticLocations</returns>
        public async System.Threading.Tasks.Task<SyntheticLocations> GetLocationsAsync (string cloudPlatform = null, string type = null)
        {
             ApiResponse<SyntheticLocations> localVarResponse = await GetLocationsAsyncWithHttpInfo(cloudPlatform, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all synthetic locations (both public and private) available for your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudPlatform">Filters the resulting set of locations to those which are hosted on a specific cloud platform. (optional)</param>
        /// <param name="type">Filters the resulting set of locations to those of a specific type. (optional)</param>
        /// <returns>Task of ApiResponse (SyntheticLocations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyntheticLocations>> GetLocationsAsyncWithHttpInfo (string cloudPlatform = null, string type = null)
        {

            var localVarPath = "/synthetic/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cloudPlatform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cloudPlatform", cloudPlatform)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticLocations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticLocations)));
        }

        /// <summary>
        /// Checks the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SyntheticPublicLocationsStatus</returns>
        public SyntheticPublicLocationsStatus GetLocationsStatus ()
        {
             ApiResponse<SyntheticPublicLocationsStatus> localVarResponse = GetLocationsStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checks the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SyntheticPublicLocationsStatus</returns>
        public ApiResponse< SyntheticPublicLocationsStatus > GetLocationsStatusWithHttpInfo ()
        {

            var localVarPath = "/synthetic/locations/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticPublicLocationsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticPublicLocationsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticPublicLocationsStatus)));
        }

        /// <summary>
        /// Checks the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SyntheticPublicLocationsStatus</returns>
        public async System.Threading.Tasks.Task<SyntheticPublicLocationsStatus> GetLocationsStatusAsync ()
        {
             ApiResponse<SyntheticPublicLocationsStatus> localVarResponse = await GetLocationsStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checks the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SyntheticPublicLocationsStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SyntheticPublicLocationsStatus>> GetLocationsStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/synthetic/locations/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SyntheticPublicLocationsStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SyntheticPublicLocationsStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SyntheticPublicLocationsStatus)));
        }

        /// <summary>
        /// Lists properties of the specified synthetic node 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Node</returns>
        public Node GetNode (string nodeId)
        {
             ApiResponse<Node> localVarResponse = GetNodeWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists properties of the specified synthetic node 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>ApiResponse of Node</returns>
        public ApiResponse< Node > GetNodeWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SyntheticLocationsAndNodesApi->GetNode");

            var localVarPath = "/synthetic/nodes/{nodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Lists properties of the specified synthetic node 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Task of Node</returns>
        public async System.Threading.Tasks.Task<Node> GetNodeAsync (string nodeId)
        {
             ApiResponse<Node> localVarResponse = await GetNodeAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists properties of the specified synthetic node 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">The ID of the required synthetic node.</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Node>> GetNodeAsyncWithHttpInfo (string nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling SyntheticLocationsAndNodesApi->GetNode");

            var localVarPath = "/synthetic/nodes/{nodeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("nodeId", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Lists all synthetic nodes available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Nodes</returns>
        public Nodes GetNodes ()
        {
             ApiResponse<Nodes> localVarResponse = GetNodesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all synthetic nodes available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Nodes</returns>
        public ApiResponse< Nodes > GetNodesWithHttpInfo ()
        {

            var localVarPath = "/synthetic/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Nodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nodes)));
        }

        /// <summary>
        /// Lists all synthetic nodes available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Nodes</returns>
        public async System.Threading.Tasks.Task<Nodes> GetNodesAsync ()
        {
             ApiResponse<Nodes> localVarResponse = await GetNodesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all synthetic nodes available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Nodes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Nodes>> GetNodesAsyncWithHttpInfo ()
        {

            var localVarPath = "/synthetic/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Nodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nodes)));
        }

        /// <summary>
        /// Deletes the specified private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns></returns>
        public void RemoveLocation (string locationId)
        {
             RemoveLocationWithHttpInfo(locationId);
        }

        /// <summary>
        /// Deletes the specified private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveLocationWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->RemoveLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveLocationAsync (string locationId)
        {
             await RemoveLocationAsyncWithHttpInfo(locationId);

        }

        /// <summary>
        /// Deletes the specified private synthetic location 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the private synthetic location to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLocationAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->RemoveLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the specified synthetic location For public locations you can only change the location status.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns></returns>
        public void UpdateLocation (string locationId, SyntheticLocationUpdate body = null)
        {
             UpdateLocationWithHttpInfo(locationId, body);
        }

        /// <summary>
        /// Updates the specified synthetic location For public locations you can only change the location status.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLocationWithHttpInfo (string locationId, SyntheticLocationUpdate body = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->UpdateLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the specified synthetic location For public locations you can only change the location status.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLocationAsync (string locationId, SyntheticLocationUpdate body = null)
        {
             await UpdateLocationAsyncWithHttpInfo(locationId, body);

        }

        /// <summary>
        /// Updates the specified synthetic location For public locations you can only change the location status.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The Dynatrace entity ID of the synthetic location to be updated.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the location. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationAsyncWithHttpInfo (string locationId, SyntheticLocationUpdate body = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling SyntheticLocationsAndNodesApi->UpdateLocation");

            var localVarPath = "/synthetic/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Changes the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns></returns>
        public void UpdateLocationsStatus (SyntheticPublicLocationsStatus body = null)
        {
             UpdateLocationsStatusWithHttpInfo(body);
        }

        /// <summary>
        /// Changes the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLocationsStatusWithHttpInfo (SyntheticPublicLocationsStatus body = null)
        {

            var localVarPath = "/synthetic/locations/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Changes the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLocationsStatusAsync (SyntheticPublicLocationsStatus body = null)
        {
             await UpdateLocationsStatusAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Changes the status of public synthetic locations 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The new status of public synthetic locations. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationsStatusAsyncWithHttpInfo (SyntheticPublicLocationsStatus body = null)
        {

            var localVarPath = "/synthetic/locations/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
