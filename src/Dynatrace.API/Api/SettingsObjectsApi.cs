/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISettingsObjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns></returns>
        void DeleteSettingsObjectByObjectId (string objectId, string updateToken = null);

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSettingsObjectByObjectIdWithHttpInfo (string objectId, string updateToken = null);
        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>SettingsObject</returns>
        SettingsObject GetSettingsObjectByObjectId (string objectId);

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>ApiResponse of SettingsObject</returns>
        ApiResponse<SettingsObject> GetSettingsObjectByObjectIdWithHttpInfo (string objectId);
        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>ObjectsList</returns>
        ObjectsList GetSettingsObjects (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null);

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>ApiResponse of ObjectsList</returns>
        ApiResponse<ObjectsList> GetSettingsObjectsWithHttpInfo (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null);
        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>List&lt;SettingsObjectResponse&gt;</returns>
        List<SettingsObjectResponse> PostSettingsObjects (List<SettingsObjectCreate> body = null, bool? validateOnly = null);

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;SettingsObjectResponse&gt;</returns>
        ApiResponse<List<SettingsObjectResponse>> PostSettingsObjectsWithHttpInfo (List<SettingsObjectCreate> body = null, bool? validateOnly = null);
        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>SettingsObjectResponse</returns>
        SettingsObjectResponse PutSettingsObjectByObjectId (string objectId, SettingsObjectUpdate body = null);

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>ApiResponse of SettingsObjectResponse</returns>
        ApiResponse<SettingsObjectResponse> PutSettingsObjectByObjectIdWithHttpInfo (string objectId, SettingsObjectUpdate body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSettingsObjectByObjectIdAsync (string objectId, string updateToken = null);

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId, string updateToken = null);
        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>Task of SettingsObject</returns>
        System.Threading.Tasks.Task<SettingsObject> GetSettingsObjectByObjectIdAsync (string objectId);

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>Task of ApiResponse (SettingsObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsObject>> GetSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId);
        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>Task of ObjectsList</returns>
        System.Threading.Tasks.Task<ObjectsList> GetSettingsObjectsAsync (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null);

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>Task of ApiResponse (ObjectsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsList>> GetSettingsObjectsAsyncWithHttpInfo (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null);
        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>Task of List&lt;SettingsObjectResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SettingsObjectResponse>> PostSettingsObjectsAsync (List<SettingsObjectCreate> body = null, bool? validateOnly = null);

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;SettingsObjectResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SettingsObjectResponse>>> PostSettingsObjectsAsyncWithHttpInfo (List<SettingsObjectCreate> body = null, bool? validateOnly = null);
        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>Task of SettingsObjectResponse</returns>
        System.Threading.Tasks.Task<SettingsObjectResponse> PutSettingsObjectByObjectIdAsync (string objectId, SettingsObjectUpdate body = null);

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsObjectResponse>> PutSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId, SettingsObjectUpdate body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SettingsObjectsApi : ISettingsObjectsApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsObjectsApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsObjectsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SettingsObjectsApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsObjectsApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns></returns>
        public void DeleteSettingsObjectByObjectId (string objectId, string updateToken = null)
        {
             DeleteSettingsObjectByObjectIdWithHttpInfo(objectId, updateToken);
        }

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSettingsObjectByObjectIdWithHttpInfo (string objectId, string updateToken = null)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->DeleteSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (updateToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateToken", updateToken)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSettingsObjectByObjectIdAsync (string objectId, string updateToken = null)
        {
             await DeleteSettingsObjectByObjectIdAsyncWithHttpInfo(objectId, updateToken);

        }

        /// <summary>
        /// Deletes the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="updateToken">The update token of the object. You can use it to detect simultaneous modifications by different users. It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#x27;t any change between the retrieval and the update. If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId, string updateToken = null)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->DeleteSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (updateToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateToken", updateToken)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>SettingsObject</returns>
        public SettingsObject GetSettingsObjectByObjectId (string objectId)
        {
             ApiResponse<SettingsObject> localVarResponse = GetSettingsObjectByObjectIdWithHttpInfo(objectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>ApiResponse of SettingsObject</returns>
        public ApiResponse< SettingsObject > GetSettingsObjectByObjectIdWithHttpInfo (string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->GetSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettingsObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsObject)));
        }

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>Task of SettingsObject</returns>
        public async System.Threading.Tasks.Task<SettingsObject> GetSettingsObjectByObjectIdAsync (string objectId)
        {
             ApiResponse<SettingsObject> localVarResponse = await GetSettingsObjectByObjectIdAsyncWithHttpInfo(objectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the specified settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <returns>Task of ApiResponse (SettingsObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsObject>> GetSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->GetSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettingsObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsObject)));
        }

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>ObjectsList</returns>
        public ObjectsList GetSettingsObjects (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null)
        {
             ApiResponse<ObjectsList> localVarResponse = GetSettingsObjectsWithHttpInfo(schemaIds, scopes, fields, nextPageKey, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>ApiResponse of ObjectsList</returns>
        public ApiResponse< ObjectsList > GetSettingsObjectsWithHttpInfo (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null)
        {

            var localVarPath = "/settings/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaIds", schemaIds)); // query parameter
            if (scopes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scopes", scopes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObjectsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectsList)));
        }

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>Task of ObjectsList</returns>
        public async System.Threading.Tasks.Task<ObjectsList> GetSettingsObjectsAsync (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null)
        {
             ApiResponse<ObjectsList> localVarResponse = await GetSettingsObjectsAsyncWithHttpInfo(schemaIds, scopes, fields, nextPageKey, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists available settings objects | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaIds">A list of comma-separated schema IDs to which the requested objects belong. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="scopes">A list of comma-separated scopes, that the requested objects target. The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment. To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)</param>
        /// <param name="fields">A list of fields to be included to the response. The provided set of fields replaces the default set.  Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response. The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter. When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of settings objects in a single response payload. The maximal allowed page size is 500. If not set, 100 is used. (optional)</param>
        /// <returns>Task of ApiResponse (ObjectsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObjectsList>> GetSettingsObjectsAsyncWithHttpInfo (string schemaIds = null, string scopes = null, string fields = null, string nextPageKey = null, long? pageSize = null)
        {

            var localVarPath = "/settings/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaIds", schemaIds)); // query parameter
            if (scopes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scopes", scopes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObjectsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectsList)));
        }

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>List&lt;SettingsObjectResponse&gt;</returns>
        public List<SettingsObjectResponse> PostSettingsObjects (List<SettingsObjectCreate> body = null, bool? validateOnly = null)
        {
             ApiResponse<List<SettingsObjectResponse>> localVarResponse = PostSettingsObjectsWithHttpInfo(body, validateOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;SettingsObjectResponse&gt;</returns>
        public ApiResponse< List<SettingsObjectResponse> > PostSettingsObjectsWithHttpInfo (List<SettingsObjectCreate> body = null, bool? validateOnly = null)
        {

            var localVarPath = "/settings/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSettingsObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SettingsObjectResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SettingsObjectResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SettingsObjectResponse>)));
        }

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>Task of List&lt;SettingsObjectResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SettingsObjectResponse>> PostSettingsObjectsAsync (List<SettingsObjectCreate> body = null, bool? validateOnly = null)
        {
             ApiResponse<List<SettingsObjectResponse>> localVarResponse = await PostSettingsObjectsAsyncWithHttpInfo(body, validateOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new settings object | maturity&#x3D;EARLY_ADOPTER You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The JSON body of the request. Contains the settings objects. (optional)</param>
        /// <param name="validateOnly">If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;SettingsObjectResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SettingsObjectResponse>>> PostSettingsObjectsAsyncWithHttpInfo (List<SettingsObjectCreate> body = null, bool? validateOnly = null)
        {

            var localVarPath = "/settings/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSettingsObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SettingsObjectResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SettingsObjectResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SettingsObjectResponse>)));
        }

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>SettingsObjectResponse</returns>
        public SettingsObjectResponse PutSettingsObjectByObjectId (string objectId, SettingsObjectUpdate body = null)
        {
             ApiResponse<SettingsObjectResponse> localVarResponse = PutSettingsObjectByObjectIdWithHttpInfo(objectId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>ApiResponse of SettingsObjectResponse</returns>
        public ApiResponse< SettingsObjectResponse > PutSettingsObjectByObjectIdWithHttpInfo (string objectId, SettingsObjectUpdate body = null)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->PutSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettingsObjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsObjectResponse)));
        }

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>Task of SettingsObjectResponse</returns>
        public async System.Threading.Tasks.Task<SettingsObjectResponse> PutSettingsObjectByObjectIdAsync (string objectId, SettingsObjectUpdate body = null)
        {
             ApiResponse<SettingsObjectResponse> localVarResponse = await PutSettingsObjectByObjectIdAsyncWithHttpInfo(objectId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing settings object | maturity&#x3D;EARLY_ADOPTER 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The ID of the required settings object.</param>
        /// <param name="body">The JSON body of the request. Contains updated parameters of the settings object. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsObjectResponse>> PutSettingsObjectByObjectIdAsyncWithHttpInfo (string objectId, SettingsObjectUpdate body = null)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling SettingsObjectsApi->PutSettingsObjectByObjectId");

            var localVarPath = "/settings/objects/{objectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectId != null) localVarPathParams.Add("objectId", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSettingsObjectByObjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettingsObjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsObjectResponse)));
        }

    }
}
