/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActiveGatesAutoUpdateConfigurationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ActiveGateAutoUpdateConfig</returns>
        ActiveGateAutoUpdateConfig GetAutoUpdateConfigById (string agId);

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of ActiveGateAutoUpdateConfig</returns>
        ApiResponse<ActiveGateAutoUpdateConfig> GetAutoUpdateConfigByIdWithHttpInfo (string agId);
        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ActiveGateGlobalAutoUpdateConfig</returns>
        ActiveGateGlobalAutoUpdateConfig GetGlobalAutoUpdateConfigForTenant ();

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ActiveGateGlobalAutoUpdateConfig</returns>
        ApiResponse<ActiveGateGlobalAutoUpdateConfig> GetGlobalAutoUpdateConfigForTenantWithHttpInfo ();
        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        void PutAutoUpdateConfigById (ActiveGateAutoUpdateConfig body, string agId);

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAutoUpdateConfigByIdWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId);
        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns></returns>
        void PutGlobalAutoUpdateConfigForTenant (ActiveGateGlobalAutoUpdateConfig body);

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutGlobalAutoUpdateConfigForTenantWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        void ValidateAutoUpdateConfigById (ActiveGateAutoUpdateConfig body, string agId);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateAutoUpdateConfigByIdWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns></returns>
        void ValidateGlobalAutoUpdateConfigForTenant (ActiveGateGlobalAutoUpdateConfig body);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateGlobalAutoUpdateConfigForTenantWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ActiveGateAutoUpdateConfig</returns>
        System.Threading.Tasks.Task<ActiveGateAutoUpdateConfig> GetAutoUpdateConfigByIdAsync (string agId);

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (ActiveGateAutoUpdateConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveGateAutoUpdateConfig>> GetAutoUpdateConfigByIdAsyncWithHttpInfo (string agId);
        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ActiveGateGlobalAutoUpdateConfig</returns>
        System.Threading.Tasks.Task<ActiveGateGlobalAutoUpdateConfig> GetGlobalAutoUpdateConfigForTenantAsync ();

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ActiveGateGlobalAutoUpdateConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveGateGlobalAutoUpdateConfig>> GetGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo ();
        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAutoUpdateConfigByIdAsync (ActiveGateAutoUpdateConfig body, string agId);

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAutoUpdateConfigByIdAsyncWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId);
        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutGlobalAutoUpdateConfigForTenantAsync (ActiveGateGlobalAutoUpdateConfig body);

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateAutoUpdateConfigByIdAsync (ActiveGateAutoUpdateConfig body, string agId);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateAutoUpdateConfigByIdAsyncWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId);
        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateGlobalAutoUpdateConfigForTenantAsync (ActiveGateGlobalAutoUpdateConfig body);

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActiveGatesAutoUpdateConfigurationApi : IActiveGatesAutoUpdateConfigurationApi
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActiveGatesAutoUpdateConfigurationApi(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateConfigurationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActiveGatesAutoUpdateConfigurationApi()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGatesAutoUpdateConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActiveGatesAutoUpdateConfigurationApi(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ActiveGateAutoUpdateConfig</returns>
        public ActiveGateAutoUpdateConfig GetAutoUpdateConfigById (string agId)
        {
             ApiResponse<ActiveGateAutoUpdateConfig> localVarResponse = GetAutoUpdateConfigByIdWithHttpInfo(agId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of ActiveGateAutoUpdateConfig</returns>
        public ApiResponse< ActiveGateAutoUpdateConfig > GetAutoUpdateConfigByIdWithHttpInfo (string agId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->GetAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateAutoUpdateConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateAutoUpdateConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateAutoUpdateConfig)));
        }

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ActiveGateAutoUpdateConfig</returns>
        public async System.Threading.Tasks.Task<ActiveGateAutoUpdateConfig> GetAutoUpdateConfigByIdAsync (string agId)
        {
             ApiResponse<ActiveGateAutoUpdateConfig> localVarResponse = await GetAutoUpdateConfigByIdAsyncWithHttpInfo(agId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse (ActiveGateAutoUpdateConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActiveGateAutoUpdateConfig>> GetAutoUpdateConfigByIdAsyncWithHttpInfo (string agId)
        {
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->GetAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateAutoUpdateConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateAutoUpdateConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateAutoUpdateConfig)));
        }

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ActiveGateGlobalAutoUpdateConfig</returns>
        public ActiveGateGlobalAutoUpdateConfig GetGlobalAutoUpdateConfigForTenant ()
        {
             ApiResponse<ActiveGateGlobalAutoUpdateConfig> localVarResponse = GetGlobalAutoUpdateConfigForTenantWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ActiveGateGlobalAutoUpdateConfig</returns>
        public ApiResponse< ActiveGateGlobalAutoUpdateConfig > GetGlobalAutoUpdateConfigForTenantWithHttpInfo ()
        {

            var localVarPath = "/activeGates/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateGlobalAutoUpdateConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateGlobalAutoUpdateConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateGlobalAutoUpdateConfig)));
        }

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ActiveGateGlobalAutoUpdateConfig</returns>
        public async System.Threading.Tasks.Task<ActiveGateGlobalAutoUpdateConfig> GetGlobalAutoUpdateConfigForTenantAsync ()
        {
             ApiResponse<ActiveGateGlobalAutoUpdateConfig> localVarResponse = await GetGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ActiveGateGlobalAutoUpdateConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActiveGateGlobalAutoUpdateConfig>> GetGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo ()
        {

            var localVarPath = "/activeGates/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActiveGateGlobalAutoUpdateConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActiveGateGlobalAutoUpdateConfig) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActiveGateGlobalAutoUpdateConfig)));
        }

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        public void PutAutoUpdateConfigById (ActiveGateAutoUpdateConfig body, string agId)
        {
             PutAutoUpdateConfigByIdWithHttpInfo(body, agId);
        }

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAutoUpdateConfigByIdWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->PutAutoUpdateConfigById");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->PutAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAutoUpdateConfigByIdAsync (ActiveGateAutoUpdateConfig body, string agId)
        {
             await PutAutoUpdateConfigByIdAsyncWithHttpInfo(body, agId);

        }

        /// <summary>
        /// Updates the configuration of auto-update for the specified ActiveGate 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAutoUpdateConfigByIdAsyncWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->PutAutoUpdateConfigById");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->PutAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns></returns>
        public void PutGlobalAutoUpdateConfigForTenant (ActiveGateGlobalAutoUpdateConfig body)
        {
             PutGlobalAutoUpdateConfigForTenantWithHttpInfo(body);
        }

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutGlobalAutoUpdateConfigForTenantWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->PutGlobalAutoUpdateConfigForTenant");

            var localVarPath = "/activeGates/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutGlobalAutoUpdateConfigForTenantAsync (ActiveGateGlobalAutoUpdateConfig body)
        {
             await PutGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Puts the global auto-update configuration of environment ActiveGates. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->PutGlobalAutoUpdateConfigForTenant");

            var localVarPath = "/activeGates/autoUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns></returns>
        public void ValidateAutoUpdateConfigById (ActiveGateAutoUpdateConfig body, string agId)
        {
             ValidateAutoUpdateConfigByIdWithHttpInfo(body, agId);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidateAutoUpdateConfigByIdWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateAutoUpdateConfigById");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateAutoUpdateConfigByIdAsync (ActiveGateAutoUpdateConfig body, string agId)
        {
             await ValidateAutoUpdateConfigByIdAsyncWithHttpInfo(body, agId);

        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing auto update parameters.</param>
        /// <param name="agId">The ID of the required ActiveGate.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateAutoUpdateConfigByIdAsyncWithHttpInfo (ActiveGateAutoUpdateConfig body, string agId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateAutoUpdateConfigById");
            // verify the required parameter 'agId' is set
            if (agId == null)
                throw new ApiException(400, "Missing required parameter 'agId' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateAutoUpdateConfigById");

            var localVarPath = "/activeGates/{agId}/autoUpdate/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agId != null) localVarPathParams.Add("agId", this.Configuration.ApiClient.ParameterToString(agId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAutoUpdateConfigById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns></returns>
        public void ValidateGlobalAutoUpdateConfigForTenant (ActiveGateGlobalAutoUpdateConfig body)
        {
             ValidateGlobalAutoUpdateConfigForTenantWithHttpInfo(body);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidateGlobalAutoUpdateConfigForTenantWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateGlobalAutoUpdateConfigForTenant");

            var localVarPath = "/activeGates/autoUpdate/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateGlobalAutoUpdateConfigForTenantAsync (ActiveGateGlobalAutoUpdateConfig body)
        {
             await ValidateGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request. 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing global auto update parameters.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateGlobalAutoUpdateConfigForTenantAsyncWithHttpInfo (ActiveGateGlobalAutoUpdateConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActiveGatesAutoUpdateConfigurationApi->ValidateGlobalAutoUpdateConfigForTenant");

            var localVarPath = "/activeGates/autoUpdate/validator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateGlobalAutoUpdateConfigForTenant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
