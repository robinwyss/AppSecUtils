/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dynatrace.API.Client;
using Dynatrace.API.Model;

namespace Dynatrace.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IExtensions20Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        ExtensionEnvironmentConfigurationVersion ActivateExtensionEnvironmentConfiguration (ExtensionEnvironmentConfigurationVersion body, string extensionName);

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        ApiResponse<ExtensionEnvironmentConfigurationVersion> ActivateExtensionEnvironmentConfigurationWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName);
        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>List&lt;MonitoringConfigurationResponse&gt;</returns>
        List<MonitoringConfigurationResponse> CreateMonitoringConfiguration (List<MonitoringConfigurationDto> body, string extensionName);

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of List&lt;MonitoringConfigurationResponse&gt;</returns>
        ApiResponse<List<MonitoringConfigurationResponse>> CreateMonitoringConfigurationWithHttpInfo (List<MonitoringConfigurationDto> body, string extensionName);
        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        ExtensionEnvironmentConfigurationVersion DeleteEnvironmentConfiguration (string extensionName);

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        ApiResponse<ExtensionEnvironmentConfigurationVersion> DeleteEnvironmentConfigurationWithHttpInfo (string extensionName);
        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>SchemaDefinition</returns>
        SchemaDefinition ExtensionConfigurationSchema (string extensionName, string extensionVersion);

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>ApiResponse of SchemaDefinition</returns>
        ApiResponse<SchemaDefinition> ExtensionConfigurationSchemaWithHttpInfo (string extensionName, string extensionVersion);
        /// <summary>
        /// Gets details of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Extension</returns>
        Extension ExtensionDetails (string extensionName, string extensionVersion, string accept = null);

        /// <summary>
        /// Gets details of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>ApiResponse of Extension</returns>
        ApiResponse<Extension> ExtensionDetailsWithHttpInfo (string extensionName, string extensionVersion, string accept = null);
        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>ExtensionMonitoringConfigurationsList</returns>
        ExtensionMonitoringConfigurationsList ExtensionMonitoringConfigurations (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null);

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>ApiResponse of ExtensionMonitoringConfigurationsList</returns>
        ApiResponse<ExtensionMonitoringConfigurationsList> ExtensionMonitoringConfigurationsWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null);
        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        ExtensionEnvironmentConfigurationVersion GetActiveEnvironmentConfiguration (string extensionName);

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        ApiResponse<ExtensionEnvironmentConfigurationVersion> GetActiveEnvironmentConfigurationWithHttpInfo (string extensionName);
        /// <summary>
        /// List of the latest extension environment configuration events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEventsList</returns>
        ExtensionEventsList GetEnvironmentConfigurationEvents (string extensionName);

        /// <summary>
        /// List of the latest extension environment configuration events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEventsList</returns>
        ApiResponse<ExtensionEventsList> GetEnvironmentConfigurationEventsWithHttpInfo (string extensionName);
        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ExtensionEventsList</returns>
        ExtensionEventsList GetExtensionMonitoringConfigurationEvents (string extensionName, string configurationId);

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of ExtensionEventsList</returns>
        ApiResponse<ExtensionEventsList> GetExtensionMonitoringConfigurationEventsWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>JsonNode</returns>
        JsonNode GetSchemaFile (string schemaVersion, string fileName);

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>ApiResponse of JsonNode</returns>
        ApiResponse<JsonNode> GetSchemaFileWithHttpInfo (string schemaVersion, string fileName);
        /// <summary>
        /// Lists all versions of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>ExtensionList</returns>
        ExtensionList ListExtensionVersions (string extensionName, string nextPageKey = null, long? pageSize = null);

        /// <summary>
        /// Lists all versions of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>ApiResponse of ExtensionList</returns>
        ApiResponse<ExtensionList> ListExtensionVersionsWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null);
        /// <summary>
        /// Lists all the extensions 2.0 available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>ExtensionList</returns>
        ExtensionList ListExtensions (string nextPageKey = null, long? pageSize = null, string name = null);

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>ApiResponse of ExtensionList</returns>
        ApiResponse<ExtensionList> ListExtensionsWithHttpInfo (string nextPageKey = null, long? pageSize = null, string name = null);
        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>SchemaFiles</returns>
        SchemaFiles ListSchemaFiles (string schemaVersion);

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>ApiResponse of SchemaFiles</returns>
        ApiResponse<SchemaFiles> ListSchemaFilesWithHttpInfo (string schemaVersion);
        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SchemasList</returns>
        SchemasList ListSchemas ();

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SchemasList</returns>
        ApiResponse<SchemasList> ListSchemasWithHttpInfo ();
        /// <summary>
        /// Gets the details of the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ExtensionMonitoringConfiguration</returns>
        ExtensionMonitoringConfiguration MonitoringConfigurationDetails (string extensionName, string configurationId);

        /// <summary>
        /// Gets the details of the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of ExtensionMonitoringConfiguration</returns>
        ApiResponse<ExtensionMonitoringConfiguration> MonitoringConfigurationDetailsWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Deletes the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Extension</returns>
        Extension RemoveExtension (string extensionName, string extensionVersion);

        /// <summary>
        /// Deletes the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>ApiResponse of Extension</returns>
        ApiResponse<Extension> RemoveExtensionWithHttpInfo (string extensionName, string extensionVersion);
        /// <summary>
        /// Deletes the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns></returns>
        void RemoveMonitoringConfiguration (string extensionName, string configurationId);

        /// <summary>
        /// Deletes the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMonitoringConfigurationWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        ExtensionEnvironmentConfigurationVersion UpdateExtensionEnvironmentConfiguration (ExtensionEnvironmentConfigurationVersion body, string extensionName);

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        ApiResponse<ExtensionEnvironmentConfigurationVersion> UpdateExtensionEnvironmentConfigurationWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName);
        /// <summary>
        /// Updates the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>MonitoringConfigurationResponse</returns>
        MonitoringConfigurationResponse UpdateMonitoringConfiguration (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId);

        /// <summary>
        /// Updates the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of MonitoringConfigurationResponse</returns>
        ApiResponse<MonitoringConfigurationResponse> UpdateMonitoringConfigurationWithHttpInfo (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId);
        /// <summary>
        /// Uploads or verifies a new extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Extension</returns>
        Extension UploadExtension (byte[] file = null, bool? validateOnly = null);

        /// <summary>
        /// Uploads or verifies a new extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>ApiResponse of Extension</returns>
        ApiResponse<Extension> UploadExtensionWithHttpInfo (byte[] file = null, bool? validateOnly = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> ActivateExtensionEnvironmentConfigurationAsync (ExtensionEnvironmentConfigurationVersion body, string extensionName);

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> ActivateExtensionEnvironmentConfigurationAsyncWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName);
        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of List&lt;MonitoringConfigurationResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MonitoringConfigurationResponse>> CreateMonitoringConfigurationAsync (List<MonitoringConfigurationDto> body, string extensionName);

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (List&lt;MonitoringConfigurationResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MonitoringConfigurationResponse>>> CreateMonitoringConfigurationAsyncWithHttpInfo (List<MonitoringConfigurationDto> body, string extensionName);
        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> DeleteEnvironmentConfigurationAsync (string extensionName);

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> DeleteEnvironmentConfigurationAsyncWithHttpInfo (string extensionName);
        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of SchemaDefinition</returns>
        System.Threading.Tasks.Task<SchemaDefinition> ExtensionConfigurationSchemaAsync (string extensionName, string extensionVersion);

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of ApiResponse (SchemaDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaDefinition>> ExtensionConfigurationSchemaAsyncWithHttpInfo (string extensionName, string extensionVersion);
        /// <summary>
        /// Gets details of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Task of Extension</returns>
        System.Threading.Tasks.Task<Extension> ExtensionDetailsAsync (string extensionName, string extensionVersion, string accept = null);

        /// <summary>
        /// Gets details of the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        System.Threading.Tasks.Task<ApiResponse<Extension>> ExtensionDetailsAsyncWithHttpInfo (string extensionName, string extensionVersion, string accept = null);
        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>Task of ExtensionMonitoringConfigurationsList</returns>
        System.Threading.Tasks.Task<ExtensionMonitoringConfigurationsList> ExtensionMonitoringConfigurationsAsync (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null);

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionMonitoringConfigurationsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionMonitoringConfigurationsList>> ExtensionMonitoringConfigurationsAsyncWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null);
        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> GetActiveEnvironmentConfigurationAsync (string extensionName);

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> GetActiveEnvironmentConfigurationAsyncWithHttpInfo (string extensionName);
        /// <summary>
        /// List of the latest extension environment configuration events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEventsList</returns>
        System.Threading.Tasks.Task<ExtensionEventsList> GetEnvironmentConfigurationEventsAsync (string extensionName);

        /// <summary>
        /// List of the latest extension environment configuration events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEventsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEventsList>> GetEnvironmentConfigurationEventsAsyncWithHttpInfo (string extensionName);
        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ExtensionEventsList</returns>
        System.Threading.Tasks.Task<ExtensionEventsList> GetExtensionMonitoringConfigurationEventsAsync (string extensionName, string configurationId);

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (ExtensionEventsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEventsList>> GetExtensionMonitoringConfigurationEventsAsyncWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>Task of JsonNode</returns>
        System.Threading.Tasks.Task<JsonNode> GetSchemaFileAsync (string schemaVersion, string fileName);

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>Task of ApiResponse (JsonNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonNode>> GetSchemaFileAsyncWithHttpInfo (string schemaVersion, string fileName);
        /// <summary>
        /// Lists all versions of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>Task of ExtensionList</returns>
        System.Threading.Tasks.Task<ExtensionList> ListExtensionVersionsAsync (string extensionName, string nextPageKey = null, long? pageSize = null);

        /// <summary>
        /// Lists all versions of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionList>> ListExtensionVersionsAsyncWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null);
        /// <summary>
        /// Lists all the extensions 2.0 available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>Task of ExtensionList</returns>
        System.Threading.Tasks.Task<ExtensionList> ListExtensionsAsync (string nextPageKey = null, long? pageSize = null, string name = null);

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionList>> ListExtensionsAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string name = null);
        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>Task of SchemaFiles</returns>
        System.Threading.Tasks.Task<SchemaFiles> ListSchemaFilesAsync (string schemaVersion);

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>Task of ApiResponse (SchemaFiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaFiles>> ListSchemaFilesAsyncWithHttpInfo (string schemaVersion);
        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SchemasList</returns>
        System.Threading.Tasks.Task<SchemasList> ListSchemasAsync ();

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SchemasList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemasList>> ListSchemasAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the details of the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ExtensionMonitoringConfiguration</returns>
        System.Threading.Tasks.Task<ExtensionMonitoringConfiguration> MonitoringConfigurationDetailsAsync (string extensionName, string configurationId);

        /// <summary>
        /// Gets the details of the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (ExtensionMonitoringConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionMonitoringConfiguration>> MonitoringConfigurationDetailsAsyncWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Deletes the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of Extension</returns>
        System.Threading.Tasks.Task<Extension> RemoveExtensionAsync (string extensionName, string extensionVersion);

        /// <summary>
        /// Deletes the specified version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        System.Threading.Tasks.Task<ApiResponse<Extension>> RemoveExtensionAsyncWithHttpInfo (string extensionName, string extensionVersion);
        /// <summary>
        /// Deletes the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMonitoringConfigurationAsync (string extensionName, string configurationId);

        /// <summary>
        /// Deletes the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMonitoringConfigurationAsyncWithHttpInfo (string extensionName, string configurationId);
        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> UpdateExtensionEnvironmentConfigurationAsync (ExtensionEnvironmentConfigurationVersion body, string extensionName);

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> UpdateExtensionEnvironmentConfigurationAsyncWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName);
        /// <summary>
        /// Updates the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of MonitoringConfigurationResponse</returns>
        System.Threading.Tasks.Task<MonitoringConfigurationResponse> UpdateMonitoringConfigurationAsync (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId);

        /// <summary>
        /// Updates the specified monitoring configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (MonitoringConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonitoringConfigurationResponse>> UpdateMonitoringConfigurationAsyncWithHttpInfo (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId);
        /// <summary>
        /// Uploads or verifies a new extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Task of Extension</returns>
        System.Threading.Tasks.Task<Extension> UploadExtensionAsync (byte[] file = null, bool? validateOnly = null);

        /// <summary>
        /// Uploads or verifies a new extension 2.0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        System.Threading.Tasks.Task<ApiResponse<Extension>> UploadExtensionAsyncWithHttpInfo (byte[] file = null, bool? validateOnly = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class Extensions20Api : IExtensions20Api
    {
        private Dynatrace.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Extensions20Api(String basePath)
        {
            this.Configuration = new Dynatrace.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions20Api"/> class
        /// </summary>
        /// <returns></returns>
        public Extensions20Api()
        {
            this.Configuration = Dynatrace.API.Client.Configuration.Default;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions20Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Extensions20Api(Dynatrace.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Dynatrace.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dynatrace.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dynatrace.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dynatrace.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        public ExtensionEnvironmentConfigurationVersion ActivateExtensionEnvironmentConfiguration (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = ActivateExtensionEnvironmentConfigurationWithHttpInfo(body, extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        public ApiResponse< ExtensionEnvironmentConfigurationVersion > ActivateExtensionEnvironmentConfigurationWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->ActivateExtensionEnvironmentConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ActivateExtensionEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateExtensionEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        public async System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> ActivateExtensionEnvironmentConfigurationAsync (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = await ActivateExtensionEnvironmentConfigurationAsyncWithHttpInfo(body, extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activates the environment configuration from the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> ActivateExtensionEnvironmentConfigurationAsyncWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->ActivateExtensionEnvironmentConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ActivateExtensionEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateExtensionEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>List&lt;MonitoringConfigurationResponse&gt;</returns>
        public List<MonitoringConfigurationResponse> CreateMonitoringConfiguration (List<MonitoringConfigurationDto> body, string extensionName)
        {
             ApiResponse<List<MonitoringConfigurationResponse>> localVarResponse = CreateMonitoringConfigurationWithHttpInfo(body, extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of List&lt;MonitoringConfigurationResponse&gt;</returns>
        public ApiResponse< List<MonitoringConfigurationResponse> > CreateMonitoringConfigurationWithHttpInfo (List<MonitoringConfigurationDto> body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->CreateMonitoringConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->CreateMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoringConfigurationResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoringConfigurationResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoringConfigurationResponse>)));
        }

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of List&lt;MonitoringConfigurationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MonitoringConfigurationResponse>> CreateMonitoringConfigurationAsync (List<MonitoringConfigurationDto> body, string extensionName)
        {
             ApiResponse<List<MonitoringConfigurationResponse>> localVarResponse = await CreateMonitoringConfigurationAsyncWithHttpInfo(body, extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new monitoring configuration for the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (List&lt;MonitoringConfigurationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MonitoringConfigurationResponse>>> CreateMonitoringConfigurationAsyncWithHttpInfo (List<MonitoringConfigurationDto> body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->CreateMonitoringConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->CreateMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoringConfigurationResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoringConfigurationResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoringConfigurationResponse>)));
        }

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        public ExtensionEnvironmentConfigurationVersion DeleteEnvironmentConfiguration (string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = DeleteEnvironmentConfigurationWithHttpInfo(extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        public ApiResponse< ExtensionEnvironmentConfigurationVersion > DeleteEnvironmentConfigurationWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->DeleteEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        public async System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> DeleteEnvironmentConfigurationAsync (string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = await DeleteEnvironmentConfigurationAsyncWithHttpInfo(extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivates the environment configuration of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> DeleteEnvironmentConfigurationAsyncWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->DeleteEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>SchemaDefinition</returns>
        public SchemaDefinition ExtensionConfigurationSchema (string extensionName, string extensionVersion)
        {
             ApiResponse<SchemaDefinition> localVarResponse = ExtensionConfigurationSchemaWithHttpInfo(extensionName, extensionVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>ApiResponse of SchemaDefinition</returns>
        public ApiResponse< SchemaDefinition > ExtensionConfigurationSchemaWithHttpInfo (string extensionName, string extensionVersion)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionConfigurationSchema");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->ExtensionConfigurationSchema");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionConfigurationSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemaDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaDefinition)));
        }

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of SchemaDefinition</returns>
        public async System.Threading.Tasks.Task<SchemaDefinition> ExtensionConfigurationSchemaAsync (string extensionName, string extensionVersion)
        {
             ApiResponse<SchemaDefinition> localVarResponse = await ExtensionConfigurationSchemaAsyncWithHttpInfo(extensionName, extensionVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the configuration schema of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of ApiResponse (SchemaDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaDefinition>> ExtensionConfigurationSchemaAsyncWithHttpInfo (string extensionName, string extensionVersion)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionConfigurationSchema");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->ExtensionConfigurationSchema");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionConfigurationSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemaDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaDefinition)));
        }

        /// <summary>
        /// Gets details of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Extension</returns>
        public Extension ExtensionDetails (string extensionName, string extensionVersion, string accept = null)
        {
             ApiResponse<Extension> localVarResponse = ExtensionDetailsWithHttpInfo(extensionName, extensionVersion, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>ApiResponse of Extension</returns>
        public ApiResponse< Extension > ExtensionDetailsWithHttpInfo (string extensionName, string extensionVersion, string accept = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionDetails");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->ExtensionDetails");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

        /// <summary>
        /// Gets details of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Task of Extension</returns>
        public async System.Threading.Tasks.Task<Extension> ExtensionDetailsAsync (string extensionName, string extensionVersion, string accept = null)
        {
             ApiResponse<Extension> localVarResponse = await ExtensionDetailsAsyncWithHttpInfo(extensionName, extensionVersion, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets details of the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <param name="accept">Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Extension>> ExtensionDetailsAsyncWithHttpInfo (string extensionName, string extensionVersion, string accept = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionDetails");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->ExtensionDetails");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>ExtensionMonitoringConfigurationsList</returns>
        public ExtensionMonitoringConfigurationsList ExtensionMonitoringConfigurations (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null)
        {
             ApiResponse<ExtensionMonitoringConfigurationsList> localVarResponse = ExtensionMonitoringConfigurationsWithHttpInfo(extensionName, nextPageKey, pageSize, version, active);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>ApiResponse of ExtensionMonitoringConfigurationsList</returns>
        public ApiResponse< ExtensionMonitoringConfigurationsList > ExtensionMonitoringConfigurationsWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionMonitoringConfigurations");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionMonitoringConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionMonitoringConfigurationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionMonitoringConfigurationsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionMonitoringConfigurationsList)));
        }

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>Task of ExtensionMonitoringConfigurationsList</returns>
        public async System.Threading.Tasks.Task<ExtensionMonitoringConfigurationsList> ExtensionMonitoringConfigurationsAsync (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null)
        {
             ApiResponse<ExtensionMonitoringConfigurationsList> localVarResponse = await ExtensionMonitoringConfigurationsAsyncWithHttpInfo(extensionName, nextPageKey, pageSize, version, active);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the monitoring configurations of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="version">Filters the resulting set of configurations by extension 2.0 version. (optional)</param>
        /// <param name="active">Filters the resulting set of configurations by the active state. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionMonitoringConfigurationsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionMonitoringConfigurationsList>> ExtensionMonitoringConfigurationsAsyncWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null, string version = null, bool? active = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ExtensionMonitoringConfigurations");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtensionMonitoringConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionMonitoringConfigurationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionMonitoringConfigurationsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionMonitoringConfigurationsList)));
        }

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        public ExtensionEnvironmentConfigurationVersion GetActiveEnvironmentConfiguration (string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = GetActiveEnvironmentConfigurationWithHttpInfo(extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        public ApiResponse< ExtensionEnvironmentConfigurationVersion > GetActiveEnvironmentConfigurationWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetActiveEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        public async System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> GetActiveEnvironmentConfigurationAsync (string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = await GetActiveEnvironmentConfigurationAsyncWithHttpInfo(extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the active environment configuration version of the specified extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> GetActiveEnvironmentConfigurationAsyncWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetActiveEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// List of the latest extension environment configuration events 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEventsList</returns>
        public ExtensionEventsList GetEnvironmentConfigurationEvents (string extensionName)
        {
             ApiResponse<ExtensionEventsList> localVarResponse = GetEnvironmentConfigurationEventsWithHttpInfo(extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of the latest extension environment configuration events 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEventsList</returns>
        public ApiResponse< ExtensionEventsList > GetEnvironmentConfigurationEventsWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetEnvironmentConfigurationEvents");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentConfigurationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEventsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEventsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEventsList)));
        }

        /// <summary>
        /// List of the latest extension environment configuration events 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEventsList</returns>
        public async System.Threading.Tasks.Task<ExtensionEventsList> GetEnvironmentConfigurationEventsAsync (string extensionName)
        {
             ApiResponse<ExtensionEventsList> localVarResponse = await GetEnvironmentConfigurationEventsAsyncWithHttpInfo(extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of the latest extension environment configuration events 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEventsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEventsList>> GetEnvironmentConfigurationEventsAsyncWithHttpInfo (string extensionName)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetEnvironmentConfigurationEvents");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentConfigurationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEventsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEventsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEventsList)));
        }

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ExtensionEventsList</returns>
        public ExtensionEventsList GetExtensionMonitoringConfigurationEvents (string extensionName, string configurationId)
        {
             ApiResponse<ExtensionEventsList> localVarResponse = GetExtensionMonitoringConfigurationEventsWithHttpInfo(extensionName, configurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of ExtensionEventsList</returns>
        public ApiResponse< ExtensionEventsList > GetExtensionMonitoringConfigurationEventsWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetExtensionMonitoringConfigurationEvents");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->GetExtensionMonitoringConfigurationEvents");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionMonitoringConfigurationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEventsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEventsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEventsList)));
        }

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ExtensionEventsList</returns>
        public async System.Threading.Tasks.Task<ExtensionEventsList> GetExtensionMonitoringConfigurationEventsAsync (string extensionName, string configurationId)
        {
             ApiResponse<ExtensionEventsList> localVarResponse = await GetExtensionMonitoringConfigurationEventsAsyncWithHttpInfo(extensionName, configurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of the events linked to specific monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (ExtensionEventsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEventsList>> GetExtensionMonitoringConfigurationEventsAsyncWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->GetExtensionMonitoringConfigurationEvents");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->GetExtensionMonitoringConfigurationEvents");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExtensionMonitoringConfigurationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEventsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEventsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEventsList)));
        }

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>JsonNode</returns>
        public JsonNode GetSchemaFile (string schemaVersion, string fileName)
        {
             ApiResponse<JsonNode> localVarResponse = GetSchemaFileWithHttpInfo(schemaVersion, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>ApiResponse of JsonNode</returns>
        public ApiResponse< JsonNode > GetSchemaFileWithHttpInfo (string schemaVersion, string fileName)
        {
            // verify the required parameter 'schemaVersion' is set
            if (schemaVersion == null)
                throw new ApiException(400, "Missing required parameter 'schemaVersion' when calling Extensions20Api->GetSchemaFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Extensions20Api->GetSchemaFile");

            var localVarPath = "/extensions/schemas/{schemaVersion}/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaVersion != null) localVarPathParams.Add("schemaVersion", this.Configuration.ApiClient.ParameterToString(schemaVersion)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonNode)));
        }

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>Task of JsonNode</returns>
        public async System.Threading.Tasks.Task<JsonNode> GetSchemaFileAsync (string schemaVersion, string fileName)
        {
             ApiResponse<JsonNode> localVarResponse = await GetSchemaFileAsyncWithHttpInfo(schemaVersion, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the extension 2.0 schema file in the specified version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <param name="fileName">The name of the schema file.</param>
        /// <returns>Task of ApiResponse (JsonNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonNode>> GetSchemaFileAsyncWithHttpInfo (string schemaVersion, string fileName)
        {
            // verify the required parameter 'schemaVersion' is set
            if (schemaVersion == null)
                throw new ApiException(400, "Missing required parameter 'schemaVersion' when calling Extensions20Api->GetSchemaFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling Extensions20Api->GetSchemaFile");

            var localVarPath = "/extensions/schemas/{schemaVersion}/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaVersion != null) localVarPathParams.Add("schemaVersion", this.Configuration.ApiClient.ParameterToString(schemaVersion)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonNode)));
        }

        /// <summary>
        /// Lists all versions of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>ExtensionList</returns>
        public ExtensionList ListExtensionVersions (string extensionName, string nextPageKey = null, long? pageSize = null)
        {
             ApiResponse<ExtensionList> localVarResponse = ListExtensionVersionsWithHttpInfo(extensionName, nextPageKey, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all versions of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>ApiResponse of ExtensionList</returns>
        public ApiResponse< ExtensionList > ListExtensionVersionsWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ListExtensionVersions");

            var localVarPath = "/extensions/{extensionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionList)));
        }

        /// <summary>
        /// Lists all versions of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>Task of ExtensionList</returns>
        public async System.Threading.Tasks.Task<ExtensionList> ListExtensionVersionsAsync (string extensionName, string nextPageKey = null, long? pageSize = null)
        {
             ApiResponse<ExtensionList> localVarResponse = await ListExtensionVersionsAsyncWithHttpInfo(extensionName, nextPageKey, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all versions of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionList>> ListExtensionVersionsAsyncWithHttpInfo (string extensionName, string nextPageKey = null, long? pageSize = null)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->ListExtensionVersions");

            var localVarPath = "/extensions/{extensionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensionVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionList)));
        }

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>ExtensionList</returns>
        public ExtensionList ListExtensions (string nextPageKey = null, long? pageSize = null, string name = null)
        {
             ApiResponse<ExtensionList> localVarResponse = ListExtensionsWithHttpInfo(nextPageKey, pageSize, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>ApiResponse of ExtensionList</returns>
        public ApiResponse< ExtensionList > ListExtensionsWithHttpInfo (string nextPageKey = null, long? pageSize = null, string name = null)
        {

            var localVarPath = "/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionList)));
        }

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>Task of ExtensionList</returns>
        public async System.Threading.Tasks.Task<ExtensionList> ListExtensionsAsync (string nextPageKey = null, long? pageSize = null, string name = null)
        {
             ApiResponse<ExtensionList> localVarResponse = await ListExtensionsAsyncWithHttpInfo(nextPageKey, pageSize, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the extensions 2.0 available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nextPageKey">The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#x27;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)</param>
        /// <param name="pageSize">The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)</param>
        /// <param name="name">Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionList>> ListExtensionsAsyncWithHttpInfo (string nextPageKey = null, long? pageSize = null, string name = null)
        {

            var localVarPath = "/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextPageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextPageKey", nextPageKey)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionList)));
        }

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>SchemaFiles</returns>
        public SchemaFiles ListSchemaFiles (string schemaVersion)
        {
             ApiResponse<SchemaFiles> localVarResponse = ListSchemaFilesWithHttpInfo(schemaVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>ApiResponse of SchemaFiles</returns>
        public ApiResponse< SchemaFiles > ListSchemaFilesWithHttpInfo (string schemaVersion)
        {
            // verify the required parameter 'schemaVersion' is set
            if (schemaVersion == null)
                throw new ApiException(400, "Missing required parameter 'schemaVersion' when calling Extensions20Api->ListSchemaFiles");

            var localVarPath = "/extensions/schemas/{schemaVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaVersion != null) localVarPathParams.Add("schemaVersion", this.Configuration.ApiClient.ParameterToString(schemaVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchemaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemaFiles) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaFiles)));
        }

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>Task of SchemaFiles</returns>
        public async System.Threading.Tasks.Task<SchemaFiles> ListSchemaFilesAsync (string schemaVersion)
        {
             ApiResponse<SchemaFiles> localVarResponse = await ListSchemaFilesAsyncWithHttpInfo(schemaVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the files available for the specified extension 2.0 schema version 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaVersion">The version of the schema.</param>
        /// <returns>Task of ApiResponse (SchemaFiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaFiles>> ListSchemaFilesAsyncWithHttpInfo (string schemaVersion)
        {
            // verify the required parameter 'schemaVersion' is set
            if (schemaVersion == null)
                throw new ApiException(400, "Missing required parameter 'schemaVersion' when calling Extensions20Api->ListSchemaFiles");

            var localVarPath = "/extensions/schemas/{schemaVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaVersion != null) localVarPathParams.Add("schemaVersion", this.Configuration.ApiClient.ParameterToString(schemaVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchemaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemaFiles) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaFiles)));
        }

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SchemasList</returns>
        public SchemasList ListSchemas ()
        {
             ApiResponse<SchemasList> localVarResponse = ListSchemasWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SchemasList</returns>
        public ApiResponse< SchemasList > ListSchemasWithHttpInfo ()
        {

            var localVarPath = "/extensions/schemas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemasList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemasList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemasList)));
        }

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SchemasList</returns>
        public async System.Threading.Tasks.Task<SchemasList> ListSchemasAsync ()
        {
             ApiResponse<SchemasList> localVarResponse = await ListSchemasAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the extension 2.0 schemas versions available in your environment 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SchemasList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemasList>> ListSchemasAsyncWithHttpInfo ()
        {

            var localVarPath = "/extensions/schemas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemasList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SchemasList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemasList)));
        }

        /// <summary>
        /// Gets the details of the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ExtensionMonitoringConfiguration</returns>
        public ExtensionMonitoringConfiguration MonitoringConfigurationDetails (string extensionName, string configurationId)
        {
             ApiResponse<ExtensionMonitoringConfiguration> localVarResponse = MonitoringConfigurationDetailsWithHttpInfo(extensionName, configurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of ExtensionMonitoringConfiguration</returns>
        public ApiResponse< ExtensionMonitoringConfiguration > MonitoringConfigurationDetailsWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->MonitoringConfigurationDetails");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->MonitoringConfigurationDetails");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoringConfigurationDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionMonitoringConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionMonitoringConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionMonitoringConfiguration)));
        }

        /// <summary>
        /// Gets the details of the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ExtensionMonitoringConfiguration</returns>
        public async System.Threading.Tasks.Task<ExtensionMonitoringConfiguration> MonitoringConfigurationDetailsAsync (string extensionName, string configurationId)
        {
             ApiResponse<ExtensionMonitoringConfiguration> localVarResponse = await MonitoringConfigurationDetailsAsyncWithHttpInfo(extensionName, configurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (ExtensionMonitoringConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionMonitoringConfiguration>> MonitoringConfigurationDetailsAsyncWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->MonitoringConfigurationDetails");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->MonitoringConfigurationDetails");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonitoringConfigurationDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionMonitoringConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionMonitoringConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionMonitoringConfiguration)));
        }

        /// <summary>
        /// Deletes the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Extension</returns>
        public Extension RemoveExtension (string extensionName, string extensionVersion)
        {
             ApiResponse<Extension> localVarResponse = RemoveExtensionWithHttpInfo(extensionName, extensionVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>ApiResponse of Extension</returns>
        public ApiResponse< Extension > RemoveExtensionWithHttpInfo (string extensionName, string extensionVersion)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->RemoveExtension");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->RemoveExtension");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

        /// <summary>
        /// Deletes the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of Extension</returns>
        public async System.Threading.Tasks.Task<Extension> RemoveExtensionAsync (string extensionName, string extensionVersion)
        {
             ApiResponse<Extension> localVarResponse = await RemoveExtensionAsyncWithHttpInfo(extensionName, extensionVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="extensionVersion">The version of the requested extension 2.0</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Extension>> RemoveExtensionAsyncWithHttpInfo (string extensionName, string extensionVersion)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->RemoveExtension");
            // verify the required parameter 'extensionVersion' is set
            if (extensionVersion == null)
                throw new ApiException(400, "Missing required parameter 'extensionVersion' when calling Extensions20Api->RemoveExtension");

            var localVarPath = "/extensions/{extensionName}/{extensionVersion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (extensionVersion != null) localVarPathParams.Add("extensionVersion", this.Configuration.ApiClient.ParameterToString(extensionVersion)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

        /// <summary>
        /// Deletes the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns></returns>
        public void RemoveMonitoringConfiguration (string extensionName, string configurationId)
        {
             RemoveMonitoringConfigurationWithHttpInfo(extensionName, configurationId);
        }

        /// <summary>
        /// Deletes the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveMonitoringConfigurationWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->RemoveMonitoringConfiguration");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->RemoveMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMonitoringConfigurationAsync (string extensionName, string configurationId)
        {
             await RemoveMonitoringConfigurationAsyncWithHttpInfo(extensionName, configurationId);

        }

        /// <summary>
        /// Deletes the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMonitoringConfigurationAsyncWithHttpInfo (string extensionName, string configurationId)
        {
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->RemoveMonitoringConfiguration");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->RemoveMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ExtensionEnvironmentConfigurationVersion</returns>
        public ExtensionEnvironmentConfigurationVersion UpdateExtensionEnvironmentConfiguration (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = UpdateExtensionEnvironmentConfigurationWithHttpInfo(body, extensionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>ApiResponse of ExtensionEnvironmentConfigurationVersion</returns>
        public ApiResponse< ExtensionEnvironmentConfigurationVersion > UpdateExtensionEnvironmentConfigurationWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->UpdateExtensionEnvironmentConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->UpdateExtensionEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ExtensionEnvironmentConfigurationVersion</returns>
        public async System.Threading.Tasks.Task<ExtensionEnvironmentConfigurationVersion> UpdateExtensionEnvironmentConfigurationAsync (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
             ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = await UpdateExtensionEnvironmentConfigurationAsyncWithHttpInfo(body, extensionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the active environment configuration version of the extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The version of the requested environment configuration.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <returns>Task of ApiResponse (ExtensionEnvironmentConfigurationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionEnvironmentConfigurationVersion>> UpdateExtensionEnvironmentConfigurationAsyncWithHttpInfo (ExtensionEnvironmentConfigurationVersion body, string extensionName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->UpdateExtensionEnvironmentConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->UpdateExtensionEnvironmentConfiguration");

            var localVarPath = "/extensions/{extensionName}/environmentConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtensionEnvironmentConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtensionEnvironmentConfigurationVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionEnvironmentConfigurationVersion)));
        }

        /// <summary>
        /// Updates the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>MonitoringConfigurationResponse</returns>
        public MonitoringConfigurationResponse UpdateMonitoringConfiguration (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId)
        {
             ApiResponse<MonitoringConfigurationResponse> localVarResponse = UpdateMonitoringConfigurationWithHttpInfo(body, extensionName, configurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>ApiResponse of MonitoringConfigurationResponse</returns>
        public ApiResponse< MonitoringConfigurationResponse > UpdateMonitoringConfigurationWithHttpInfo (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->UpdateMonitoringConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->UpdateMonitoringConfiguration");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->UpdateMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoringConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoringConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoringConfigurationResponse)));
        }

        /// <summary>
        /// Updates the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of MonitoringConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<MonitoringConfigurationResponse> UpdateMonitoringConfigurationAsync (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId)
        {
             ApiResponse<MonitoringConfigurationResponse> localVarResponse = await UpdateMonitoringConfigurationAsyncWithHttpInfo(body, extensionName, configurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified monitoring configuration 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON body of the request, containing monitoring configuration parameters.</param>
        /// <param name="extensionName">The name of the requested extension 2.0.</param>
        /// <param name="configurationId">The ID of the requested monitoring configuration.</param>
        /// <returns>Task of ApiResponse (MonitoringConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MonitoringConfigurationResponse>> UpdateMonitoringConfigurationAsyncWithHttpInfo (MonitoringConfigurationUpdateDto body, string extensionName, string configurationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions20Api->UpdateMonitoringConfiguration");
            // verify the required parameter 'extensionName' is set
            if (extensionName == null)
                throw new ApiException(400, "Missing required parameter 'extensionName' when calling Extensions20Api->UpdateMonitoringConfiguration");
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new ApiException(400, "Missing required parameter 'configurationId' when calling Extensions20Api->UpdateMonitoringConfiguration");

            var localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extensionName != null) localVarPathParams.Add("extensionName", this.Configuration.ApiClient.ParameterToString(extensionName)); // path parameter
            if (configurationId != null) localVarPathParams.Add("configurationId", this.Configuration.ApiClient.ParameterToString(configurationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MonitoringConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MonitoringConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MonitoringConfigurationResponse)));
        }

        /// <summary>
        /// Uploads or verifies a new extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Extension</returns>
        public Extension UploadExtension (byte[] file = null, bool? validateOnly = null)
        {
             ApiResponse<Extension> localVarResponse = UploadExtensionWithHttpInfo(file, validateOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads or verifies a new extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>ApiResponse of Extension</returns>
        public ApiResponse< Extension > UploadExtensionWithHttpInfo (byte[] file = null, bool? validateOnly = null)
        {

            var localVarPath = "/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

        /// <summary>
        /// Uploads or verifies a new extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Task of Extension</returns>
        public async System.Threading.Tasks.Task<Extension> UploadExtensionAsync (byte[] file = null, bool? validateOnly = null)
        {
             ApiResponse<Extension> localVarResponse = await UploadExtensionAsyncWithHttpInfo(file, validateOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads or verifies a new extension 2.0 
        /// </summary>
        /// <exception cref="Dynatrace.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="validateOnly">Only run validation but do not persist the extension even if validation was successful. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Extension)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Extension>> UploadExtensionAsyncWithHttpInfo (byte[] file = null, bool? validateOnly = null)
        {

            var localVarPath = "/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateOnly", validateOnly)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Extension>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Extension) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extension)));
        }

    }
}
