/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Data points per dimension of a metric. The data is represented by two arrays of the same length: **timestamps** and **values**. Entries of the same index from both arrays form a timestamped data point.
    /// </summary>
    [DataContract]
        public partial class MetricSeries :  IEquatable<MetricSeries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricSeries" /> class.
        /// </summary>
        /// <param name="dimensionMap">dimensionMap (required).</param>
        /// <param name="timestamps">A list of timestamps of data points. The value of data point for each time from this array is located in **values** array at the same index..</param>
        /// <param name="dimensions">The ordered list of dimensions to which the data point list belongs.  Each metric can have a certain number of dimensions. Dimensions exceeding this number are aggregated into one, which is shown as &#x60;null&#x60; here..</param>
        /// <param name="values">A list of values of data points. The timestamp of data point for each value from this array is located in **timestamps** array at the same index..</param>
        public MetricSeries(Dictionary<string, string> dimensionMap = default(Dictionary<string, string>), List<long?> timestamps = default(List<long?>), List<string> dimensions = default(List<string>), List<double?> values = default(List<double?>))
        {
            // to ensure "dimensionMap" is required (not null)
            if (dimensionMap == null)
            {
                throw new InvalidDataException("dimensionMap is a required property for MetricSeries and cannot be null");
            }
            else
            {
                this.DimensionMap = dimensionMap;
            }
            this.Timestamps = timestamps;
            this.Dimensions = dimensions;
            this.Values = values;
        }
        
        /// <summary>
        /// Gets or Sets DimensionMap
        /// </summary>
        [DataMember(Name="dimensionMap", EmitDefaultValue=false)]
        public Dictionary<string, string> DimensionMap { get; set; }

        /// <summary>
        /// A list of timestamps of data points. The value of data point for each time from this array is located in **values** array at the same index.
        /// </summary>
        /// <value>A list of timestamps of data points. The value of data point for each time from this array is located in **values** array at the same index.</value>
        [DataMember(Name="timestamps", EmitDefaultValue=false)]
        public List<long?> Timestamps { get; set; }

        /// <summary>
        /// The ordered list of dimensions to which the data point list belongs.  Each metric can have a certain number of dimensions. Dimensions exceeding this number are aggregated into one, which is shown as &#x60;null&#x60; here.
        /// </summary>
        /// <value>The ordered list of dimensions to which the data point list belongs.  Each metric can have a certain number of dimensions. Dimensions exceeding this number are aggregated into one, which is shown as &#x60;null&#x60; here.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<string> Dimensions { get; set; }

        /// <summary>
        /// A list of values of data points. The timestamp of data point for each value from this array is located in **timestamps** array at the same index.
        /// </summary>
        /// <value>A list of values of data points. The timestamp of data point for each value from this array is located in **timestamps** array at the same index.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<double?> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricSeries {\n");
            sb.Append("  DimensionMap: ").Append(DimensionMap).Append("\n");
            sb.Append("  Timestamps: ").Append(Timestamps).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricSeries);
        }

        /// <summary>
        /// Returns true if MetricSeries instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricSeries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricSeries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DimensionMap == input.DimensionMap ||
                    this.DimensionMap != null &&
                    input.DimensionMap != null &&
                    this.DimensionMap.SequenceEqual(input.DimensionMap)
                ) && 
                (
                    this.Timestamps == input.Timestamps ||
                    this.Timestamps != null &&
                    input.Timestamps != null &&
                    this.Timestamps.SequenceEqual(input.Timestamps)
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DimensionMap != null)
                    hashCode = hashCode * 59 + this.DimensionMap.GetHashCode();
                if (this.Timestamps != null)
                    hashCode = hashCode * 59 + this.Timestamps.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
