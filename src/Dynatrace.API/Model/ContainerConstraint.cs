/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Constraint used to define limitation on the accepted values for container
    /// </summary>
    [DataContract]
        public partial class ContainerConstraint :  IEquatable<ContainerConstraint>, IValidatableObject
    {
        /// <summary>
        /// Type of the container constraint.
        /// </summary>
        /// <value>Type of the container constraint.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CUSTOMVALIDATORREF for value: CUSTOM_VALIDATOR_REF
            /// </summary>
            [EnumMember(Value = "CUSTOM_VALIDATOR_REF")]
            CUSTOMVALIDATORREF = 1,
            /// <summary>
            /// Enum GREATERTHAN for value: GREATER_THAN
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHAN = 2,
            /// <summary>
            /// Enum GREATERTHANOREQUAL for value: GREATER_THAN_OR_EQUAL
            /// </summary>
            [EnumMember(Value = "GREATER_THAN_OR_EQUAL")]
            GREATERTHANOREQUAL = 3,
            /// <summary>
            /// Enum LESSTHAN for value: LESS_THAN
            /// </summary>
            [EnumMember(Value = "LESS_THAN")]
            LESSTHAN = 4,
            /// <summary>
            /// Enum LESSTHANOREQUAL for value: LESS_THAN_OR_EQUAL
            /// </summary>
            [EnumMember(Value = "LESS_THAN_OR_EQUAL")]
            LESSTHANOREQUAL = 5,
            /// <summary>
            /// Enum PROPERTYCOUNTRANGE for value: PROPERTY_COUNT_RANGE
            /// </summary>
            [EnumMember(Value = "PROPERTY_COUNT_RANGE")]
            PROPERTYCOUNTRANGE = 6,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 7        }
        /// <summary>
        /// Type of the container constraint.
        /// </summary>
        /// <value>Type of the container constraint.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerConstraint" /> class.
        /// </summary>
        /// <param name="customValidatorId">The identifier of a custom validator.</param>
        /// <param name="minimumPropertyCount">The minimum number of properties that have to be set.</param>
        /// <param name="maximumPropertyCount">The maximum number of properties that can be set.</param>
        /// <param name="customMessage">Custom message for invalid values.</param>
        /// <param name="properties">The list of identifiers of the properties used to check the constraint.</param>
        /// <param name="type">Type of the container constraint..</param>
        public ContainerConstraint(string customValidatorId = default(string), int? minimumPropertyCount = default(int?), int? maximumPropertyCount = default(int?), string customMessage = default(string), List<string> properties = default(List<string>), TypeEnum? type = default(TypeEnum?))
        {
            this.CustomValidatorId = customValidatorId;
            this.MinimumPropertyCount = minimumPropertyCount;
            this.MaximumPropertyCount = maximumPropertyCount;
            this.CustomMessage = customMessage;
            this.Properties = properties;
            this.Type = type;
        }
        
        /// <summary>
        /// The identifier of a custom validator
        /// </summary>
        /// <value>The identifier of a custom validator</value>
        [DataMember(Name="customValidatorId", EmitDefaultValue=false)]
        public string CustomValidatorId { get; set; }

        /// <summary>
        /// The minimum number of properties that have to be set
        /// </summary>
        /// <value>The minimum number of properties that have to be set</value>
        [DataMember(Name="minimumPropertyCount", EmitDefaultValue=false)]
        public int? MinimumPropertyCount { get; set; }

        /// <summary>
        /// The maximum number of properties that can be set
        /// </summary>
        /// <value>The maximum number of properties that can be set</value>
        [DataMember(Name="maximumPropertyCount", EmitDefaultValue=false)]
        public int? MaximumPropertyCount { get; set; }

        /// <summary>
        /// Custom message for invalid values
        /// </summary>
        /// <value>Custom message for invalid values</value>
        [DataMember(Name="customMessage", EmitDefaultValue=false)]
        public string CustomMessage { get; set; }

        /// <summary>
        /// The list of identifiers of the properties used to check the constraint
        /// </summary>
        /// <value>The list of identifiers of the properties used to check the constraint</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<string> Properties { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerConstraint {\n");
            sb.Append("  CustomValidatorId: ").Append(CustomValidatorId).Append("\n");
            sb.Append("  MinimumPropertyCount: ").Append(MinimumPropertyCount).Append("\n");
            sb.Append("  MaximumPropertyCount: ").Append(MaximumPropertyCount).Append("\n");
            sb.Append("  CustomMessage: ").Append(CustomMessage).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContainerConstraint);
        }

        /// <summary>
        /// Returns true if ContainerConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerConstraint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomValidatorId == input.CustomValidatorId ||
                    (this.CustomValidatorId != null &&
                    this.CustomValidatorId.Equals(input.CustomValidatorId))
                ) && 
                (
                    this.MinimumPropertyCount == input.MinimumPropertyCount ||
                    (this.MinimumPropertyCount != null &&
                    this.MinimumPropertyCount.Equals(input.MinimumPropertyCount))
                ) && 
                (
                    this.MaximumPropertyCount == input.MaximumPropertyCount ||
                    (this.MaximumPropertyCount != null &&
                    this.MaximumPropertyCount.Equals(input.MaximumPropertyCount))
                ) && 
                (
                    this.CustomMessage == input.CustomMessage ||
                    (this.CustomMessage != null &&
                    this.CustomMessage.Equals(input.CustomMessage))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomValidatorId != null)
                    hashCode = hashCode * 59 + this.CustomValidatorId.GetHashCode();
                if (this.MinimumPropertyCount != null)
                    hashCode = hashCode * 59 + this.MinimumPropertyCount.GetHashCode();
                if (this.MaximumPropertyCount != null)
                    hashCode = hashCode * 59 + this.MaximumPropertyCount.GetHashCode();
                if (this.CustomMessage != null)
                    hashCode = hashCode * 59 + this.CustomMessage.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
