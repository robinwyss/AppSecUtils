/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Contains data related to a single release of a component. A Release is a combination of a component and a version. A Component can be any form of deployable that can be associated with a version. In the first draft, a Component is always a Service.  The tuple &lt;name, product, stage, version&gt; is always unique.
    /// </summary>
    [DataContract]
        public partial class ReleaseItem :  IEquatable<ReleaseItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseItem" /> class.
        /// </summary>
        /// <param name="instances">The instances entityIds included in this release.</param>
        /// <param name="securityVulnerabilitiesCount">The number of security vulnerabilities of the entity.</param>
        /// <param name="affectedByProblems">The entity has one or more problems.</param>
        /// <param name="softwareTechs">The software technologies of the release.</param>
        /// <param name="releaseEntityId">The entity id of correlating release..</param>
        /// <param name="affectedBySecurityVulnerabilities">The entity has one or more security vulnerabilities.</param>
        /// <param name="throughput">The count of bytes per second of the entity.</param>
        /// <param name="product">The product name.</param>
        /// <param name="version">The identified release version.</param>
        /// <param name="running">The related PGI is still running/monitored.</param>
        /// <param name="problemCount">The number of problems of the entity.</param>
        /// <param name="stage">The stage name.</param>
        /// <param name="name">The entity name.</param>
        public ReleaseItem(List<ReleaseInstance> instances = default(List<ReleaseInstance>), int? securityVulnerabilitiesCount = default(int?), bool? affectedByProblems = default(bool?), List<SoftwareTechs> softwareTechs = default(List<SoftwareTechs>), string releaseEntityId = default(string), bool? affectedBySecurityVulnerabilities = default(bool?), double? throughput = default(double?), string product = default(string), string version = default(string), bool? running = default(bool?), int? problemCount = default(int?), string stage = default(string), string name = default(string))
        {
            this.Instances = instances;
            this.SecurityVulnerabilitiesCount = securityVulnerabilitiesCount;
            this.AffectedByProblems = affectedByProblems;
            this.SoftwareTechs = softwareTechs;
            this.ReleaseEntityId = releaseEntityId;
            this.AffectedBySecurityVulnerabilities = affectedBySecurityVulnerabilities;
            this.Throughput = throughput;
            this.Product = product;
            this.Version = version;
            this.Running = running;
            this.ProblemCount = problemCount;
            this.Stage = stage;
            this.Name = name;
        }
        
        /// <summary>
        /// The instances entityIds included in this release
        /// </summary>
        /// <value>The instances entityIds included in this release</value>
        [DataMember(Name="instances", EmitDefaultValue=false)]
        public List<ReleaseInstance> Instances { get; set; }

        /// <summary>
        /// The number of security vulnerabilities of the entity
        /// </summary>
        /// <value>The number of security vulnerabilities of the entity</value>
        [DataMember(Name="securityVulnerabilitiesCount", EmitDefaultValue=false)]
        public int? SecurityVulnerabilitiesCount { get; set; }

        /// <summary>
        /// The entity has one or more problems
        /// </summary>
        /// <value>The entity has one or more problems</value>
        [DataMember(Name="affectedByProblems", EmitDefaultValue=false)]
        public bool? AffectedByProblems { get; set; }

        /// <summary>
        /// The software technologies of the release
        /// </summary>
        /// <value>The software technologies of the release</value>
        [DataMember(Name="softwareTechs", EmitDefaultValue=false)]
        public List<SoftwareTechs> SoftwareTechs { get; set; }

        /// <summary>
        /// The entity id of correlating release.
        /// </summary>
        /// <value>The entity id of correlating release.</value>
        [DataMember(Name="releaseEntityId", EmitDefaultValue=false)]
        public string ReleaseEntityId { get; set; }

        /// <summary>
        /// The entity has one or more security vulnerabilities
        /// </summary>
        /// <value>The entity has one or more security vulnerabilities</value>
        [DataMember(Name="affectedBySecurityVulnerabilities", EmitDefaultValue=false)]
        public bool? AffectedBySecurityVulnerabilities { get; set; }

        /// <summary>
        /// The count of bytes per second of the entity
        /// </summary>
        /// <value>The count of bytes per second of the entity</value>
        [DataMember(Name="throughput", EmitDefaultValue=false)]
        public double? Throughput { get; set; }

        /// <summary>
        /// The product name
        /// </summary>
        /// <value>The product name</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// The identified release version
        /// </summary>
        /// <value>The identified release version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The related PGI is still running/monitored
        /// </summary>
        /// <value>The related PGI is still running/monitored</value>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public bool? Running { get; set; }

        /// <summary>
        /// The number of problems of the entity
        /// </summary>
        /// <value>The number of problems of the entity</value>
        [DataMember(Name="problemCount", EmitDefaultValue=false)]
        public int? ProblemCount { get; set; }

        /// <summary>
        /// The stage name
        /// </summary>
        /// <value>The stage name</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public string Stage { get; set; }

        /// <summary>
        /// The entity name
        /// </summary>
        /// <value>The entity name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseItem {\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("  SecurityVulnerabilitiesCount: ").Append(SecurityVulnerabilitiesCount).Append("\n");
            sb.Append("  AffectedByProblems: ").Append(AffectedByProblems).Append("\n");
            sb.Append("  SoftwareTechs: ").Append(SoftwareTechs).Append("\n");
            sb.Append("  ReleaseEntityId: ").Append(ReleaseEntityId).Append("\n");
            sb.Append("  AffectedBySecurityVulnerabilities: ").Append(AffectedBySecurityVulnerabilities).Append("\n");
            sb.Append("  Throughput: ").Append(Throughput).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  ProblemCount: ").Append(ProblemCount).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseItem);
        }

        /// <summary>
        /// Returns true if ReleaseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instances == input.Instances ||
                    this.Instances != null &&
                    input.Instances != null &&
                    this.Instances.SequenceEqual(input.Instances)
                ) && 
                (
                    this.SecurityVulnerabilitiesCount == input.SecurityVulnerabilitiesCount ||
                    (this.SecurityVulnerabilitiesCount != null &&
                    this.SecurityVulnerabilitiesCount.Equals(input.SecurityVulnerabilitiesCount))
                ) && 
                (
                    this.AffectedByProblems == input.AffectedByProblems ||
                    (this.AffectedByProblems != null &&
                    this.AffectedByProblems.Equals(input.AffectedByProblems))
                ) && 
                (
                    this.SoftwareTechs == input.SoftwareTechs ||
                    this.SoftwareTechs != null &&
                    input.SoftwareTechs != null &&
                    this.SoftwareTechs.SequenceEqual(input.SoftwareTechs)
                ) && 
                (
                    this.ReleaseEntityId == input.ReleaseEntityId ||
                    (this.ReleaseEntityId != null &&
                    this.ReleaseEntityId.Equals(input.ReleaseEntityId))
                ) && 
                (
                    this.AffectedBySecurityVulnerabilities == input.AffectedBySecurityVulnerabilities ||
                    (this.AffectedBySecurityVulnerabilities != null &&
                    this.AffectedBySecurityVulnerabilities.Equals(input.AffectedBySecurityVulnerabilities))
                ) && 
                (
                    this.Throughput == input.Throughput ||
                    (this.Throughput != null &&
                    this.Throughput.Equals(input.Throughput))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.ProblemCount == input.ProblemCount ||
                    (this.ProblemCount != null &&
                    this.ProblemCount.Equals(input.ProblemCount))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instances != null)
                    hashCode = hashCode * 59 + this.Instances.GetHashCode();
                if (this.SecurityVulnerabilitiesCount != null)
                    hashCode = hashCode * 59 + this.SecurityVulnerabilitiesCount.GetHashCode();
                if (this.AffectedByProblems != null)
                    hashCode = hashCode * 59 + this.AffectedByProblems.GetHashCode();
                if (this.SoftwareTechs != null)
                    hashCode = hashCode * 59 + this.SoftwareTechs.GetHashCode();
                if (this.ReleaseEntityId != null)
                    hashCode = hashCode * 59 + this.ReleaseEntityId.GetHashCode();
                if (this.AffectedBySecurityVulnerabilities != null)
                    hashCode = hashCode * 59 + this.AffectedBySecurityVulnerabilities.GetHashCode();
                if (this.Throughput != null)
                    hashCode = hashCode * 59 + this.Throughput.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.ProblemCount != null)
                    hashCode = hashCode * 59 + this.ProblemCount.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
