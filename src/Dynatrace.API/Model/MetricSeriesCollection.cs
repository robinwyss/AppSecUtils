/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Data points of a metric.
    /// </summary>
    [DataContract]
        public partial class MetricSeriesCollection :  IEquatable<MetricSeriesCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricSeriesCollection" /> class.
        /// </summary>
        /// <param name="metricId">The key of the metric. If any transformation is applied, it is included here. (required).</param>
        /// <param name="data">Data points of the metric..</param>
        /// <param name="warnings">A list of potential warnings that affect this ID. For example deprecated feature usage etc..</param>
        public MetricSeriesCollection(string metricId = default(string), List<MetricSeries> data = default(List<MetricSeries>), List<string> warnings = default(List<string>))
        {
            // to ensure "metricId" is required (not null)
            if (metricId == null)
            {
                throw new InvalidDataException("metricId is a required property for MetricSeriesCollection and cannot be null");
            }
            else
            {
                this.MetricId = metricId;
            }
            this.Data = data;
            this.Warnings = warnings;
        }
        
        /// <summary>
        /// The key of the metric. If any transformation is applied, it is included here.
        /// </summary>
        /// <value>The key of the metric. If any transformation is applied, it is included here.</value>
        [DataMember(Name="metricId", EmitDefaultValue=false)]
        public string MetricId { get; set; }

        /// <summary>
        /// Data points of the metric.
        /// </summary>
        /// <value>Data points of the metric.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<MetricSeries> Data { get; set; }

        /// <summary>
        /// A list of potential warnings that affect this ID. For example deprecated feature usage etc.
        /// </summary>
        /// <value>A list of potential warnings that affect this ID. For example deprecated feature usage etc.</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricSeriesCollection {\n");
            sb.Append("  MetricId: ").Append(MetricId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricSeriesCollection);
        }

        /// <summary>
        /// Returns true if MetricSeriesCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricSeriesCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricSeriesCollection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MetricId == input.MetricId ||
                    (this.MetricId != null &&
                    this.MetricId.Equals(input.MetricId))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetricId != null)
                    hashCode = hashCode * 59 + this.MetricId.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
