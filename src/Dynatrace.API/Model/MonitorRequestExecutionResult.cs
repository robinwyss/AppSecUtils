/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A result of the execution HTTP monitor&#x27;s request.
    /// </summary>
    [DataContract]
        public partial class MonitorRequestExecutionResult :  IEquatable<MonitorRequestExecutionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorRequestExecutionResult" /> class.
        /// </summary>
        /// <param name="requestId">Request id..</param>
        /// <param name="requestName">Request name..</param>
        /// <param name="sequenceNumber">Request&#x27;s sequence number..</param>
        /// <param name="startTimestamp">Request start timestamp..</param>
        /// <param name="engineId">VUC&#x27;s id on which monitor&#x27;s request was executed..</param>
        /// <param name="publicLocation">Flag informs whether request was executed on public location..</param>
        /// <param name="url">Request URL address..</param>
        /// <param name="method">Request method type..</param>
        /// <param name="requestBody">Request&#x27;s request body..</param>
        /// <param name="requestHeaders">A list of request&#x27;s headers.</param>
        /// <param name="responseStatusCode">Request&#x27;s response status code..</param>
        /// <param name="responseBody">Request&#x27;s response body..</param>
        /// <param name="responseSize">Request&#x27;s response size in bytes..</param>
        /// <param name="responseBodySizeLimitExceeded">A flag indicating that the response payload size limit of 10MB has been exceeded..</param>
        /// <param name="responseHeaders">A list of request&#x27;s response headers.</param>
        /// <param name="resolvedIps">Request&#x27;s resolved ips.&#x27;.</param>
        /// <param name="healthStatusCode">Request&#x27;s health status code..</param>
        /// <param name="healthStatus">Request&#x27;s health status..</param>
        /// <param name="responseMessage">Request&#x27;s response message.&#x27;.</param>
        /// <param name="peerCertificateExpiryDate">An expiry date of the first SSL certificate from the certificate chain..</param>
        /// <param name="peerCertificateDetails">Request&#x27;s certificate details..</param>
        /// <param name="totalTime">A total request time measured in ms..</param>
        /// <param name="hostNameResolutionTime">A hostname resolution time measured in ms..</param>
        /// <param name="tcpConnectTime">A TCP connect time measured in ms..</param>
        /// <param name="tlsHandshakeTime">A TLS handshake time measured in ms..</param>
        /// <param name="timeToFirstByte">A time to first byte measured in ms..</param>
        /// <param name="redirectionTime">Total number of milliseconds spent on handling all redirect requests, measured in ms..</param>
        /// <param name="waitingTime">Waiting time (time to first byte - (DNS lookup time + TCP connect time + TLS handshake time), measured in ms..</param>
        /// <param name="redirectsCount">Number of request&#x27;s redirects..</param>
        /// <param name="failureMessage">Request&#x27;s failure message..</param>
        public MonitorRequestExecutionResult(string requestId = default(string), string requestName = default(string), int? sequenceNumber = default(int?), long? startTimestamp = default(long?), long? engineId = default(long?), bool? publicLocation = default(bool?), string url = default(string), string method = default(string), string requestBody = default(string), List<MonitorRequestHeader> requestHeaders = default(List<MonitorRequestHeader>), int? responseStatusCode = default(int?), string responseBody = default(string), long? responseSize = default(long?), bool? responseBodySizeLimitExceeded = default(bool?), List<MonitorRequestHeader> responseHeaders = default(List<MonitorRequestHeader>), List<string> resolvedIps = default(List<string>), int? healthStatusCode = default(int?), string healthStatus = default(string), string responseMessage = default(string), long? peerCertificateExpiryDate = default(long?), string peerCertificateDetails = default(string), long? totalTime = default(long?), long? hostNameResolutionTime = default(long?), long? tcpConnectTime = default(long?), long? tlsHandshakeTime = default(long?), long? timeToFirstByte = default(long?), long? redirectionTime = default(long?), long? waitingTime = default(long?), int? redirectsCount = default(int?), string failureMessage = default(string))
        {
            this.RequestId = requestId;
            this.RequestName = requestName;
            this.SequenceNumber = sequenceNumber;
            this.StartTimestamp = startTimestamp;
            this.EngineId = engineId;
            this.PublicLocation = publicLocation;
            this.Url = url;
            this.Method = method;
            this.RequestBody = requestBody;
            this.RequestHeaders = requestHeaders;
            this.ResponseStatusCode = responseStatusCode;
            this.ResponseBody = responseBody;
            this.ResponseSize = responseSize;
            this.ResponseBodySizeLimitExceeded = responseBodySizeLimitExceeded;
            this.ResponseHeaders = responseHeaders;
            this.ResolvedIps = resolvedIps;
            this.HealthStatusCode = healthStatusCode;
            this.HealthStatus = healthStatus;
            this.ResponseMessage = responseMessage;
            this.PeerCertificateExpiryDate = peerCertificateExpiryDate;
            this.PeerCertificateDetails = peerCertificateDetails;
            this.TotalTime = totalTime;
            this.HostNameResolutionTime = hostNameResolutionTime;
            this.TcpConnectTime = tcpConnectTime;
            this.TlsHandshakeTime = tlsHandshakeTime;
            this.TimeToFirstByte = timeToFirstByte;
            this.RedirectionTime = redirectionTime;
            this.WaitingTime = waitingTime;
            this.RedirectsCount = redirectsCount;
            this.FailureMessage = failureMessage;
        }
        
        /// <summary>
        /// Request id.
        /// </summary>
        /// <value>Request id.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Request name.
        /// </summary>
        /// <value>Request name.</value>
        [DataMember(Name="requestName", EmitDefaultValue=false)]
        public string RequestName { get; set; }

        /// <summary>
        /// Request&#x27;s sequence number.
        /// </summary>
        /// <value>Request&#x27;s sequence number.</value>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Request start timestamp.
        /// </summary>
        /// <value>Request start timestamp.</value>
        [DataMember(Name="startTimestamp", EmitDefaultValue=false)]
        public long? StartTimestamp { get; set; }

        /// <summary>
        /// VUC&#x27;s id on which monitor&#x27;s request was executed.
        /// </summary>
        /// <value>VUC&#x27;s id on which monitor&#x27;s request was executed.</value>
        [DataMember(Name="engineId", EmitDefaultValue=false)]
        public long? EngineId { get; set; }

        /// <summary>
        /// Flag informs whether request was executed on public location.
        /// </summary>
        /// <value>Flag informs whether request was executed on public location.</value>
        [DataMember(Name="publicLocation", EmitDefaultValue=false)]
        public bool? PublicLocation { get; set; }

        /// <summary>
        /// Request URL address.
        /// </summary>
        /// <value>Request URL address.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Request method type.
        /// </summary>
        /// <value>Request method type.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Request&#x27;s request body.
        /// </summary>
        /// <value>Request&#x27;s request body.</value>
        [DataMember(Name="requestBody", EmitDefaultValue=false)]
        public string RequestBody { get; set; }

        /// <summary>
        /// A list of request&#x27;s headers
        /// </summary>
        /// <value>A list of request&#x27;s headers</value>
        [DataMember(Name="requestHeaders", EmitDefaultValue=false)]
        public List<MonitorRequestHeader> RequestHeaders { get; set; }

        /// <summary>
        /// Request&#x27;s response status code.
        /// </summary>
        /// <value>Request&#x27;s response status code.</value>
        [DataMember(Name="responseStatusCode", EmitDefaultValue=false)]
        public int? ResponseStatusCode { get; set; }

        /// <summary>
        /// Request&#x27;s response body.
        /// </summary>
        /// <value>Request&#x27;s response body.</value>
        [DataMember(Name="responseBody", EmitDefaultValue=false)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Request&#x27;s response size in bytes.
        /// </summary>
        /// <value>Request&#x27;s response size in bytes.</value>
        [DataMember(Name="responseSize", EmitDefaultValue=false)]
        public long? ResponseSize { get; set; }

        /// <summary>
        /// A flag indicating that the response payload size limit of 10MB has been exceeded.
        /// </summary>
        /// <value>A flag indicating that the response payload size limit of 10MB has been exceeded.</value>
        [DataMember(Name="responseBodySizeLimitExceeded", EmitDefaultValue=false)]
        public bool? ResponseBodySizeLimitExceeded { get; set; }

        /// <summary>
        /// A list of request&#x27;s response headers
        /// </summary>
        /// <value>A list of request&#x27;s response headers</value>
        [DataMember(Name="responseHeaders", EmitDefaultValue=false)]
        public List<MonitorRequestHeader> ResponseHeaders { get; set; }

        /// <summary>
        /// Request&#x27;s resolved ips.&#x27;
        /// </summary>
        /// <value>Request&#x27;s resolved ips.&#x27;</value>
        [DataMember(Name="resolvedIps", EmitDefaultValue=false)]
        public List<string> ResolvedIps { get; set; }

        /// <summary>
        /// Request&#x27;s health status code.
        /// </summary>
        /// <value>Request&#x27;s health status code.</value>
        [DataMember(Name="healthStatusCode", EmitDefaultValue=false)]
        public int? HealthStatusCode { get; set; }

        /// <summary>
        /// Request&#x27;s health status.
        /// </summary>
        /// <value>Request&#x27;s health status.</value>
        [DataMember(Name="healthStatus", EmitDefaultValue=false)]
        public string HealthStatus { get; set; }

        /// <summary>
        /// Request&#x27;s response message.&#x27;
        /// </summary>
        /// <value>Request&#x27;s response message.&#x27;</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// An expiry date of the first SSL certificate from the certificate chain.
        /// </summary>
        /// <value>An expiry date of the first SSL certificate from the certificate chain.</value>
        [DataMember(Name="peerCertificateExpiryDate", EmitDefaultValue=false)]
        public long? PeerCertificateExpiryDate { get; set; }

        /// <summary>
        /// Request&#x27;s certificate details.
        /// </summary>
        /// <value>Request&#x27;s certificate details.</value>
        [DataMember(Name="peerCertificateDetails", EmitDefaultValue=false)]
        public string PeerCertificateDetails { get; set; }

        /// <summary>
        /// A total request time measured in ms.
        /// </summary>
        /// <value>A total request time measured in ms.</value>
        [DataMember(Name="totalTime", EmitDefaultValue=false)]
        public long? TotalTime { get; set; }

        /// <summary>
        /// A hostname resolution time measured in ms.
        /// </summary>
        /// <value>A hostname resolution time measured in ms.</value>
        [DataMember(Name="hostNameResolutionTime", EmitDefaultValue=false)]
        public long? HostNameResolutionTime { get; set; }

        /// <summary>
        /// A TCP connect time measured in ms.
        /// </summary>
        /// <value>A TCP connect time measured in ms.</value>
        [DataMember(Name="tcpConnectTime", EmitDefaultValue=false)]
        public long? TcpConnectTime { get; set; }

        /// <summary>
        /// A TLS handshake time measured in ms.
        /// </summary>
        /// <value>A TLS handshake time measured in ms.</value>
        [DataMember(Name="tlsHandshakeTime", EmitDefaultValue=false)]
        public long? TlsHandshakeTime { get; set; }

        /// <summary>
        /// A time to first byte measured in ms.
        /// </summary>
        /// <value>A time to first byte measured in ms.</value>
        [DataMember(Name="timeToFirstByte", EmitDefaultValue=false)]
        public long? TimeToFirstByte { get; set; }

        /// <summary>
        /// Total number of milliseconds spent on handling all redirect requests, measured in ms.
        /// </summary>
        /// <value>Total number of milliseconds spent on handling all redirect requests, measured in ms.</value>
        [DataMember(Name="redirectionTime", EmitDefaultValue=false)]
        public long? RedirectionTime { get; set; }

        /// <summary>
        /// Waiting time (time to first byte - (DNS lookup time + TCP connect time + TLS handshake time), measured in ms.
        /// </summary>
        /// <value>Waiting time (time to first byte - (DNS lookup time + TCP connect time + TLS handshake time), measured in ms.</value>
        [DataMember(Name="waitingTime", EmitDefaultValue=false)]
        public long? WaitingTime { get; set; }

        /// <summary>
        /// Number of request&#x27;s redirects.
        /// </summary>
        /// <value>Number of request&#x27;s redirects.</value>
        [DataMember(Name="redirectsCount", EmitDefaultValue=false)]
        public int? RedirectsCount { get; set; }

        /// <summary>
        /// Request&#x27;s failure message.
        /// </summary>
        /// <value>Request&#x27;s failure message.</value>
        [DataMember(Name="failureMessage", EmitDefaultValue=false)]
        public string FailureMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonitorRequestExecutionResult {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestName: ").Append(RequestName).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EngineId: ").Append(EngineId).Append("\n");
            sb.Append("  PublicLocation: ").Append(PublicLocation).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseSize: ").Append(ResponseSize).Append("\n");
            sb.Append("  ResponseBodySizeLimitExceeded: ").Append(ResponseBodySizeLimitExceeded).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResolvedIps: ").Append(ResolvedIps).Append("\n");
            sb.Append("  HealthStatusCode: ").Append(HealthStatusCode).Append("\n");
            sb.Append("  HealthStatus: ").Append(HealthStatus).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("  PeerCertificateExpiryDate: ").Append(PeerCertificateExpiryDate).Append("\n");
            sb.Append("  PeerCertificateDetails: ").Append(PeerCertificateDetails).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  HostNameResolutionTime: ").Append(HostNameResolutionTime).Append("\n");
            sb.Append("  TcpConnectTime: ").Append(TcpConnectTime).Append("\n");
            sb.Append("  TlsHandshakeTime: ").Append(TlsHandshakeTime).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  RedirectionTime: ").Append(RedirectionTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  RedirectsCount: ").Append(RedirectsCount).Append("\n");
            sb.Append("  FailureMessage: ").Append(FailureMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitorRequestExecutionResult);
        }

        /// <summary>
        /// Returns true if MonitorRequestExecutionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitorRequestExecutionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitorRequestExecutionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestName == input.RequestName ||
                    (this.RequestName != null &&
                    this.RequestName.Equals(input.RequestName))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                ) && 
                (
                    this.EngineId == input.EngineId ||
                    (this.EngineId != null &&
                    this.EngineId.Equals(input.EngineId))
                ) && 
                (
                    this.PublicLocation == input.PublicLocation ||
                    (this.PublicLocation != null &&
                    this.PublicLocation.Equals(input.PublicLocation))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.RequestBody == input.RequestBody ||
                    (this.RequestBody != null &&
                    this.RequestBody.Equals(input.RequestBody))
                ) && 
                (
                    this.RequestHeaders == input.RequestHeaders ||
                    this.RequestHeaders != null &&
                    input.RequestHeaders != null &&
                    this.RequestHeaders.SequenceEqual(input.RequestHeaders)
                ) && 
                (
                    this.ResponseStatusCode == input.ResponseStatusCode ||
                    (this.ResponseStatusCode != null &&
                    this.ResponseStatusCode.Equals(input.ResponseStatusCode))
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                ) && 
                (
                    this.ResponseSize == input.ResponseSize ||
                    (this.ResponseSize != null &&
                    this.ResponseSize.Equals(input.ResponseSize))
                ) && 
                (
                    this.ResponseBodySizeLimitExceeded == input.ResponseBodySizeLimitExceeded ||
                    (this.ResponseBodySizeLimitExceeded != null &&
                    this.ResponseBodySizeLimitExceeded.Equals(input.ResponseBodySizeLimitExceeded))
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    this.ResponseHeaders != null &&
                    input.ResponseHeaders != null &&
                    this.ResponseHeaders.SequenceEqual(input.ResponseHeaders)
                ) && 
                (
                    this.ResolvedIps == input.ResolvedIps ||
                    this.ResolvedIps != null &&
                    input.ResolvedIps != null &&
                    this.ResolvedIps.SequenceEqual(input.ResolvedIps)
                ) && 
                (
                    this.HealthStatusCode == input.HealthStatusCode ||
                    (this.HealthStatusCode != null &&
                    this.HealthStatusCode.Equals(input.HealthStatusCode))
                ) && 
                (
                    this.HealthStatus == input.HealthStatus ||
                    (this.HealthStatus != null &&
                    this.HealthStatus.Equals(input.HealthStatus))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                ) && 
                (
                    this.PeerCertificateExpiryDate == input.PeerCertificateExpiryDate ||
                    (this.PeerCertificateExpiryDate != null &&
                    this.PeerCertificateExpiryDate.Equals(input.PeerCertificateExpiryDate))
                ) && 
                (
                    this.PeerCertificateDetails == input.PeerCertificateDetails ||
                    (this.PeerCertificateDetails != null &&
                    this.PeerCertificateDetails.Equals(input.PeerCertificateDetails))
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    (this.TotalTime != null &&
                    this.TotalTime.Equals(input.TotalTime))
                ) && 
                (
                    this.HostNameResolutionTime == input.HostNameResolutionTime ||
                    (this.HostNameResolutionTime != null &&
                    this.HostNameResolutionTime.Equals(input.HostNameResolutionTime))
                ) && 
                (
                    this.TcpConnectTime == input.TcpConnectTime ||
                    (this.TcpConnectTime != null &&
                    this.TcpConnectTime.Equals(input.TcpConnectTime))
                ) && 
                (
                    this.TlsHandshakeTime == input.TlsHandshakeTime ||
                    (this.TlsHandshakeTime != null &&
                    this.TlsHandshakeTime.Equals(input.TlsHandshakeTime))
                ) && 
                (
                    this.TimeToFirstByte == input.TimeToFirstByte ||
                    (this.TimeToFirstByte != null &&
                    this.TimeToFirstByte.Equals(input.TimeToFirstByte))
                ) && 
                (
                    this.RedirectionTime == input.RedirectionTime ||
                    (this.RedirectionTime != null &&
                    this.RedirectionTime.Equals(input.RedirectionTime))
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    (this.WaitingTime != null &&
                    this.WaitingTime.Equals(input.WaitingTime))
                ) && 
                (
                    this.RedirectsCount == input.RedirectsCount ||
                    (this.RedirectsCount != null &&
                    this.RedirectsCount.Equals(input.RedirectsCount))
                ) && 
                (
                    this.FailureMessage == input.FailureMessage ||
                    (this.FailureMessage != null &&
                    this.FailureMessage.Equals(input.FailureMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.RequestName != null)
                    hashCode = hashCode * 59 + this.RequestName.GetHashCode();
                if (this.SequenceNumber != null)
                    hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.StartTimestamp != null)
                    hashCode = hashCode * 59 + this.StartTimestamp.GetHashCode();
                if (this.EngineId != null)
                    hashCode = hashCode * 59 + this.EngineId.GetHashCode();
                if (this.PublicLocation != null)
                    hashCode = hashCode * 59 + this.PublicLocation.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.RequestBody != null)
                    hashCode = hashCode * 59 + this.RequestBody.GetHashCode();
                if (this.RequestHeaders != null)
                    hashCode = hashCode * 59 + this.RequestHeaders.GetHashCode();
                if (this.ResponseStatusCode != null)
                    hashCode = hashCode * 59 + this.ResponseStatusCode.GetHashCode();
                if (this.ResponseBody != null)
                    hashCode = hashCode * 59 + this.ResponseBody.GetHashCode();
                if (this.ResponseSize != null)
                    hashCode = hashCode * 59 + this.ResponseSize.GetHashCode();
                if (this.ResponseBodySizeLimitExceeded != null)
                    hashCode = hashCode * 59 + this.ResponseBodySizeLimitExceeded.GetHashCode();
                if (this.ResponseHeaders != null)
                    hashCode = hashCode * 59 + this.ResponseHeaders.GetHashCode();
                if (this.ResolvedIps != null)
                    hashCode = hashCode * 59 + this.ResolvedIps.GetHashCode();
                if (this.HealthStatusCode != null)
                    hashCode = hashCode * 59 + this.HealthStatusCode.GetHashCode();
                if (this.HealthStatus != null)
                    hashCode = hashCode * 59 + this.HealthStatus.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                if (this.PeerCertificateExpiryDate != null)
                    hashCode = hashCode * 59 + this.PeerCertificateExpiryDate.GetHashCode();
                if (this.PeerCertificateDetails != null)
                    hashCode = hashCode * 59 + this.PeerCertificateDetails.GetHashCode();
                if (this.TotalTime != null)
                    hashCode = hashCode * 59 + this.TotalTime.GetHashCode();
                if (this.HostNameResolutionTime != null)
                    hashCode = hashCode * 59 + this.HostNameResolutionTime.GetHashCode();
                if (this.TcpConnectTime != null)
                    hashCode = hashCode * 59 + this.TcpConnectTime.GetHashCode();
                if (this.TlsHandshakeTime != null)
                    hashCode = hashCode * 59 + this.TlsHandshakeTime.GetHashCode();
                if (this.TimeToFirstByte != null)
                    hashCode = hashCode * 59 + this.TimeToFirstByte.GetHashCode();
                if (this.RedirectionTime != null)
                    hashCode = hashCode * 59 + this.RedirectionTime.GetHashCode();
                if (this.WaitingTime != null)
                    hashCode = hashCode * 59 + this.WaitingTime.GetHashCode();
                if (this.RedirectsCount != null)
                    hashCode = hashCode * 59 + this.RedirectsCount.GetHashCode();
                if (this.FailureMessage != null)
                    hashCode = hashCode * 59 + this.FailureMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
