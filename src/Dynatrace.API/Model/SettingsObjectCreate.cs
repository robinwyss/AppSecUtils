/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of a new settings object.
    /// </summary>
    [DataContract]
        public partial class SettingsObjectCreate :  IEquatable<SettingsObjectCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsObjectCreate" /> class.
        /// </summary>
        /// <param name="insertAfter">The position of the new object. The new object will be added after the specified one. If &#x60;null&#x60;, the new object will be placed in the last position. If set to empty string, the new object will be placed in the first position. Only applicable for objects based on schemas with ordered objects (schema&#x27;s **ordered** parameter is set to &#x60;true&#x60;)..</param>
        /// <param name="schemaVersion">The version of the schema on which the object is based..</param>
        /// <param name="scope">The scope that the object targets. (required).</param>
        /// <param name="schemaId">The schema on which the object is based. (required).</param>
        /// <param name="value">value (required).</param>
        public SettingsObjectCreate(string insertAfter = default(string), string schemaVersion = default(string), string scope = default(string), string schemaId = default(string), SettingsValue value = default(SettingsValue))
        {
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new InvalidDataException("scope is a required property for SettingsObjectCreate and cannot be null");
            }
            else
            {
                this.Scope = scope;
            }
            // to ensure "schemaId" is required (not null)
            if (schemaId == null)
            {
                throw new InvalidDataException("schemaId is a required property for SettingsObjectCreate and cannot be null");
            }
            else
            {
                this.SchemaId = schemaId;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for SettingsObjectCreate and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.InsertAfter = insertAfter;
            this.SchemaVersion = schemaVersion;
        }
        
        /// <summary>
        /// The position of the new object. The new object will be added after the specified one. If &#x60;null&#x60;, the new object will be placed in the last position. If set to empty string, the new object will be placed in the first position. Only applicable for objects based on schemas with ordered objects (schema&#x27;s **ordered** parameter is set to &#x60;true&#x60;).
        /// </summary>
        /// <value>The position of the new object. The new object will be added after the specified one. If &#x60;null&#x60;, the new object will be placed in the last position. If set to empty string, the new object will be placed in the first position. Only applicable for objects based on schemas with ordered objects (schema&#x27;s **ordered** parameter is set to &#x60;true&#x60;).</value>
        [DataMember(Name="insertAfter", EmitDefaultValue=false)]
        public string InsertAfter { get; set; }

        /// <summary>
        /// The version of the schema on which the object is based.
        /// </summary>
        /// <value>The version of the schema on which the object is based.</value>
        [DataMember(Name="schemaVersion", EmitDefaultValue=false)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// The scope that the object targets.
        /// </summary>
        /// <value>The scope that the object targets.</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// The schema on which the object is based.
        /// </summary>
        /// <value>The schema on which the object is based.</value>
        [DataMember(Name="schemaId", EmitDefaultValue=false)]
        public string SchemaId { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public SettingsValue Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingsObjectCreate {\n");
            sb.Append("  InsertAfter: ").Append(InsertAfter).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SchemaId: ").Append(SchemaId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingsObjectCreate);
        }

        /// <summary>
        /// Returns true if SettingsObjectCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingsObjectCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingsObjectCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InsertAfter == input.InsertAfter ||
                    (this.InsertAfter != null &&
                    this.InsertAfter.Equals(input.InsertAfter))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.SchemaId == input.SchemaId ||
                    (this.SchemaId != null &&
                    this.SchemaId.Equals(input.SchemaId))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InsertAfter != null)
                    hashCode = hashCode * 59 + this.InsertAfter.GetHashCode();
                if (this.SchemaVersion != null)
                    hashCode = hashCode * 59 + this.SchemaVersion.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.SchemaId != null)
                    hashCode = hashCode * 59 + this.SchemaId.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
