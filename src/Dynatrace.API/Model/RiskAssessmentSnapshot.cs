/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A snapshot of the risk assessment of a security problem.
    /// </summary>
    [DataContract]
        public partial class RiskAssessmentSnapshot :  IEquatable<RiskAssessmentSnapshot>, IValidatableObject
    {
        /// <summary>
        /// The availability status of public exploits.
        /// </summary>
        /// <value>The availability status of public exploits.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PublicExploitEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 2        }
        /// <summary>
        /// The availability status of public exploits.
        /// </summary>
        /// <value>The availability status of public exploits.</value>
        [DataMember(Name="publicExploit", EmitDefaultValue=false)]
        public PublicExploitEnum? PublicExploit { get; set; }
        /// <summary>
        /// The level of exposure of affected entities.
        /// </summary>
        /// <value>The level of exposure of affected entities.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExposureEnum
        {
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 1,
            /// <summary>
            /// Enum NOTDETECTED for value: NOT_DETECTED
            /// </summary>
            [EnumMember(Value = "NOT_DETECTED")]
            NOTDETECTED = 2,
            /// <summary>
            /// Enum PUBLICNETWORK for value: PUBLIC_NETWORK
            /// </summary>
            [EnumMember(Value = "PUBLIC_NETWORK")]
            PUBLICNETWORK = 3        }
        /// <summary>
        /// The level of exposure of affected entities.
        /// </summary>
        /// <value>The level of exposure of affected entities.</value>
        [DataMember(Name="exposure", EmitDefaultValue=false)]
        public ExposureEnum? Exposure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskAssessmentSnapshot" /> class.
        /// </summary>
        public RiskAssessmentSnapshot()
        {
        }
        
        /// <summary>
        /// The number of currently affected entities.
        /// </summary>
        /// <value>The number of currently affected entities.</value>
        [DataMember(Name="numberOfAffectedEntities", EmitDefaultValue=false)]
        public int? NumberOfAffectedEntities { get; private set; }

        /// <summary>
        /// The number of currently reachable data assets by affected entities.
        /// </summary>
        /// <value>The number of currently reachable data assets by affected entities.</value>
        [DataMember(Name="numberOfReachableDataAssets", EmitDefaultValue=false)]
        public int? NumberOfReachableDataAssets { get; private set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskAssessmentSnapshot {\n");
            sb.Append("  NumberOfAffectedEntities: ").Append(NumberOfAffectedEntities).Append("\n");
            sb.Append("  NumberOfReachableDataAssets: ").Append(NumberOfReachableDataAssets).Append("\n");
            sb.Append("  PublicExploit: ").Append(PublicExploit).Append("\n");
            sb.Append("  Exposure: ").Append(Exposure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskAssessmentSnapshot);
        }

        /// <summary>
        /// Returns true if RiskAssessmentSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskAssessmentSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskAssessmentSnapshot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfAffectedEntities == input.NumberOfAffectedEntities ||
                    (this.NumberOfAffectedEntities != null &&
                    this.NumberOfAffectedEntities.Equals(input.NumberOfAffectedEntities))
                ) && 
                (
                    this.NumberOfReachableDataAssets == input.NumberOfReachableDataAssets ||
                    (this.NumberOfReachableDataAssets != null &&
                    this.NumberOfReachableDataAssets.Equals(input.NumberOfReachableDataAssets))
                ) && 
                (
                    this.PublicExploit == input.PublicExploit ||
                    (this.PublicExploit != null &&
                    this.PublicExploit.Equals(input.PublicExploit))
                ) && 
                (
                    this.Exposure == input.Exposure ||
                    (this.Exposure != null &&
                    this.Exposure.Equals(input.Exposure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfAffectedEntities != null)
                    hashCode = hashCode * 59 + this.NumberOfAffectedEntities.GetHashCode();
                if (this.NumberOfReachableDataAssets != null)
                    hashCode = hashCode * 59 + this.NumberOfReachableDataAssets.GetHashCode();
                if (this.PublicExploit != null)
                    hashCode = hashCode * 59 + this.PublicExploit.GetHashCode();
                if (this.Exposure != null)
                    hashCode = hashCode * 59 + this.Exposure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
