/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A persisted settings object
    /// </summary>
    [DataContract]
        public partial class PersistedObject :  IEquatable<PersistedObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersistedObject" /> class.
        /// </summary>
        /// <param name="author">User id or public token id of last modifier.</param>
        /// <param name="updateToken">Generated upon retrieval and can be used to detect concurrent modification when set during write operations.</param>
        /// <param name="schemaVersion">The schema version which was used to create this object.</param>
        /// <param name="modified">Timestamp of last modification.</param>
        /// <param name="objectId">The unique identifier of this settings object.</param>
        /// <param name="created">Timestamp of creation.</param>
        /// <param name="scope">The scope this value is defined and persisted at.</param>
        /// <param name="value">value.</param>
        /// <param name="schemaId">The schema for which the values are valid.</param>
        /// <param name="summary">The Human-readable summary of setting contents.</param>
        public PersistedObject(string author = default(string), string updateToken = default(string), string schemaVersion = default(string), long? modified = default(long?), string objectId = default(string), long? created = default(long?), string scope = default(string), SettingsValue value = default(SettingsValue), string schemaId = default(string), string summary = default(string))
        {
            this.Author = author;
            this.UpdateToken = updateToken;
            this.SchemaVersion = schemaVersion;
            this.Modified = modified;
            this.ObjectId = objectId;
            this.Created = created;
            this.Scope = scope;
            this.Value = value;
            this.SchemaId = schemaId;
            this.Summary = summary;
        }
        
        /// <summary>
        /// User id or public token id of last modifier
        /// </summary>
        /// <value>User id or public token id of last modifier</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Generated upon retrieval and can be used to detect concurrent modification when set during write operations
        /// </summary>
        /// <value>Generated upon retrieval and can be used to detect concurrent modification when set during write operations</value>
        [DataMember(Name="updateToken", EmitDefaultValue=false)]
        public string UpdateToken { get; set; }

        /// <summary>
        /// The schema version which was used to create this object
        /// </summary>
        /// <value>The schema version which was used to create this object</value>
        [DataMember(Name="schemaVersion", EmitDefaultValue=false)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Timestamp of last modification
        /// </summary>
        /// <value>Timestamp of last modification</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public long? Modified { get; set; }

        /// <summary>
        /// The unique identifier of this settings object
        /// </summary>
        /// <value>The unique identifier of this settings object</value>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Timestamp of creation
        /// </summary>
        /// <value>Timestamp of creation</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public long? Created { get; set; }

        /// <summary>
        /// The scope this value is defined and persisted at
        /// </summary>
        /// <value>The scope this value is defined and persisted at</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public SettingsValue Value { get; set; }

        /// <summary>
        /// The schema for which the values are valid
        /// </summary>
        /// <value>The schema for which the values are valid</value>
        [DataMember(Name="schemaId", EmitDefaultValue=false)]
        public string SchemaId { get; set; }

        /// <summary>
        /// The Human-readable summary of setting contents
        /// </summary>
        /// <value>The Human-readable summary of setting contents</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersistedObject {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  UpdateToken: ").Append(UpdateToken).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  SchemaId: ").Append(SchemaId).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersistedObject);
        }

        /// <summary>
        /// Returns true if PersistedObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PersistedObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersistedObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.UpdateToken == input.UpdateToken ||
                    (this.UpdateToken != null &&
                    this.UpdateToken.Equals(input.UpdateToken))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.SchemaId == input.SchemaId ||
                    (this.SchemaId != null &&
                    this.SchemaId.Equals(input.SchemaId))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.UpdateToken != null)
                    hashCode = hashCode * 59 + this.UpdateToken.GetHashCode();
                if (this.SchemaVersion != null)
                    hashCode = hashCode * 59 + this.SchemaVersion.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.SchemaId != null)
                    hashCode = hashCode * 59 + this.SchemaId.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
