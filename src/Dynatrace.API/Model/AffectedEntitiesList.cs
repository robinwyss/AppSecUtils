/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of affected entities of the security problem.   An affected entity is a monitored entity that is directly or indirectly affected by a *vulnerable entity* (for example, it could be a host where the vulnerable process runs).
    /// </summary>
    [DataContract]
        public partial class AffectedEntitiesList :  IEquatable<AffectedEntitiesList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AffectedEntitiesList" /> class.
        /// </summary>
        public AffectedEntitiesList()
        {
        }
        
        /// <summary>
        /// A list of affected applications.
        /// </summary>
        /// <value>A list of affected applications.</value>
        [DataMember(Name="applications", EmitDefaultValue=false)]
        public List<AffectedEntity> Applications { get; private set; }

        /// <summary>
        /// A list of affected services.
        /// </summary>
        /// <value>A list of affected services.</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<AffectedService> Services { get; private set; }

        /// <summary>
        /// A list of affected hosts.
        /// </summary>
        /// <value>A list of affected hosts.</value>
        [DataMember(Name="hosts", EmitDefaultValue=false)]
        public List<AffectedEntity> Hosts { get; private set; }

        /// <summary>
        /// A list of affected databases.
        /// </summary>
        /// <value>A list of affected databases.</value>
        [DataMember(Name="databases", EmitDefaultValue=false)]
        public List<string> Databases { get; private set; }

        /// <summary>
        /// A list of affected Kubernetes workloads.
        /// </summary>
        /// <value>A list of affected Kubernetes workloads.</value>
        [DataMember(Name="kubernetesWorkloads", EmitDefaultValue=false)]
        public List<AffectedEntity> KubernetesWorkloads { get; private set; }

        /// <summary>
        /// A list of affected Kubernetes clusters.
        /// </summary>
        /// <value>A list of affected Kubernetes clusters.</value>
        [DataMember(Name="kubernetesClusters", EmitDefaultValue=false)]
        public List<AffectedEntity> KubernetesClusters { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AffectedEntitiesList {\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("  Databases: ").Append(Databases).Append("\n");
            sb.Append("  KubernetesWorkloads: ").Append(KubernetesWorkloads).Append("\n");
            sb.Append("  KubernetesClusters: ").Append(KubernetesClusters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AffectedEntitiesList);
        }

        /// <summary>
        /// Returns true if AffectedEntitiesList instances are equal
        /// </summary>
        /// <param name="input">Instance of AffectedEntitiesList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AffectedEntitiesList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Applications == input.Applications ||
                    this.Applications != null &&
                    input.Applications != null &&
                    this.Applications.SequenceEqual(input.Applications)
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Hosts == input.Hosts ||
                    this.Hosts != null &&
                    input.Hosts != null &&
                    this.Hosts.SequenceEqual(input.Hosts)
                ) && 
                (
                    this.Databases == input.Databases ||
                    this.Databases != null &&
                    input.Databases != null &&
                    this.Databases.SequenceEqual(input.Databases)
                ) && 
                (
                    this.KubernetesWorkloads == input.KubernetesWorkloads ||
                    this.KubernetesWorkloads != null &&
                    input.KubernetesWorkloads != null &&
                    this.KubernetesWorkloads.SequenceEqual(input.KubernetesWorkloads)
                ) && 
                (
                    this.KubernetesClusters == input.KubernetesClusters ||
                    this.KubernetesClusters != null &&
                    input.KubernetesClusters != null &&
                    this.KubernetesClusters.SequenceEqual(input.KubernetesClusters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applications != null)
                    hashCode = hashCode * 59 + this.Applications.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Hosts != null)
                    hashCode = hashCode * 59 + this.Hosts.GetHashCode();
                if (this.Databases != null)
                    hashCode = hashCode * 59 + this.Databases.GetHashCode();
                if (this.KubernetesWorkloads != null)
                    hashCode = hashCode * 59 + this.KubernetesWorkloads.GetHashCode();
                if (this.KubernetesClusters != null)
                    hashCode = hashCode * 59 + this.KubernetesClusters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
