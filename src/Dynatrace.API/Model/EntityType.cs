/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of properties of the monitored entity type.
    /// </summary>
    [DataContract]
        public partial class EntityType :  IEquatable<EntityType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityType" /> class.
        /// </summary>
        /// <param name="fromRelationships">A list of possible relationships where the monitored entity type occupies the FROM position.</param>
        /// <param name="entityLimitExceeded">Whether the entity creation limit for the given type has been exceeded.</param>
        /// <param name="toRelationships">A list of possible relationships where the monitored entity type occupies the TO position..</param>
        /// <param name="managementZones">The placeholder for the list of management zones of an actual entity..</param>
        /// <param name="dimensionKey">The dimension key used within metrics for this monitored entity..</param>
        /// <param name="tags">The placeholder for the list of tags of an actual entity..</param>
        /// <param name="properties">A list of additional properties of the monitored entity type..</param>
        /// <param name="type">The type of the monitored entity..</param>
        /// <param name="displayName">The display name of the monitored entity..</param>
        public EntityType(List<ToPosition> fromRelationships = default(List<ToPosition>), bool? entityLimitExceeded = default(bool?), List<FromPosition> toRelationships = default(List<FromPosition>), string managementZones = default(string), string dimensionKey = default(string), string tags = default(string), List<EntityTypePropertyDto> properties = default(List<EntityTypePropertyDto>), string type = default(string), string displayName = default(string))
        {
            this.FromRelationships = fromRelationships;
            this.EntityLimitExceeded = entityLimitExceeded;
            this.ToRelationships = toRelationships;
            this.ManagementZones = managementZones;
            this.DimensionKey = dimensionKey;
            this.Tags = tags;
            this.Properties = properties;
            this.Type = type;
            this.DisplayName = displayName;
        }
        
        /// <summary>
        /// A list of possible relationships where the monitored entity type occupies the FROM position
        /// </summary>
        /// <value>A list of possible relationships where the monitored entity type occupies the FROM position</value>
        [DataMember(Name="fromRelationships", EmitDefaultValue=false)]
        public List<ToPosition> FromRelationships { get; set; }

        /// <summary>
        /// Whether the entity creation limit for the given type has been exceeded
        /// </summary>
        /// <value>Whether the entity creation limit for the given type has been exceeded</value>
        [DataMember(Name="entityLimitExceeded", EmitDefaultValue=false)]
        public bool? EntityLimitExceeded { get; set; }

        /// <summary>
        /// A list of possible relationships where the monitored entity type occupies the TO position.
        /// </summary>
        /// <value>A list of possible relationships where the monitored entity type occupies the TO position.</value>
        [DataMember(Name="toRelationships", EmitDefaultValue=false)]
        public List<FromPosition> ToRelationships { get; set; }

        /// <summary>
        /// The placeholder for the list of management zones of an actual entity.
        /// </summary>
        /// <value>The placeholder for the list of management zones of an actual entity.</value>
        [DataMember(Name="managementZones", EmitDefaultValue=false)]
        public string ManagementZones { get; set; }

        /// <summary>
        /// The dimension key used within metrics for this monitored entity.
        /// </summary>
        /// <value>The dimension key used within metrics for this monitored entity.</value>
        [DataMember(Name="dimensionKey", EmitDefaultValue=false)]
        public string DimensionKey { get; set; }

        /// <summary>
        /// The placeholder for the list of tags of an actual entity.
        /// </summary>
        /// <value>The placeholder for the list of tags of an actual entity.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// A list of additional properties of the monitored entity type.
        /// </summary>
        /// <value>A list of additional properties of the monitored entity type.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<EntityTypePropertyDto> Properties { get; set; }

        /// <summary>
        /// The type of the monitored entity.
        /// </summary>
        /// <value>The type of the monitored entity.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The display name of the monitored entity.
        /// </summary>
        /// <value>The display name of the monitored entity.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityType {\n");
            sb.Append("  FromRelationships: ").Append(FromRelationships).Append("\n");
            sb.Append("  EntityLimitExceeded: ").Append(EntityLimitExceeded).Append("\n");
            sb.Append("  ToRelationships: ").Append(ToRelationships).Append("\n");
            sb.Append("  ManagementZones: ").Append(ManagementZones).Append("\n");
            sb.Append("  DimensionKey: ").Append(DimensionKey).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityType);
        }

        /// <summary>
        /// Returns true if EntityType instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromRelationships == input.FromRelationships ||
                    this.FromRelationships != null &&
                    input.FromRelationships != null &&
                    this.FromRelationships.SequenceEqual(input.FromRelationships)
                ) && 
                (
                    this.EntityLimitExceeded == input.EntityLimitExceeded ||
                    (this.EntityLimitExceeded != null &&
                    this.EntityLimitExceeded.Equals(input.EntityLimitExceeded))
                ) && 
                (
                    this.ToRelationships == input.ToRelationships ||
                    this.ToRelationships != null &&
                    input.ToRelationships != null &&
                    this.ToRelationships.SequenceEqual(input.ToRelationships)
                ) && 
                (
                    this.ManagementZones == input.ManagementZones ||
                    (this.ManagementZones != null &&
                    this.ManagementZones.Equals(input.ManagementZones))
                ) && 
                (
                    this.DimensionKey == input.DimensionKey ||
                    (this.DimensionKey != null &&
                    this.DimensionKey.Equals(input.DimensionKey))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromRelationships != null)
                    hashCode = hashCode * 59 + this.FromRelationships.GetHashCode();
                if (this.EntityLimitExceeded != null)
                    hashCode = hashCode * 59 + this.EntityLimitExceeded.GetHashCode();
                if (this.ToRelationships != null)
                    hashCode = hashCode * 59 + this.ToRelationships.GetHashCode();
                if (this.ManagementZones != null)
                    hashCode = hashCode * 59 + this.ManagementZones.GetHashCode();
                if (this.DimensionKey != null)
                    hashCode = hashCode * 59 + this.DimensionKey.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
