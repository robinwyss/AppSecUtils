/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The synthetic location update. This is a base object, the exact type depends on the value of the &#x60;type&#x60; field.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(SyntheticPrivateLocationUpdate), "SyntheticPrivateLocationUpdate")]
    [JsonSubtypes.KnownSubType(typeof(SyntheticPublicLocationUpdate), "SyntheticPublicLocationUpdate")]
        public partial class SyntheticLocationUpdate :  IEquatable<SyntheticLocationUpdate>, IValidatableObject
    {
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; SyntheticPublicLocationUpdate * &#x60;PRIVATE&#x60; -&gt; SyntheticPrivateLocationUpdate 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; SyntheticPublicLocationUpdate * &#x60;PRIVATE&#x60; -&gt; SyntheticPrivateLocationUpdate </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 1,
            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 2        }
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; SyntheticPublicLocationUpdate * &#x60;PRIVATE&#x60; -&gt; SyntheticPrivateLocationUpdate 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; SyntheticPublicLocationUpdate * &#x60;PRIVATE&#x60; -&gt; SyntheticPrivateLocationUpdate </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticLocationUpdate" /> class.
        /// </summary>
        /// <param name="type">Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; SyntheticPublicLocationUpdate * &#x60;PRIVATE&#x60; -&gt; SyntheticPrivateLocationUpdate .</param>
        public SyntheticLocationUpdate(TypeEnum? type = default(TypeEnum?))
        {
            this.Type = type;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyntheticLocationUpdate {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyntheticLocationUpdate);
        }

        /// <summary>
        /// Returns true if SyntheticLocationUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of SyntheticLocationUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyntheticLocationUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
