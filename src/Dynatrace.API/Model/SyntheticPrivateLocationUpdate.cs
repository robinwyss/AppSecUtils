/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of a private synthetic location
    /// </summary>
    [DataContract]
        public partial class SyntheticPrivateLocationUpdate : SyntheticLocationUpdate,  IEquatable<SyntheticPrivateLocationUpdate>, IValidatableObject
    {
        /// <summary>
        /// The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.
        /// </summary>
        /// <value>The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 2,
            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 3        }
        /// <summary>
        /// The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.
        /// </summary>
        /// <value>The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticPrivateLocationUpdate" /> class.
        /// </summary>
        /// <param name="nodes">A list of synthetic nodes belonging to the location.  You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call. (required).</param>
        /// <param name="name">The name of the location. (required).</param>
        /// <param name="countryCode">The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland)..</param>
        /// <param name="regionCode">The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)..</param>
        /// <param name="city">The city of the location..</param>
        /// <param name="latitude">The latitude of the location in &#x60;DDD.dddd&#x60; format. (required).</param>
        /// <param name="longitude">The longitude of the location in &#x60;DDD.dddd&#x60; format. (required).</param>
        /// <param name="status">The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it..</param>
        /// <param name="availabilityLocationOutage">The alerting of location outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;)..</param>
        /// <param name="availabilityNodeOutage">The alerting of node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).  If enabled, the outage of *any* node in the location triggers an alert..</param>
        /// <param name="locationNodeOutageDelayInMinutes">Alert if the location or node outage lasts longer than *X* minutes.  Only applicable when **availabilityLocationOutage** or **availabilityNodeOutage** is set to &#x60;true&#x60;..</param>
        /// <param name="availabilityNotificationsEnabled">The notifications of location and node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;)..</param>
        public SyntheticPrivateLocationUpdate(List<string> nodes = default(List<string>), string name = default(string), string countryCode = default(string), string regionCode = default(string), string city = default(string), double? latitude = default(double?), double? longitude = default(double?), StatusEnum? status = default(StatusEnum?), bool? availabilityLocationOutage = default(bool?), bool? availabilityNodeOutage = default(bool?), int? locationNodeOutageDelayInMinutes = default(int?), bool? availabilityNotificationsEnabled = default(bool?), TypeEnum? type = default(TypeEnum?)) : base(type)
        {
            // to ensure "nodes" is required (not null)
            if (nodes == null)
            {
                throw new InvalidDataException("nodes is a required property for SyntheticPrivateLocationUpdate and cannot be null");
            }
            else
            {
                this.Nodes = nodes;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SyntheticPrivateLocationUpdate and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new InvalidDataException("latitude is a required property for SyntheticPrivateLocationUpdate and cannot be null");
            }
            else
            {
                this.Latitude = latitude;
            }
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new InvalidDataException("longitude is a required property for SyntheticPrivateLocationUpdate and cannot be null");
            }
            else
            {
                this.Longitude = longitude;
            }
            this.CountryCode = countryCode;
            this.RegionCode = regionCode;
            this.City = city;
            this.Status = status;
            this.AvailabilityLocationOutage = availabilityLocationOutage;
            this.AvailabilityNodeOutage = availabilityNodeOutage;
            this.LocationNodeOutageDelayInMinutes = locationNodeOutageDelayInMinutes;
            this.AvailabilityNotificationsEnabled = availabilityNotificationsEnabled;
        }
        
        /// <summary>
        /// A list of synthetic nodes belonging to the location.  You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call.
        /// </summary>
        /// <value>A list of synthetic nodes belonging to the location.  You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call.</value>
        [DataMember(Name="nodes", EmitDefaultValue=false)]
        public List<string> Nodes { get; set; }

        /// <summary>
        /// The name of the location.
        /// </summary>
        /// <value>The name of the location.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland).
        /// </summary>
        /// <value>The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland).</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes).
        /// </summary>
        /// <value>The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes).</value>
        [DataMember(Name="regionCode", EmitDefaultValue=false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// The city of the location.
        /// </summary>
        /// <value>The city of the location.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The latitude of the location in &#x60;DDD.dddd&#x60; format.
        /// </summary>
        /// <value>The latitude of the location in &#x60;DDD.dddd&#x60; format.</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude of the location in &#x60;DDD.dddd&#x60; format.
        /// </summary>
        /// <value>The longitude of the location in &#x60;DDD.dddd&#x60; format.</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }


        /// <summary>
        /// The alerting of location outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The alerting of location outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="availabilityLocationOutage", EmitDefaultValue=false)]
        public bool? AvailabilityLocationOutage { get; set; }

        /// <summary>
        /// The alerting of node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).  If enabled, the outage of *any* node in the location triggers an alert.
        /// </summary>
        /// <value>The alerting of node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).  If enabled, the outage of *any* node in the location triggers an alert.</value>
        [DataMember(Name="availabilityNodeOutage", EmitDefaultValue=false)]
        public bool? AvailabilityNodeOutage { get; set; }

        /// <summary>
        /// Alert if the location or node outage lasts longer than *X* minutes.  Only applicable when **availabilityLocationOutage** or **availabilityNodeOutage** is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>Alert if the location or node outage lasts longer than *X* minutes.  Only applicable when **availabilityLocationOutage** or **availabilityNodeOutage** is set to &#x60;true&#x60;.</value>
        [DataMember(Name="locationNodeOutageDelayInMinutes", EmitDefaultValue=false)]
        public int? LocationNodeOutageDelayInMinutes { get; set; }

        /// <summary>
        /// The notifications of location and node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The notifications of location and node outage is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="availabilityNotificationsEnabled", EmitDefaultValue=false)]
        public bool? AvailabilityNotificationsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyntheticPrivateLocationUpdate {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AvailabilityLocationOutage: ").Append(AvailabilityLocationOutage).Append("\n");
            sb.Append("  AvailabilityNodeOutage: ").Append(AvailabilityNodeOutage).Append("\n");
            sb.Append("  LocationNodeOutageDelayInMinutes: ").Append(LocationNodeOutageDelayInMinutes).Append("\n");
            sb.Append("  AvailabilityNotificationsEnabled: ").Append(AvailabilityNotificationsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyntheticPrivateLocationUpdate);
        }

        /// <summary>
        /// Returns true if SyntheticPrivateLocationUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of SyntheticPrivateLocationUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyntheticPrivateLocationUpdate input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && base.Equals(input) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) && base.Equals(input) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && base.Equals(input) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && base.Equals(input) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.AvailabilityLocationOutage == input.AvailabilityLocationOutage ||
                    (this.AvailabilityLocationOutage != null &&
                    this.AvailabilityLocationOutage.Equals(input.AvailabilityLocationOutage))
                ) && base.Equals(input) && 
                (
                    this.AvailabilityNodeOutage == input.AvailabilityNodeOutage ||
                    (this.AvailabilityNodeOutage != null &&
                    this.AvailabilityNodeOutage.Equals(input.AvailabilityNodeOutage))
                ) && base.Equals(input) && 
                (
                    this.LocationNodeOutageDelayInMinutes == input.LocationNodeOutageDelayInMinutes ||
                    (this.LocationNodeOutageDelayInMinutes != null &&
                    this.LocationNodeOutageDelayInMinutes.Equals(input.LocationNodeOutageDelayInMinutes))
                ) && base.Equals(input) && 
                (
                    this.AvailabilityNotificationsEnabled == input.AvailabilityNotificationsEnabled ||
                    (this.AvailabilityNotificationsEnabled != null &&
                    this.AvailabilityNotificationsEnabled.Equals(input.AvailabilityNotificationsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AvailabilityLocationOutage != null)
                    hashCode = hashCode * 59 + this.AvailabilityLocationOutage.GetHashCode();
                if (this.AvailabilityNodeOutage != null)
                    hashCode = hashCode * 59 + this.AvailabilityNodeOutage.GetHashCode();
                if (this.LocationNodeOutageDelayInMinutes != null)
                    hashCode = hashCode * 59 + this.LocationNodeOutageDelayInMinutes.GetHashCode();
                if (this.AvailabilityNotificationsEnabled != null)
                    hashCode = hashCode * 59 + this.AvailabilityNotificationsEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
