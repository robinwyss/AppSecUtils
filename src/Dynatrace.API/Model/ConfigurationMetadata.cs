/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Metadata useful for debugging
    /// </summary>
    [DataContract]
        public partial class ConfigurationMetadata :  IEquatable<ConfigurationMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationMetadata" /> class.
        /// </summary>
        /// <param name="configurationVersions">A sorted list of the version numbers of the configuration..</param>
        /// <param name="currentConfigurationVersions">A sorted list of version numbers of the configuration..</param>
        /// <param name="clusterVersion">Dynatrace version..</param>
        public ConfigurationMetadata(List<long?> configurationVersions = default(List<long?>), List<string> currentConfigurationVersions = default(List<string>), string clusterVersion = default(string))
        {
            this.ConfigurationVersions = configurationVersions;
            this.CurrentConfigurationVersions = currentConfigurationVersions;
            this.ClusterVersion = clusterVersion;
        }
        
        /// <summary>
        /// A sorted list of the version numbers of the configuration.
        /// </summary>
        /// <value>A sorted list of the version numbers of the configuration.</value>
        [DataMember(Name="configurationVersions", EmitDefaultValue=false)]
        public List<long?> ConfigurationVersions { get; set; }

        /// <summary>
        /// A sorted list of version numbers of the configuration.
        /// </summary>
        /// <value>A sorted list of version numbers of the configuration.</value>
        [DataMember(Name="currentConfigurationVersions", EmitDefaultValue=false)]
        public List<string> CurrentConfigurationVersions { get; set; }

        /// <summary>
        /// Dynatrace version.
        /// </summary>
        /// <value>Dynatrace version.</value>
        [DataMember(Name="clusterVersion", EmitDefaultValue=false)]
        public string ClusterVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationMetadata {\n");
            sb.Append("  ConfigurationVersions: ").Append(ConfigurationVersions).Append("\n");
            sb.Append("  CurrentConfigurationVersions: ").Append(CurrentConfigurationVersions).Append("\n");
            sb.Append("  ClusterVersion: ").Append(ClusterVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationMetadata);
        }

        /// <summary>
        /// Returns true if ConfigurationMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationVersions == input.ConfigurationVersions ||
                    this.ConfigurationVersions != null &&
                    input.ConfigurationVersions != null &&
                    this.ConfigurationVersions.SequenceEqual(input.ConfigurationVersions)
                ) && 
                (
                    this.CurrentConfigurationVersions == input.CurrentConfigurationVersions ||
                    this.CurrentConfigurationVersions != null &&
                    input.CurrentConfigurationVersions != null &&
                    this.CurrentConfigurationVersions.SequenceEqual(input.CurrentConfigurationVersions)
                ) && 
                (
                    this.ClusterVersion == input.ClusterVersion ||
                    (this.ClusterVersion != null &&
                    this.ClusterVersion.Equals(input.ClusterVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationVersions != null)
                    hashCode = hashCode * 59 + this.ConfigurationVersions.GetHashCode();
                if (this.CurrentConfigurationVersions != null)
                    hashCode = hashCode * 59 + this.CurrentConfigurationVersions.GetHashCode();
                if (this.ClusterVersion != null)
                    hashCode = hashCode * 59 + this.ClusterVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
