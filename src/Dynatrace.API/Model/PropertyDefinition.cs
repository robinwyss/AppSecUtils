/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of a property in a settings schema.
    /// </summary>
    [DataContract]
        public partial class PropertyDefinition :  IEquatable<PropertyDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinition" /> class.
        /// </summary>
        /// <param name="referencedType">The type referenced by the property value.</param>
        /// <param name="items">items.</param>
        /// <param name="maxObjects">The maximum number of **objects** in a collection property.    Has the value of &#x60;1&#x60; for singletons..</param>
        /// <param name="documentation">An extended description and/or links to documentation..</param>
        /// <param name="precondition">precondition.</param>
        /// <param name="minObjects">The minimum number of **objects** in a collection property..</param>
        /// <param name="constraints">A list of constraints limiting the values to be accepted..</param>
        /// <param name="subType">The subtype of the property&#x27;s value..</param>
        /// <param name="description">A short description of the property..</param>
        /// <param name="metadata">Metadata of the property..</param>
        /// <param name="nullable">The value can (&#x60;true&#x60;) or can&#x27;t (&#x60;false&#x60;) be &#x60;null&#x60;..</param>
        /// <param name="_default">The default value to be used when no value is provided.   If a non-singleton has the value of &#x60;null&#x60;, it means an empty collection..</param>
        /// <param name="type">The type of the property&#x27;s value..</param>
        /// <param name="displayName">The display name of the property..</param>
        public PropertyDefinition(string referencedType = default(string), Item items = default(Item), int? maxObjects = default(int?), string documentation = default(string), Precondition precondition = default(Precondition), int? minObjects = default(int?), List<Constraint> constraints = default(List<Constraint>), string subType = default(string), string description = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), bool? nullable = default(bool?), Object _default = default(Object), Object type = default(Object), string displayName = default(string))
        {
            this.ReferencedType = referencedType;
            this.Items = items;
            this.MaxObjects = maxObjects;
            this.Documentation = documentation;
            this.Precondition = precondition;
            this.MinObjects = minObjects;
            this.Constraints = constraints;
            this.SubType = subType;
            this.Description = description;
            this.Metadata = metadata;
            this.Nullable = nullable;
            this._Default = _default;
            this.Type = type;
            this.DisplayName = displayName;
        }
        
        /// <summary>
        /// The type referenced by the property value
        /// </summary>
        /// <value>The type referenced by the property value</value>
        [DataMember(Name="referencedType", EmitDefaultValue=false)]
        public string ReferencedType { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public Item Items { get; set; }

        /// <summary>
        /// The maximum number of **objects** in a collection property.    Has the value of &#x60;1&#x60; for singletons.
        /// </summary>
        /// <value>The maximum number of **objects** in a collection property.    Has the value of &#x60;1&#x60; for singletons.</value>
        [DataMember(Name="maxObjects", EmitDefaultValue=false)]
        public int? MaxObjects { get; set; }

        /// <summary>
        /// An extended description and/or links to documentation.
        /// </summary>
        /// <value>An extended description and/or links to documentation.</value>
        [DataMember(Name="documentation", EmitDefaultValue=false)]
        public string Documentation { get; set; }

        /// <summary>
        /// Gets or Sets Precondition
        /// </summary>
        [DataMember(Name="precondition", EmitDefaultValue=false)]
        public Precondition Precondition { get; set; }

        /// <summary>
        /// The minimum number of **objects** in a collection property.
        /// </summary>
        /// <value>The minimum number of **objects** in a collection property.</value>
        [DataMember(Name="minObjects", EmitDefaultValue=false)]
        public int? MinObjects { get; set; }

        /// <summary>
        /// A list of constraints limiting the values to be accepted.
        /// </summary>
        /// <value>A list of constraints limiting the values to be accepted.</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// The subtype of the property&#x27;s value.
        /// </summary>
        /// <value>The subtype of the property&#x27;s value.</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// A short description of the property.
        /// </summary>
        /// <value>A short description of the property.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Metadata of the property.
        /// </summary>
        /// <value>Metadata of the property.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The value can (&#x60;true&#x60;) or can&#x27;t (&#x60;false&#x60;) be &#x60;null&#x60;.
        /// </summary>
        /// <value>The value can (&#x60;true&#x60;) or can&#x27;t (&#x60;false&#x60;) be &#x60;null&#x60;.</value>
        [DataMember(Name="nullable", EmitDefaultValue=false)]
        public bool? Nullable { get; set; }

        /// <summary>
        /// The default value to be used when no value is provided.   If a non-singleton has the value of &#x60;null&#x60;, it means an empty collection.
        /// </summary>
        /// <value>The default value to be used when no value is provided.   If a non-singleton has the value of &#x60;null&#x60;, it means an empty collection.</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public Object _Default { get; set; }

        /// <summary>
        /// The type of the property&#x27;s value.
        /// </summary>
        /// <value>The type of the property&#x27;s value.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Object Type { get; set; }

        /// <summary>
        /// The display name of the property.
        /// </summary>
        /// <value>The display name of the property.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyDefinition {\n");
            sb.Append("  ReferencedType: ").Append(ReferencedType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  MaxObjects: ").Append(MaxObjects).Append("\n");
            sb.Append("  Documentation: ").Append(Documentation).Append("\n");
            sb.Append("  Precondition: ").Append(Precondition).Append("\n");
            sb.Append("  MinObjects: ").Append(MinObjects).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Nullable: ").Append(Nullable).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyDefinition);
        }

        /// <summary>
        /// Returns true if PropertyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReferencedType == input.ReferencedType ||
                    (this.ReferencedType != null &&
                    this.ReferencedType.Equals(input.ReferencedType))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.MaxObjects == input.MaxObjects ||
                    (this.MaxObjects != null &&
                    this.MaxObjects.Equals(input.MaxObjects))
                ) && 
                (
                    this.Documentation == input.Documentation ||
                    (this.Documentation != null &&
                    this.Documentation.Equals(input.Documentation))
                ) && 
                (
                    this.Precondition == input.Precondition ||
                    (this.Precondition != null &&
                    this.Precondition.Equals(input.Precondition))
                ) && 
                (
                    this.MinObjects == input.MinObjects ||
                    (this.MinObjects != null &&
                    this.MinObjects.Equals(input.MinObjects))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Nullable == input.Nullable ||
                    (this.Nullable != null &&
                    this.Nullable.Equals(input.Nullable))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferencedType != null)
                    hashCode = hashCode * 59 + this.ReferencedType.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.MaxObjects != null)
                    hashCode = hashCode * 59 + this.MaxObjects.GetHashCode();
                if (this.Documentation != null)
                    hashCode = hashCode * 59 + this.Documentation.GetHashCode();
                if (this.Precondition != null)
                    hashCode = hashCode * 59 + this.Precondition.GetHashCode();
                if (this.MinObjects != null)
                    hashCode = hashCode * 59 + this.MinObjects.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Nullable != null)
                    hashCode = hashCode * 59 + this.Nullable.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
