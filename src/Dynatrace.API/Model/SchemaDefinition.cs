/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of the settings schema.
    /// </summary>
    [DataContract]
        public partial class SchemaDefinition :  IEquatable<SchemaDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaDefinition" /> class.
        /// </summary>
        /// <param name="enums">A list of definitions of enum properties..</param>
        /// <param name="schemaGroup">The group of the configuration element..</param>
        /// <param name="multiObject">Multiple (&#x60;true&#x60;) objects per scope are permitted or a single (&#x60;false&#x60;) object per scope is permitted..</param>
        /// <param name="ordered">If &#x60;true&#x60; the order of objects has semantic significance.   Only applicable when **multiObject** is set to &#x60;true&#x60;..</param>
        /// <param name="maxObjects">The maximum amount of objects per scope.   Only applicable when **multiObject** is set to &#x60;true&#x60;..</param>
        /// <param name="dynatrace">The version of the data format..</param>
        /// <param name="documentation">An extended description of the schema and/or links to documentation..</param>
        /// <param name="allowedScopes">A list of scopes where the schema can be used..</param>
        /// <param name="version">The version of the schema..</param>
        /// <param name="constraints">A list of constrains limiting the values to be accepted by the schema..</param>
        /// <param name="description">A short description of the schema..</param>
        /// <param name="metadata">Metadata of the setting..</param>
        /// <param name="schemaId">The ID of the schema..</param>
        /// <param name="types">A list of definitions of types.    A type is a complex property that contains its own set of subproperties..</param>
        /// <param name="properties">A list of schema&#x27;s properties..</param>
        /// <param name="displayName">The display name of the schema..</param>
        public SchemaDefinition(Dictionary<string, EnumType> enums = default(Dictionary<string, EnumType>), string schemaGroup = default(string), bool? multiObject = default(bool?), bool? ordered = default(bool?), int? maxObjects = default(int?), string dynatrace = default(string), string documentation = default(string), List<string> allowedScopes = default(List<string>), string version = default(string), List<ComplexConstraint> constraints = default(List<ComplexConstraint>), string description = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string schemaId = default(string), Dictionary<string, SchemaType> types = default(Dictionary<string, SchemaType>), Dictionary<string, PropertyDefinition> properties = default(Dictionary<string, PropertyDefinition>), string displayName = default(string))
        {
            this.Enums = enums;
            this.SchemaGroup = schemaGroup;
            this.MultiObject = multiObject;
            this.Ordered = ordered;
            this.MaxObjects = maxObjects;
            this.Dynatrace = dynatrace;
            this.Documentation = documentation;
            this.AllowedScopes = allowedScopes;
            this.Version = version;
            this.Constraints = constraints;
            this.Description = description;
            this.Metadata = metadata;
            this.SchemaId = schemaId;
            this.Types = types;
            this.Properties = properties;
            this.DisplayName = displayName;
        }
        
        /// <summary>
        /// A list of definitions of enum properties.
        /// </summary>
        /// <value>A list of definitions of enum properties.</value>
        [DataMember(Name="enums", EmitDefaultValue=false)]
        public Dictionary<string, EnumType> Enums { get; set; }

        /// <summary>
        /// The group of the configuration element.
        /// </summary>
        /// <value>The group of the configuration element.</value>
        [DataMember(Name="schemaGroup", EmitDefaultValue=false)]
        public string SchemaGroup { get; set; }

        /// <summary>
        /// Multiple (&#x60;true&#x60;) objects per scope are permitted or a single (&#x60;false&#x60;) object per scope is permitted.
        /// </summary>
        /// <value>Multiple (&#x60;true&#x60;) objects per scope are permitted or a single (&#x60;false&#x60;) object per scope is permitted.</value>
        [DataMember(Name="multiObject", EmitDefaultValue=false)]
        public bool? MultiObject { get; set; }

        /// <summary>
        /// If &#x60;true&#x60; the order of objects has semantic significance.   Only applicable when **multiObject** is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60; the order of objects has semantic significance.   Only applicable when **multiObject** is set to &#x60;true&#x60;.</value>
        [DataMember(Name="ordered", EmitDefaultValue=false)]
        public bool? Ordered { get; set; }

        /// <summary>
        /// The maximum amount of objects per scope.   Only applicable when **multiObject** is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>The maximum amount of objects per scope.   Only applicable when **multiObject** is set to &#x60;true&#x60;.</value>
        [DataMember(Name="maxObjects", EmitDefaultValue=false)]
        public int? MaxObjects { get; set; }

        /// <summary>
        /// The version of the data format.
        /// </summary>
        /// <value>The version of the data format.</value>
        [DataMember(Name="dynatrace", EmitDefaultValue=false)]
        public string Dynatrace { get; set; }

        /// <summary>
        /// An extended description of the schema and/or links to documentation.
        /// </summary>
        /// <value>An extended description of the schema and/or links to documentation.</value>
        [DataMember(Name="documentation", EmitDefaultValue=false)]
        public string Documentation { get; set; }

        /// <summary>
        /// A list of scopes where the schema can be used.
        /// </summary>
        /// <value>A list of scopes where the schema can be used.</value>
        [DataMember(Name="allowedScopes", EmitDefaultValue=false)]
        public List<string> AllowedScopes { get; set; }

        /// <summary>
        /// The version of the schema.
        /// </summary>
        /// <value>The version of the schema.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// A list of constrains limiting the values to be accepted by the schema.
        /// </summary>
        /// <value>A list of constrains limiting the values to be accepted by the schema.</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public List<ComplexConstraint> Constraints { get; set; }

        /// <summary>
        /// A short description of the schema.
        /// </summary>
        /// <value>A short description of the schema.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Metadata of the setting.
        /// </summary>
        /// <value>Metadata of the setting.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The ID of the schema.
        /// </summary>
        /// <value>The ID of the schema.</value>
        [DataMember(Name="schemaId", EmitDefaultValue=false)]
        public string SchemaId { get; set; }

        /// <summary>
        /// A list of definitions of types.    A type is a complex property that contains its own set of subproperties.
        /// </summary>
        /// <value>A list of definitions of types.    A type is a complex property that contains its own set of subproperties.</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public Dictionary<string, SchemaType> Types { get; set; }

        /// <summary>
        /// A list of schema&#x27;s properties.
        /// </summary>
        /// <value>A list of schema&#x27;s properties.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, PropertyDefinition> Properties { get; set; }

        /// <summary>
        /// The display name of the schema.
        /// </summary>
        /// <value>The display name of the schema.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemaDefinition {\n");
            sb.Append("  Enums: ").Append(Enums).Append("\n");
            sb.Append("  SchemaGroup: ").Append(SchemaGroup).Append("\n");
            sb.Append("  MultiObject: ").Append(MultiObject).Append("\n");
            sb.Append("  Ordered: ").Append(Ordered).Append("\n");
            sb.Append("  MaxObjects: ").Append(MaxObjects).Append("\n");
            sb.Append("  Dynatrace: ").Append(Dynatrace).Append("\n");
            sb.Append("  Documentation: ").Append(Documentation).Append("\n");
            sb.Append("  AllowedScopes: ").Append(AllowedScopes).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SchemaId: ").Append(SchemaId).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchemaDefinition);
        }

        /// <summary>
        /// Returns true if SchemaDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SchemaDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemaDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enums == input.Enums ||
                    this.Enums != null &&
                    input.Enums != null &&
                    this.Enums.SequenceEqual(input.Enums)
                ) && 
                (
                    this.SchemaGroup == input.SchemaGroup ||
                    (this.SchemaGroup != null &&
                    this.SchemaGroup.Equals(input.SchemaGroup))
                ) && 
                (
                    this.MultiObject == input.MultiObject ||
                    (this.MultiObject != null &&
                    this.MultiObject.Equals(input.MultiObject))
                ) && 
                (
                    this.Ordered == input.Ordered ||
                    (this.Ordered != null &&
                    this.Ordered.Equals(input.Ordered))
                ) && 
                (
                    this.MaxObjects == input.MaxObjects ||
                    (this.MaxObjects != null &&
                    this.MaxObjects.Equals(input.MaxObjects))
                ) && 
                (
                    this.Dynatrace == input.Dynatrace ||
                    (this.Dynatrace != null &&
                    this.Dynatrace.Equals(input.Dynatrace))
                ) && 
                (
                    this.Documentation == input.Documentation ||
                    (this.Documentation != null &&
                    this.Documentation.Equals(input.Documentation))
                ) && 
                (
                    this.AllowedScopes == input.AllowedScopes ||
                    this.AllowedScopes != null &&
                    input.AllowedScopes != null &&
                    this.AllowedScopes.SequenceEqual(input.AllowedScopes)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SchemaId == input.SchemaId ||
                    (this.SchemaId != null &&
                    this.SchemaId.Equals(input.SchemaId))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    input.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enums != null)
                    hashCode = hashCode * 59 + this.Enums.GetHashCode();
                if (this.SchemaGroup != null)
                    hashCode = hashCode * 59 + this.SchemaGroup.GetHashCode();
                if (this.MultiObject != null)
                    hashCode = hashCode * 59 + this.MultiObject.GetHashCode();
                if (this.Ordered != null)
                    hashCode = hashCode * 59 + this.Ordered.GetHashCode();
                if (this.MaxObjects != null)
                    hashCode = hashCode * 59 + this.MaxObjects.GetHashCode();
                if (this.Dynatrace != null)
                    hashCode = hashCode * 59 + this.Dynatrace.GetHashCode();
                if (this.Documentation != null)
                    hashCode = hashCode * 59 + this.Documentation.GetHashCode();
                if (this.AllowedScopes != null)
                    hashCode = hashCode * 59 + this.AllowedScopes.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SchemaId != null)
                    hashCode = hashCode * 59 + this.SchemaId.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
