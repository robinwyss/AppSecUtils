/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The log message in JSON format. Use one object representing a single event or an array of objects representing multiple events. The object might contain the following types of keys (the possible key values are listed below): * Timestamp.  The following formats are supported: UTC milliseconds, RFC3339, and RFC3164. If not set, the current timestamp is used. * Severity. If not set, &#x60;NONE&#x60; is used. * Content. If the content key is not set, the whole JSON is parsed as the content. * Semantic attribute. Only values of the &#x60;String&#x60; type are supported. Semantic attributes are indexed and can be used in queries. These are also displayed in aggregations (facets). If an unsupported key occurs it is not indexed and cannot be used in indexing and aggregations. The length of the value is limited. Any content exceeding the limit is trimmed. Default limits:* Content: 8,192 characters. * Semantic attribute value: 250 characters.Supported timestamp keys: * @timestamp * Timestamp * _timestamp * date * eventTime * published_date * syslog.timestamp * timestampSupported content keys: * body * content * message * payloadSupported severity keys: * level * loglevel * severity * status * syslog.severitySupported semantic attribute keys: * audit.action * audit.identity * audit.result * aws.account.id * aws.arn * aws.log_group * aws.log_stream * aws.region * aws.resource.id * aws.resource.type * aws.service * azure.location * azure.resource.group * azure.resource.id * azure.resource.name * azure.resource.type * azure.subscription * cloud.account.id * cloud.provider * cloud.region * cloud.zone * container.image.name * container.image.tag * container.name * db.cassandra.keyspace * db.connection_string * db.hbase.namespace * db.jdbc.driver_classname * db.mongodb.collection * db.mssql.instance_name * db.name * db.operation * db.redis.database_index * db.statement * db.system * db.user * dt.code.filepath * dt.code.func * dt.code.lineno * dt.code.ns * dt.ctg.calltype * dt.ctg.extendmode * dt.ctg.gatewayurl * dt.ctg.program * dt.ctg.rc * dt.ctg.requesttype * dt.ctg.serverid * dt.ctg.termid * dt.ctg.transid * dt.ctg.userid * dt.entity.cloud_application * dt.entity.cloud_application_instance * dt.entity.cloud_application_namespace * dt.entity.custom_device * dt.entity.host * dt.entity.kubernetes_cluster * dt.entity.kubernetes_node * dt.entity.process_group * dt.entity.process_group_instance * dt.event.group_label * dt.event.key * dt.events.root_cause_relevant * dt.exception.messages * dt.exception.serialized_stacktraces * dt.exception.types * dt.extension.config.id * dt.extension.ds * dt.extension.name * dt.extension.status * dt.host.ip * dt.host.smfid * dt.host.snaid * dt.host_group.id * dt.http.application_id * dt.http.context_root * dt.kubernetes.cluster.name * dt.kubernetes.config.id * dt.kubernetes.event.reason * dt.kubernetes.node.name * dt.kubernetes.node.system_uuid * dt.kubernetes.topmost_controller.kind * dt.kubernetes.workload.kind * dt.kubernetes.workload.name * dt.network_zone.id * dt.os.description * dt.os.type * dt.process.commandline * dt.process.executable * dt.process.name * dt.source_entity * dt.source_entity_name * dt.source_entity_type * faas.id * faas.instance * faas.name * faas.version * gcp.instance.id * gcp.instance.name * gcp.project.id * gcp.region * gcp.resource.type * host.hostname * host.id * host.image.id * host.image.name * host.image.version * host.name * host.type * http.client_ip * http.flavor * http.host * http.method * http.route * http.scheme * http.server_name * http.status_code * http.status_text * http.target * http.url * k8s.cluster.name * k8s.cronjob.name * k8s.cronjob.uid * k8s.daemonset.name * k8s.daemonset.uid * k8s.deployment.name * k8s.deployment.uid * k8s.job.name * k8s.job.uid * k8s.namespace.name * k8s.pod.name * k8s.pod.uid * k8s.replicaset.name * k8s.replicaset.uid * k8s.statefulset.name * k8s.statefulset.uid * log.source * net.host.ip * net.host.name * net.host.port * net.peer.ip * net.peer.name * net.peer.port * net.transport * service.instance.id * service.name * service.namespace * service.version * span.id * trace.id
    /// </summary>
    [DataContract]
        public partial class LogMessageJson :  IEquatable<LogMessageJson>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogMessageJson" /> class.
        /// </summary>
        public LogMessageJson()
        {
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogMessageJson {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogMessageJson);
        }

        /// <summary>
        /// Returns true if LogMessageJson instances are equal
        /// </summary>
        /// <param name="input">Instance of LogMessageJson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogMessageJson input)
        {
            if (input == null)
                return false;

            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
