/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A request to persist a settings object
    /// </summary>
    [DataContract]
        public partial class PersistObjectRequest :  IEquatable<PersistObjectRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersistObjectRequest" /> class.
        /// </summary>
        /// <param name="insertAfter">Only considered if the setting has ordered objects. The objectId after which a new entry should be inserted. If undefined and the setting has ordered instances it will be appended in last position. If defined but empty the object will be placed as the first item..</param>
        /// <param name="schemaVersion">The schema version used to create this object. If omitted the latest known version is used.</param>
        /// <param name="scope">The scope this value will be defined and persisted at (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="schemaId">The schema for which the values are valid (required).</param>
        public PersistObjectRequest(string insertAfter = default(string), string schemaVersion = default(string), string scope = default(string), SettingsValue value = default(SettingsValue), string schemaId = default(string))
        {
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new InvalidDataException("scope is a required property for PersistObjectRequest and cannot be null");
            }
            else
            {
                this.Scope = scope;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for PersistObjectRequest and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "schemaId" is required (not null)
            if (schemaId == null)
            {
                throw new InvalidDataException("schemaId is a required property for PersistObjectRequest and cannot be null");
            }
            else
            {
                this.SchemaId = schemaId;
            }
            this.InsertAfter = insertAfter;
            this.SchemaVersion = schemaVersion;
        }
        
        /// <summary>
        /// Only considered if the setting has ordered objects. The objectId after which a new entry should be inserted. If undefined and the setting has ordered instances it will be appended in last position. If defined but empty the object will be placed as the first item.
        /// </summary>
        /// <value>Only considered if the setting has ordered objects. The objectId after which a new entry should be inserted. If undefined and the setting has ordered instances it will be appended in last position. If defined but empty the object will be placed as the first item.</value>
        [DataMember(Name="insertAfter", EmitDefaultValue=false)]
        public string InsertAfter { get; set; }

        /// <summary>
        /// The schema version used to create this object. If omitted the latest known version is used
        /// </summary>
        /// <value>The schema version used to create this object. If omitted the latest known version is used</value>
        [DataMember(Name="schemaVersion", EmitDefaultValue=false)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// The scope this value will be defined and persisted at
        /// </summary>
        /// <value>The scope this value will be defined and persisted at</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public SettingsValue Value { get; set; }

        /// <summary>
        /// The schema for which the values are valid
        /// </summary>
        /// <value>The schema for which the values are valid</value>
        [DataMember(Name="schemaId", EmitDefaultValue=false)]
        public string SchemaId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersistObjectRequest {\n");
            sb.Append("  InsertAfter: ").Append(InsertAfter).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  SchemaId: ").Append(SchemaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersistObjectRequest);
        }

        /// <summary>
        /// Returns true if PersistObjectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PersistObjectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersistObjectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InsertAfter == input.InsertAfter ||
                    (this.InsertAfter != null &&
                    this.InsertAfter.Equals(input.InsertAfter))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.SchemaId == input.SchemaId ||
                    (this.SchemaId != null &&
                    this.SchemaId.Equals(input.SchemaId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InsertAfter != null)
                    hashCode = hashCode * 59 + this.InsertAfter.GetHashCode();
                if (this.SchemaVersion != null)
                    hashCode = hashCode * 59 + this.SchemaVersion.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.SchemaId != null)
                    hashCode = hashCode * 59 + this.SchemaId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
