/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The event of a security problem.
    /// </summary>
    [DataContract]
        public partial class SecurityProblemEvent :  IEquatable<SecurityProblemEvent>, IValidatableObject
    {
        /// <summary>
        /// The reason of the event creation.
        /// </summary>
        /// <value>The reason of the event creation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReasonEnum
        {
            /// <summary>
            /// Enum CREATED for value: SECURITY_PROBLEM_CREATED
            /// </summary>
            [EnumMember(Value = "SECURITY_PROBLEM_CREATED")]
            CREATED = 1,
            /// <summary>
            /// Enum MUTED for value: SECURITY_PROBLEM_MUTED
            /// </summary>
            [EnumMember(Value = "SECURITY_PROBLEM_MUTED")]
            MUTED = 2,
            /// <summary>
            /// Enum REOPENED for value: SECURITY_PROBLEM_REOPENED
            /// </summary>
            [EnumMember(Value = "SECURITY_PROBLEM_REOPENED")]
            REOPENED = 3,
            /// <summary>
            /// Enum RESOLVED for value: SECURITY_PROBLEM_RESOLVED
            /// </summary>
            [EnumMember(Value = "SECURITY_PROBLEM_RESOLVED")]
            RESOLVED = 4,
            /// <summary>
            /// Enum UNMUTED for value: SECURITY_PROBLEM_UNMUTED
            /// </summary>
            [EnumMember(Value = "SECURITY_PROBLEM_UNMUTED")]
            UNMUTED = 5        }
        /// <summary>
        /// The reason of the event creation.
        /// </summary>
        /// <value>The reason of the event creation.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityProblemEvent" /> class.
        /// </summary>
        /// <param name="riskAssessmentSnapshot">riskAssessmentSnapshot.</param>
        /// <param name="muteState">muteState.</param>
        public SecurityProblemEvent(RiskAssessmentSnapshot riskAssessmentSnapshot = default(RiskAssessmentSnapshot), MuteState muteState = default(MuteState))
        {
            this.RiskAssessmentSnapshot = riskAssessmentSnapshot;
            this.MuteState = muteState;
        }
        
        /// <summary>
        /// The timestamp when the event occurred.
        /// </summary>
        /// <value>The timestamp when the event occurred.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; private set; }


        /// <summary>
        /// Gets or Sets RiskAssessmentSnapshot
        /// </summary>
        [DataMember(Name="riskAssessmentSnapshot", EmitDefaultValue=false)]
        public RiskAssessmentSnapshot RiskAssessmentSnapshot { get; set; }

        /// <summary>
        /// Gets or Sets MuteState
        /// </summary>
        [DataMember(Name="muteState", EmitDefaultValue=false)]
        public MuteState MuteState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityProblemEvent {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RiskAssessmentSnapshot: ").Append(RiskAssessmentSnapshot).Append("\n");
            sb.Append("  MuteState: ").Append(MuteState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityProblemEvent);
        }

        /// <summary>
        /// Returns true if SecurityProblemEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityProblemEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityProblemEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.RiskAssessmentSnapshot == input.RiskAssessmentSnapshot ||
                    (this.RiskAssessmentSnapshot != null &&
                    this.RiskAssessmentSnapshot.Equals(input.RiskAssessmentSnapshot))
                ) && 
                (
                    this.MuteState == input.MuteState ||
                    (this.MuteState != null &&
                    this.MuteState.Equals(input.MuteState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RiskAssessmentSnapshot != null)
                    hashCode = hashCode * 59 + this.RiskAssessmentSnapshot.GetHashCode();
                if (this.MuteState != null)
                    hashCode = hashCode * 59 + this.MuteState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
