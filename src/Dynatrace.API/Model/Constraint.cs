/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A constraint on the values accepted for a settings property.
    /// </summary>
    [DataContract]
        public partial class Constraint :  IEquatable<Constraint>, IValidatableObject
    {
        /// <summary>
        /// The type of the constraint.
        /// </summary>
        /// <value>The type of the constraint.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CUSTOMVALIDATORREF for value: CUSTOM_VALIDATOR_REF
            /// </summary>
            [EnumMember(Value = "CUSTOM_VALIDATOR_REF")]
            CUSTOMVALIDATORREF = 1,
            /// <summary>
            /// Enum LENGTH for value: LENGTH
            /// </summary>
            [EnumMember(Value = "LENGTH")]
            LENGTH = 2,
            /// <summary>
            /// Enum NOTBLANK for value: NOT_BLANK
            /// </summary>
            [EnumMember(Value = "NOT_BLANK")]
            NOTBLANK = 3,
            /// <summary>
            /// Enum NOTEMPTY for value: NOT_EMPTY
            /// </summary>
            [EnumMember(Value = "NOT_EMPTY")]
            NOTEMPTY = 4,
            /// <summary>
            /// Enum NOWHITESPACE for value: NO_WHITESPACE
            /// </summary>
            [EnumMember(Value = "NO_WHITESPACE")]
            NOWHITESPACE = 5,
            /// <summary>
            /// Enum PATTERN for value: PATTERN
            /// </summary>
            [EnumMember(Value = "PATTERN")]
            PATTERN = 6,
            /// <summary>
            /// Enum RANGE for value: RANGE
            /// </summary>
            [EnumMember(Value = "RANGE")]
            RANGE = 7,
            /// <summary>
            /// Enum TRIMMED for value: TRIMMED
            /// </summary>
            [EnumMember(Value = "TRIMMED")]
            TRIMMED = 8,
            /// <summary>
            /// Enum UNIQUE for value: UNIQUE
            /// </summary>
            [EnumMember(Value = "UNIQUE")]
            UNIQUE = 9,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 10        }
        /// <summary>
        /// The type of the constraint.
        /// </summary>
        /// <value>The type of the constraint.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Constraint" /> class.
        /// </summary>
        /// <param name="maxLength">The maximum allowed length of string values..</param>
        /// <param name="minLength">The minimum required length of string values..</param>
        /// <param name="customValidatorId">The ID of a custom validator..</param>
        /// <param name="customMessage">A custom message for invalid values..</param>
        /// <param name="uniqueProperties">A list of properties for which the combination of values must be unique..</param>
        /// <param name="maximum">The maximum allowed value..</param>
        /// <param name="minimum">The minimum allowed value..</param>
        /// <param name="pattern">The regular expression pattern for valid string values..</param>
        /// <param name="type">The type of the constraint..</param>
        public Constraint(int? maxLength = default(int?), int? minLength = default(int?), string customValidatorId = default(string), string customMessage = default(string), List<string> uniqueProperties = default(List<string>), decimal? maximum = default(decimal?), decimal? minimum = default(decimal?), string pattern = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.MaxLength = maxLength;
            this.MinLength = minLength;
            this.CustomValidatorId = customValidatorId;
            this.CustomMessage = customMessage;
            this.UniqueProperties = uniqueProperties;
            this.Maximum = maximum;
            this.Minimum = minimum;
            this.Pattern = pattern;
            this.Type = type;
        }
        
        /// <summary>
        /// The maximum allowed length of string values.
        /// </summary>
        /// <value>The maximum allowed length of string values.</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// The minimum required length of string values.
        /// </summary>
        /// <value>The minimum required length of string values.</value>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// The ID of a custom validator.
        /// </summary>
        /// <value>The ID of a custom validator.</value>
        [DataMember(Name="customValidatorId", EmitDefaultValue=false)]
        public string CustomValidatorId { get; set; }

        /// <summary>
        /// A custom message for invalid values.
        /// </summary>
        /// <value>A custom message for invalid values.</value>
        [DataMember(Name="customMessage", EmitDefaultValue=false)]
        public string CustomMessage { get; set; }

        /// <summary>
        /// A list of properties for which the combination of values must be unique.
        /// </summary>
        /// <value>A list of properties for which the combination of values must be unique.</value>
        [DataMember(Name="uniqueProperties", EmitDefaultValue=false)]
        public List<string> UniqueProperties { get; set; }

        /// <summary>
        /// The maximum allowed value.
        /// </summary>
        /// <value>The maximum allowed value.</value>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// The minimum allowed value.
        /// </summary>
        /// <value>The minimum allowed value.</value>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// The regular expression pattern for valid string values.
        /// </summary>
        /// <value>The regular expression pattern for valid string values.</value>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Constraint {\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  CustomValidatorId: ").Append(CustomValidatorId).Append("\n");
            sb.Append("  CustomMessage: ").Append(CustomMessage).Append("\n");
            sb.Append("  UniqueProperties: ").Append(UniqueProperties).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Constraint);
        }

        /// <summary>
        /// Returns true if Constraint instances are equal
        /// </summary>
        /// <param name="input">Instance of Constraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Constraint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.CustomValidatorId == input.CustomValidatorId ||
                    (this.CustomValidatorId != null &&
                    this.CustomValidatorId.Equals(input.CustomValidatorId))
                ) && 
                (
                    this.CustomMessage == input.CustomMessage ||
                    (this.CustomMessage != null &&
                    this.CustomMessage.Equals(input.CustomMessage))
                ) && 
                (
                    this.UniqueProperties == input.UniqueProperties ||
                    this.UniqueProperties != null &&
                    input.UniqueProperties != null &&
                    this.UniqueProperties.SequenceEqual(input.UniqueProperties)
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.CustomValidatorId != null)
                    hashCode = hashCode * 59 + this.CustomValidatorId.GetHashCode();
                if (this.CustomMessage != null)
                    hashCode = hashCode * 59 + this.CustomMessage.GetHashCode();
                if (this.UniqueProperties != null)
                    hashCode = hashCode * 59 + this.UniqueProperties.GetHashCode();
                if (this.Maximum != null)
                    hashCode = hashCode * 59 + this.Maximum.GetHashCode();
                if (this.Minimum != null)
                    hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
