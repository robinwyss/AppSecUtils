/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Parameters of a new SLO.
    /// </summary>
    [DataContract]
        public partial class SloCreate :  IEquatable<SloCreate>, IValidatableObject
    {
        /// <summary>
        /// The evaluation type of the SLO.
        /// </summary>
        /// <value>The evaluation type of the SLO.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EvaluationTypeEnum
        {
            /// <summary>
            /// Enum AGGREGATE for value: AGGREGATE
            /// </summary>
            [EnumMember(Value = "AGGREGATE")]
            AGGREGATE = 1        }
        /// <summary>
        /// The evaluation type of the SLO.
        /// </summary>
        /// <value>The evaluation type of the SLO.</value>
        [DataMember(Name="evaluationType", EmitDefaultValue=false)]
        public EvaluationTypeEnum? EvaluationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SloCreate" /> class.
        /// </summary>
        /// <param name="enabled">The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;)..</param>
        /// <param name="name">The name of the SLO..</param>
        /// <param name="customDescription">The custom description of the SLO (optional)..</param>
        /// <param name="metricExpression">The percentage-based metric expression for the calculation of the SLO. This is not usable yet as it requires some server-side enablement to work..</param>
        /// <param name="evaluationType">The evaluation type of the SLO..</param>
        /// <param name="filter">The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)..</param>
        /// <param name="target">The target value of the SLO..</param>
        /// <param name="warning">The warning value of the SLO.  At warning state the SLO is still fulfilled but is getting close to failure..</param>
        /// <param name="timeframe">The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector..</param>
        /// <param name="useRateMetric">The type of the metric to use for SLO calculation: * &#x60;true&#x60;: An existing percentage-based metric. * &#x60;false&#x60;: A ratio of two metrics. For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call..</param>
        /// <param name="metricRate">The percentage-based metric for the calculation of the SLO. Required when the **useRateMetric** is set to &#x60;true&#x60;..</param>
        /// <param name="metricNumerator">The metric for the count of successes (the numerator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;..</param>
        /// <param name="metricDenominator">The total count metric (the denominator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;..</param>
        public SloCreate(bool? enabled = default(bool?), string name = default(string), string customDescription = default(string), string metricExpression = default(string), EvaluationTypeEnum? evaluationType = default(EvaluationTypeEnum?), string filter = default(string), double? target = default(double?), double? warning = default(double?), string timeframe = default(string), bool? useRateMetric = default(bool?), string metricRate = default(string), string metricNumerator = default(string), string metricDenominator = default(string))
        {
            this.Enabled = enabled;
            this.Name = name;
            this.CustomDescription = customDescription;
            this.MetricExpression = metricExpression;
            this.EvaluationType = evaluationType;
            this.Filter = filter;
            this.Target = target;
            this.Warning = warning;
            this.Timeframe = timeframe;
            this.UseRateMetric = useRateMetric;
            this.MetricRate = metricRate;
            this.MetricNumerator = metricNumerator;
            this.MetricDenominator = metricDenominator;
        }
        
        /// <summary>
        /// The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The name of the SLO.
        /// </summary>
        /// <value>The name of the SLO.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The custom description of the SLO (optional).
        /// </summary>
        /// <value>The custom description of the SLO (optional).</value>
        [DataMember(Name="customDescription", EmitDefaultValue=false)]
        public string CustomDescription { get; set; }

        /// <summary>
        /// The percentage-based metric expression for the calculation of the SLO. This is not usable yet as it requires some server-side enablement to work.
        /// </summary>
        /// <value>The percentage-based metric expression for the calculation of the SLO. This is not usable yet as it requires some server-side enablement to work.</value>
        [DataMember(Name="metricExpression", EmitDefaultValue=false)]
        public string MetricExpression { get; set; }


        /// <summary>
        /// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).
        /// </summary>
        /// <value>The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).</value>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public string Filter { get; set; }

        /// <summary>
        /// The target value of the SLO.
        /// </summary>
        /// <value>The target value of the SLO.</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public double? Target { get; set; }

        /// <summary>
        /// The warning value of the SLO.  At warning state the SLO is still fulfilled but is getting close to failure.
        /// </summary>
        /// <value>The warning value of the SLO.  At warning state the SLO is still fulfilled but is getting close to failure.</value>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public double? Warning { get; set; }

        /// <summary>
        /// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
        /// </summary>
        /// <value>The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.</value>
        [DataMember(Name="timeframe", EmitDefaultValue=false)]
        public string Timeframe { get; set; }

        /// <summary>
        /// The type of the metric to use for SLO calculation: * &#x60;true&#x60;: An existing percentage-based metric. * &#x60;false&#x60;: A ratio of two metrics. For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.
        /// </summary>
        /// <value>The type of the metric to use for SLO calculation: * &#x60;true&#x60;: An existing percentage-based metric. * &#x60;false&#x60;: A ratio of two metrics. For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.</value>
        [DataMember(Name="useRateMetric", EmitDefaultValue=false)]
        public bool? UseRateMetric { get; set; }

        /// <summary>
        /// The percentage-based metric for the calculation of the SLO. Required when the **useRateMetric** is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>The percentage-based metric for the calculation of the SLO. Required when the **useRateMetric** is set to &#x60;true&#x60;.</value>
        [DataMember(Name="metricRate", EmitDefaultValue=false)]
        public string MetricRate { get; set; }

        /// <summary>
        /// The metric for the count of successes (the numerator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The metric for the count of successes (the numerator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="metricNumerator", EmitDefaultValue=false)]
        public string MetricNumerator { get; set; }

        /// <summary>
        /// The total count metric (the denominator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The total count metric (the denominator in rate calculation). Required when the **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="metricDenominator", EmitDefaultValue=false)]
        public string MetricDenominator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SloCreate {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomDescription: ").Append(CustomDescription).Append("\n");
            sb.Append("  MetricExpression: ").Append(MetricExpression).Append("\n");
            sb.Append("  EvaluationType: ").Append(EvaluationType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("  Timeframe: ").Append(Timeframe).Append("\n");
            sb.Append("  UseRateMetric: ").Append(UseRateMetric).Append("\n");
            sb.Append("  MetricRate: ").Append(MetricRate).Append("\n");
            sb.Append("  MetricNumerator: ").Append(MetricNumerator).Append("\n");
            sb.Append("  MetricDenominator: ").Append(MetricDenominator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SloCreate);
        }

        /// <summary>
        /// Returns true if SloCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SloCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SloCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CustomDescription == input.CustomDescription ||
                    (this.CustomDescription != null &&
                    this.CustomDescription.Equals(input.CustomDescription))
                ) && 
                (
                    this.MetricExpression == input.MetricExpression ||
                    (this.MetricExpression != null &&
                    this.MetricExpression.Equals(input.MetricExpression))
                ) && 
                (
                    this.EvaluationType == input.EvaluationType ||
                    (this.EvaluationType != null &&
                    this.EvaluationType.Equals(input.EvaluationType))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                ) && 
                (
                    this.Timeframe == input.Timeframe ||
                    (this.Timeframe != null &&
                    this.Timeframe.Equals(input.Timeframe))
                ) && 
                (
                    this.UseRateMetric == input.UseRateMetric ||
                    (this.UseRateMetric != null &&
                    this.UseRateMetric.Equals(input.UseRateMetric))
                ) && 
                (
                    this.MetricRate == input.MetricRate ||
                    (this.MetricRate != null &&
                    this.MetricRate.Equals(input.MetricRate))
                ) && 
                (
                    this.MetricNumerator == input.MetricNumerator ||
                    (this.MetricNumerator != null &&
                    this.MetricNumerator.Equals(input.MetricNumerator))
                ) && 
                (
                    this.MetricDenominator == input.MetricDenominator ||
                    (this.MetricDenominator != null &&
                    this.MetricDenominator.Equals(input.MetricDenominator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CustomDescription != null)
                    hashCode = hashCode * 59 + this.CustomDescription.GetHashCode();
                if (this.MetricExpression != null)
                    hashCode = hashCode * 59 + this.MetricExpression.GetHashCode();
                if (this.EvaluationType != null)
                    hashCode = hashCode * 59 + this.EvaluationType.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                if (this.Timeframe != null)
                    hashCode = hashCode * 59 + this.Timeframe.GetHashCode();
                if (this.UseRateMetric != null)
                    hashCode = hashCode * 59 + this.UseRateMetric.GetHashCode();
                if (this.MetricRate != null)
                    hashCode = hashCode * 59 + this.MetricRate.GetHashCode();
                if (this.MetricNumerator != null)
                    hashCode = hashCode * 59 + this.MetricNumerator.GetHashCode();
                if (this.MetricDenominator != null)
                    hashCode = hashCode * 59 + this.MetricDenominator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
