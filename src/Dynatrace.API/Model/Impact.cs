/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The impact analysis of the problem on other entities/users.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "impactType")]
    [JsonSubtypes.KnownSubType(typeof(ServiceImpact), "ServiceImpact")]
    [JsonSubtypes.KnownSubType(typeof(CustomApplicationImpact), "CustomApplicationImpact")]
    [JsonSubtypes.KnownSubType(typeof(MobileImpact), "MobileImpact")]
    [JsonSubtypes.KnownSubType(typeof(ApplicationImpact), "ApplicationImpact")]
        public partial class Impact :  IEquatable<Impact>, IValidatableObject
    {
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;SERVICE&#x60; -&gt; ServiceImpact * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact * &#x60;MOBILE&#x60; -&gt; MobileImpact * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;SERVICE&#x60; -&gt; ServiceImpact * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact * &#x60;MOBILE&#x60; -&gt; MobileImpact * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ImpactTypeEnum
        {
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 1,
            /// <summary>
            /// Enum CUSTOMAPPLICATION for value: CUSTOM_APPLICATION
            /// </summary>
            [EnumMember(Value = "CUSTOM_APPLICATION")]
            CUSTOMAPPLICATION = 2,
            /// <summary>
            /// Enum MOBILE for value: MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILE = 3,
            /// <summary>
            /// Enum SERVICE for value: SERVICE
            /// </summary>
            [EnumMember(Value = "SERVICE")]
            SERVICE = 4        }
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;SERVICE&#x60; -&gt; ServiceImpact * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact * &#x60;MOBILE&#x60; -&gt; MobileImpact * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;SERVICE&#x60; -&gt; ServiceImpact * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact * &#x60;MOBILE&#x60; -&gt; MobileImpact * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact </value>
        [DataMember(Name="impactType", EmitDefaultValue=false)]
        public ImpactTypeEnum ImpactType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Impact" /> class.
        /// </summary>
        /// <param name="impactType">Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;SERVICE&#x60; -&gt; ServiceImpact * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact * &#x60;MOBILE&#x60; -&gt; MobileImpact * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact  (required).</param>
        /// <param name="impactedEntity">impactedEntity (required).</param>
        /// <param name="estimatedAffectedUsers">The estimated number of affected users. (required).</param>
        public Impact(ImpactTypeEnum impactType = default(ImpactTypeEnum), EntityStub impactedEntity = default(EntityStub), long? estimatedAffectedUsers = default(long?))
        {
            // to ensure "impactType" is required (not null)
            if (impactType == null)
            {
                throw new InvalidDataException("impactType is a required property for Impact and cannot be null");
            }
            else
            {
                this.ImpactType = impactType;
            }
            // to ensure "impactedEntity" is required (not null)
            if (impactedEntity == null)
            {
                throw new InvalidDataException("impactedEntity is a required property for Impact and cannot be null");
            }
            else
            {
                this.ImpactedEntity = impactedEntity;
            }
            // to ensure "estimatedAffectedUsers" is required (not null)
            if (estimatedAffectedUsers == null)
            {
                throw new InvalidDataException("estimatedAffectedUsers is a required property for Impact and cannot be null");
            }
            else
            {
                this.EstimatedAffectedUsers = estimatedAffectedUsers;
            }
        }
        

        /// <summary>
        /// Gets or Sets ImpactedEntity
        /// </summary>
        [DataMember(Name="impactedEntity", EmitDefaultValue=false)]
        public EntityStub ImpactedEntity { get; set; }

        /// <summary>
        /// The estimated number of affected users.
        /// </summary>
        /// <value>The estimated number of affected users.</value>
        [DataMember(Name="estimatedAffectedUsers", EmitDefaultValue=false)]
        public long? EstimatedAffectedUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Impact {\n");
            sb.Append("  ImpactType: ").Append(ImpactType).Append("\n");
            sb.Append("  ImpactedEntity: ").Append(ImpactedEntity).Append("\n");
            sb.Append("  EstimatedAffectedUsers: ").Append(EstimatedAffectedUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Impact);
        }

        /// <summary>
        /// Returns true if Impact instances are equal
        /// </summary>
        /// <param name="input">Instance of Impact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Impact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImpactType == input.ImpactType ||
                    (this.ImpactType != null &&
                    this.ImpactType.Equals(input.ImpactType))
                ) && 
                (
                    this.ImpactedEntity == input.ImpactedEntity ||
                    (this.ImpactedEntity != null &&
                    this.ImpactedEntity.Equals(input.ImpactedEntity))
                ) && 
                (
                    this.EstimatedAffectedUsers == input.EstimatedAffectedUsers ||
                    (this.EstimatedAffectedUsers != null &&
                    this.EstimatedAffectedUsers.Equals(input.EstimatedAffectedUsers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImpactType != null)
                    hashCode = hashCode * 59 + this.ImpactType.GetHashCode();
                if (this.ImpactedEntity != null)
                    hashCode = hashCode * 59 + this.ImpactedEntity.GetHashCode();
                if (this.EstimatedAffectedUsers != null)
                    hashCode = hashCode * 59 + this.EstimatedAffectedUsers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
