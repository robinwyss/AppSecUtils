/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The metric evidence of the problem.   A change of metric behavior that indicates the problem and/or is its root cause.
    /// </summary>
    [DataContract]
        public partial class MetricEvidence : Evidence,  IEquatable<MetricEvidence>, IValidatableObject
    {
        /// <summary>
        /// The unit of the metric.
        /// </summary>
        /// <value>The unit of the metric.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitEnum
        {
            /// <summary>
            /// Enum Bit for value: Bit
            /// </summary>
            [EnumMember(Value = "Bit")]
            Bit = 1,
            /// <summary>
            /// Enum BitPerHour for value: BitPerHour
            /// </summary>
            [EnumMember(Value = "BitPerHour")]
            BitPerHour = 2,
            /// <summary>
            /// Enum BitPerMinute for value: BitPerMinute
            /// </summary>
            [EnumMember(Value = "BitPerMinute")]
            BitPerMinute = 3,
            /// <summary>
            /// Enum BitPerSecond for value: BitPerSecond
            /// </summary>
            [EnumMember(Value = "BitPerSecond")]
            BitPerSecond = 4,
            /// <summary>
            /// Enum Byte for value: Byte
            /// </summary>
            [EnumMember(Value = "Byte")]
            Byte = 5,
            /// <summary>
            /// Enum BytePerHour for value: BytePerHour
            /// </summary>
            [EnumMember(Value = "BytePerHour")]
            BytePerHour = 6,
            /// <summary>
            /// Enum BytePerMinute for value: BytePerMinute
            /// </summary>
            [EnumMember(Value = "BytePerMinute")]
            BytePerMinute = 7,
            /// <summary>
            /// Enum BytePerSecond for value: BytePerSecond
            /// </summary>
            [EnumMember(Value = "BytePerSecond")]
            BytePerSecond = 8,
            /// <summary>
            /// Enum Cores for value: Cores
            /// </summary>
            [EnumMember(Value = "Cores")]
            Cores = 9,
            /// <summary>
            /// Enum Count for value: Count
            /// </summary>
            [EnumMember(Value = "Count")]
            Count = 10,
            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 11,
            /// <summary>
            /// Enum DecibelMilliWatt for value: DecibelMilliWatt
            /// </summary>
            [EnumMember(Value = "DecibelMilliWatt")]
            DecibelMilliWatt = 12,
            /// <summary>
            /// Enum GibiByte for value: GibiByte
            /// </summary>
            [EnumMember(Value = "GibiByte")]
            GibiByte = 13,
            /// <summary>
            /// Enum Giga for value: Giga
            /// </summary>
            [EnumMember(Value = "Giga")]
            Giga = 14,
            /// <summary>
            /// Enum GigaByte for value: GigaByte
            /// </summary>
            [EnumMember(Value = "GigaByte")]
            GigaByte = 15,
            /// <summary>
            /// Enum Hour for value: Hour
            /// </summary>
            [EnumMember(Value = "Hour")]
            Hour = 16,
            /// <summary>
            /// Enum KibiByte for value: KibiByte
            /// </summary>
            [EnumMember(Value = "KibiByte")]
            KibiByte = 17,
            /// <summary>
            /// Enum KibiBytePerHour for value: KibiBytePerHour
            /// </summary>
            [EnumMember(Value = "KibiBytePerHour")]
            KibiBytePerHour = 18,
            /// <summary>
            /// Enum KibiBytePerMinute for value: KibiBytePerMinute
            /// </summary>
            [EnumMember(Value = "KibiBytePerMinute")]
            KibiBytePerMinute = 19,
            /// <summary>
            /// Enum KibiBytePerSecond for value: KibiBytePerSecond
            /// </summary>
            [EnumMember(Value = "KibiBytePerSecond")]
            KibiBytePerSecond = 20,
            /// <summary>
            /// Enum Kilo for value: Kilo
            /// </summary>
            [EnumMember(Value = "Kilo")]
            Kilo = 21,
            /// <summary>
            /// Enum KiloByte for value: KiloByte
            /// </summary>
            [EnumMember(Value = "KiloByte")]
            KiloByte = 22,
            /// <summary>
            /// Enum KiloBytePerHour for value: KiloBytePerHour
            /// </summary>
            [EnumMember(Value = "KiloBytePerHour")]
            KiloBytePerHour = 23,
            /// <summary>
            /// Enum KiloBytePerMinute for value: KiloBytePerMinute
            /// </summary>
            [EnumMember(Value = "KiloBytePerMinute")]
            KiloBytePerMinute = 24,
            /// <summary>
            /// Enum KiloBytePerSecond for value: KiloBytePerSecond
            /// </summary>
            [EnumMember(Value = "KiloBytePerSecond")]
            KiloBytePerSecond = 25,
            /// <summary>
            /// Enum MSU for value: MSU
            /// </summary>
            [EnumMember(Value = "MSU")]
            MSU = 26,
            /// <summary>
            /// Enum MebiByte for value: MebiByte
            /// </summary>
            [EnumMember(Value = "MebiByte")]
            MebiByte = 27,
            /// <summary>
            /// Enum MebiBytePerHour for value: MebiBytePerHour
            /// </summary>
            [EnumMember(Value = "MebiBytePerHour")]
            MebiBytePerHour = 28,
            /// <summary>
            /// Enum MebiBytePerMinute for value: MebiBytePerMinute
            /// </summary>
            [EnumMember(Value = "MebiBytePerMinute")]
            MebiBytePerMinute = 29,
            /// <summary>
            /// Enum MebiBytePerSecond for value: MebiBytePerSecond
            /// </summary>
            [EnumMember(Value = "MebiBytePerSecond")]
            MebiBytePerSecond = 30,
            /// <summary>
            /// Enum Mega for value: Mega
            /// </summary>
            [EnumMember(Value = "Mega")]
            Mega = 31,
            /// <summary>
            /// Enum MegaByte for value: MegaByte
            /// </summary>
            [EnumMember(Value = "MegaByte")]
            MegaByte = 32,
            /// <summary>
            /// Enum MegaBytePerHour for value: MegaBytePerHour
            /// </summary>
            [EnumMember(Value = "MegaBytePerHour")]
            MegaBytePerHour = 33,
            /// <summary>
            /// Enum MegaBytePerMinute for value: MegaBytePerMinute
            /// </summary>
            [EnumMember(Value = "MegaBytePerMinute")]
            MegaBytePerMinute = 34,
            /// <summary>
            /// Enum MegaBytePerSecond for value: MegaBytePerSecond
            /// </summary>
            [EnumMember(Value = "MegaBytePerSecond")]
            MegaBytePerSecond = 35,
            /// <summary>
            /// Enum MicroSecond for value: MicroSecond
            /// </summary>
            [EnumMember(Value = "MicroSecond")]
            MicroSecond = 36,
            /// <summary>
            /// Enum MilliCores for value: MilliCores
            /// </summary>
            [EnumMember(Value = "MilliCores")]
            MilliCores = 37,
            /// <summary>
            /// Enum MilliSecond for value: MilliSecond
            /// </summary>
            [EnumMember(Value = "MilliSecond")]
            MilliSecond = 38,
            /// <summary>
            /// Enum MilliSecondPerMinute for value: MilliSecondPerMinute
            /// </summary>
            [EnumMember(Value = "MilliSecondPerMinute")]
            MilliSecondPerMinute = 39,
            /// <summary>
            /// Enum Minute for value: Minute
            /// </summary>
            [EnumMember(Value = "Minute")]
            Minute = 40,
            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 41,
            /// <summary>
            /// Enum NanoSecond for value: NanoSecond
            /// </summary>
            [EnumMember(Value = "NanoSecond")]
            NanoSecond = 42,
            /// <summary>
            /// Enum NanoSecondPerMinute for value: NanoSecondPerMinute
            /// </summary>
            [EnumMember(Value = "NanoSecondPerMinute")]
            NanoSecondPerMinute = 43,
            /// <summary>
            /// Enum NotApplicable for value: NotApplicable
            /// </summary>
            [EnumMember(Value = "NotApplicable")]
            NotApplicable = 44,
            /// <summary>
            /// Enum PerHour for value: PerHour
            /// </summary>
            [EnumMember(Value = "PerHour")]
            PerHour = 45,
            /// <summary>
            /// Enum PerMinute for value: PerMinute
            /// </summary>
            [EnumMember(Value = "PerMinute")]
            PerMinute = 46,
            /// <summary>
            /// Enum PerSecond for value: PerSecond
            /// </summary>
            [EnumMember(Value = "PerSecond")]
            PerSecond = 47,
            /// <summary>
            /// Enum Percent for value: Percent
            /// </summary>
            [EnumMember(Value = "Percent")]
            Percent = 48,
            /// <summary>
            /// Enum Pixel for value: Pixel
            /// </summary>
            [EnumMember(Value = "Pixel")]
            Pixel = 49,
            /// <summary>
            /// Enum Promille for value: Promille
            /// </summary>
            [EnumMember(Value = "Promille")]
            Promille = 50,
            /// <summary>
            /// Enum Ratio for value: Ratio
            /// </summary>
            [EnumMember(Value = "Ratio")]
            Ratio = 51,
            /// <summary>
            /// Enum Second for value: Second
            /// </summary>
            [EnumMember(Value = "Second")]
            Second = 52,
            /// <summary>
            /// Enum State for value: State
            /// </summary>
            [EnumMember(Value = "State")]
            State = 53,
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 54,
            /// <summary>
            /// Enum Week for value: Week
            /// </summary>
            [EnumMember(Value = "Week")]
            Week = 55,
            /// <summary>
            /// Enum Year for value: Year
            /// </summary>
            [EnumMember(Value = "Year")]
            Year = 56        }
        /// <summary>
        /// The unit of the metric.
        /// </summary>
        /// <value>The unit of the metric.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricEvidence" /> class.
        /// </summary>
        /// <param name="valueAfterChangePoint">The metric&#x27;s value after the problem start. (required).</param>
        /// <param name="valueBeforeChangePoint">The metric&#x27;s value before the problem start. (required).</param>
        /// <param name="metricId">The ID of the metric. (required).</param>
        /// <param name="endTime">The end time of the evidence, in UTC milliseconds.  The value &#x60;null&#x60; indicates that the evidence is still open. (required).</param>
        /// <param name="unit">The unit of the metric. (required).</param>
        public MetricEvidence(float? valueAfterChangePoint = default(float?), float? valueBeforeChangePoint = default(float?), string metricId = default(string), long? endTime = default(long?), UnitEnum unit = default(UnitEnum), EvidenceTypeEnum evidenceType = default(EvidenceTypeEnum), string displayName = default(string), EntityStub entity = default(EntityStub), EntityStub groupingEntity = default(EntityStub), bool? rootCauseRelevant = default(bool?), long? startTime = default(long?)) : base(evidenceType, displayName, entity, groupingEntity, rootCauseRelevant, startTime)
        {
            // to ensure "valueAfterChangePoint" is required (not null)
            if (valueAfterChangePoint == null)
            {
                throw new InvalidDataException("valueAfterChangePoint is a required property for MetricEvidence and cannot be null");
            }
            else
            {
                this.ValueAfterChangePoint = valueAfterChangePoint;
            }
            // to ensure "valueBeforeChangePoint" is required (not null)
            if (valueBeforeChangePoint == null)
            {
                throw new InvalidDataException("valueBeforeChangePoint is a required property for MetricEvidence and cannot be null");
            }
            else
            {
                this.ValueBeforeChangePoint = valueBeforeChangePoint;
            }
            // to ensure "metricId" is required (not null)
            if (metricId == null)
            {
                throw new InvalidDataException("metricId is a required property for MetricEvidence and cannot be null");
            }
            else
            {
                this.MetricId = metricId;
            }
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for MetricEvidence and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for MetricEvidence and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
        }
        
        /// <summary>
        /// The metric&#x27;s value after the problem start.
        /// </summary>
        /// <value>The metric&#x27;s value after the problem start.</value>
        [DataMember(Name="valueAfterChangePoint", EmitDefaultValue=false)]
        public float? ValueAfterChangePoint { get; set; }

        /// <summary>
        /// The metric&#x27;s value before the problem start.
        /// </summary>
        /// <value>The metric&#x27;s value before the problem start.</value>
        [DataMember(Name="valueBeforeChangePoint", EmitDefaultValue=false)]
        public float? ValueBeforeChangePoint { get; set; }

        /// <summary>
        /// The ID of the metric.
        /// </summary>
        /// <value>The ID of the metric.</value>
        [DataMember(Name="metricId", EmitDefaultValue=false)]
        public string MetricId { get; set; }

        /// <summary>
        /// The end time of the evidence, in UTC milliseconds.  The value &#x60;null&#x60; indicates that the evidence is still open.
        /// </summary>
        /// <value>The end time of the evidence, in UTC milliseconds.  The value &#x60;null&#x60; indicates that the evidence is still open.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public long? EndTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricEvidence {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ValueAfterChangePoint: ").Append(ValueAfterChangePoint).Append("\n");
            sb.Append("  ValueBeforeChangePoint: ").Append(ValueBeforeChangePoint).Append("\n");
            sb.Append("  MetricId: ").Append(MetricId).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricEvidence);
        }

        /// <summary>
        /// Returns true if MetricEvidence instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricEvidence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricEvidence input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ValueAfterChangePoint == input.ValueAfterChangePoint ||
                    (this.ValueAfterChangePoint != null &&
                    this.ValueAfterChangePoint.Equals(input.ValueAfterChangePoint))
                ) && base.Equals(input) && 
                (
                    this.ValueBeforeChangePoint == input.ValueBeforeChangePoint ||
                    (this.ValueBeforeChangePoint != null &&
                    this.ValueBeforeChangePoint.Equals(input.ValueBeforeChangePoint))
                ) && base.Equals(input) && 
                (
                    this.MetricId == input.MetricId ||
                    (this.MetricId != null &&
                    this.MetricId.Equals(input.MetricId))
                ) && base.Equals(input) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && base.Equals(input) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ValueAfterChangePoint != null)
                    hashCode = hashCode * 59 + this.ValueAfterChangePoint.GetHashCode();
                if (this.ValueBeforeChangePoint != null)
                    hashCode = hashCode * 59 + this.ValueBeforeChangePoint.GetHashCode();
                if (this.MetricId != null)
                    hashCode = hashCode * 59 + this.MetricId.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
