/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A precondition for visibility of a property.
    /// </summary>
    [DataContract]
        public partial class Precondition :  IEquatable<Precondition>, IValidatableObject
    {
        /// <summary>
        /// The type of the precondition.
        /// </summary>
        /// <value>The type of the precondition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,
            /// <summary>
            /// Enum EQUALS for value: EQUALS
            /// </summary>
            [EnumMember(Value = "EQUALS")]
            EQUALS = 2,
            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 3,
            /// <summary>
            /// Enum NOT for value: NOT
            /// </summary>
            [EnumMember(Value = "NOT")]
            NOT = 4,
            /// <summary>
            /// Enum NULL for value: NULL
            /// </summary>
            [EnumMember(Value = "NULL")]
            NULL = 5,
            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 6        }
        /// <summary>
        /// The type of the precondition.
        /// </summary>
        /// <value>The type of the precondition.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Precondition" /> class.
        /// </summary>
        /// <param name="precondition">precondition.</param>
        /// <param name="preconditions">A list of child preconditions to be evaluated.   Only applicable to properties of the &#x60;AND&#x60; and &#x60;OR&#x60; types..</param>
        /// <param name="expectedValue">The expected value of the property.   Only applicable to properties of the &#x60;EQUALS&#x60; type..</param>
        /// <param name="expectedValues">A list of valid values of the property.   Only applicable to properties of the &#x60;IN&#x60; type..</param>
        /// <param name="property">The property to be evaluated..</param>
        /// <param name="type">The type of the precondition..</param>
        public Precondition(Precondition precondition = default(Precondition), List<Precondition> preconditions = default(List<Precondition>), Object expectedValue = default(Object), List<Object> expectedValues = default(List<Object>), string property = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this._Precondition = precondition;
            this.Preconditions = preconditions;
            this.ExpectedValue = expectedValue;
            this.ExpectedValues = expectedValues;
            this.Property = property;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets _Precondition
        /// </summary>
        [DataMember(Name="precondition", EmitDefaultValue=false)]
        public Precondition _Precondition { get; set; }

        /// <summary>
        /// A list of child preconditions to be evaluated.   Only applicable to properties of the &#x60;AND&#x60; and &#x60;OR&#x60; types.
        /// </summary>
        /// <value>A list of child preconditions to be evaluated.   Only applicable to properties of the &#x60;AND&#x60; and &#x60;OR&#x60; types.</value>
        [DataMember(Name="preconditions", EmitDefaultValue=false)]
        public List<Precondition> Preconditions { get; set; }

        /// <summary>
        /// The expected value of the property.   Only applicable to properties of the &#x60;EQUALS&#x60; type.
        /// </summary>
        /// <value>The expected value of the property.   Only applicable to properties of the &#x60;EQUALS&#x60; type.</value>
        [DataMember(Name="expectedValue", EmitDefaultValue=false)]
        public Object ExpectedValue { get; set; }

        /// <summary>
        /// A list of valid values of the property.   Only applicable to properties of the &#x60;IN&#x60; type.
        /// </summary>
        /// <value>A list of valid values of the property.   Only applicable to properties of the &#x60;IN&#x60; type.</value>
        [DataMember(Name="expectedValues", EmitDefaultValue=false)]
        public List<Object> ExpectedValues { get; set; }

        /// <summary>
        /// The property to be evaluated.
        /// </summary>
        /// <value>The property to be evaluated.</value>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public string Property { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Precondition {\n");
            sb.Append("  _Precondition: ").Append(_Precondition).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  ExpectedValues: ").Append(ExpectedValues).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Precondition);
        }

        /// <summary>
        /// Returns true if Precondition instances are equal
        /// </summary>
        /// <param name="input">Instance of Precondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Precondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Precondition == input._Precondition ||
                    (this._Precondition != null &&
                    this._Precondition.Equals(input._Precondition))
                ) && 
                (
                    this.Preconditions == input.Preconditions ||
                    this.Preconditions != null &&
                    input.Preconditions != null &&
                    this.Preconditions.SequenceEqual(input.Preconditions)
                ) && 
                (
                    this.ExpectedValue == input.ExpectedValue ||
                    (this.ExpectedValue != null &&
                    this.ExpectedValue.Equals(input.ExpectedValue))
                ) && 
                (
                    this.ExpectedValues == input.ExpectedValues ||
                    this.ExpectedValues != null &&
                    input.ExpectedValues != null &&
                    this.ExpectedValues.SequenceEqual(input.ExpectedValues)
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Precondition != null)
                    hashCode = hashCode * 59 + this._Precondition.GetHashCode();
                if (this.Preconditions != null)
                    hashCode = hashCode * 59 + this.Preconditions.GetHashCode();
                if (this.ExpectedValue != null)
                    hashCode = hashCode * 59 + this.ExpectedValue.GetHashCode();
                if (this.ExpectedValues != null)
                    hashCode = hashCode * 59 + this.ExpectedValues.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
