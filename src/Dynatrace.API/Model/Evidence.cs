/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// An evidence of a root cause.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "evidenceType")]
    [JsonSubtypes.KnownSubType(typeof(AvailabilityEvidence), "AvailabilityEvidence")]
    [JsonSubtypes.KnownSubType(typeof(TransactionalEvidence), "TransactionalEvidence")]
    [JsonSubtypes.KnownSubType(typeof(MetricEvidence), "MetricEvidence")]
    [JsonSubtypes.KnownSubType(typeof(EventEvidence), "EventEvidence")]
    [JsonSubtypes.KnownSubType(typeof(MaintenanceWindowEvidence), "MaintenanceWindowEvidence")]
        public partial class Evidence :  IEquatable<Evidence>, IValidatableObject
    {
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EvidenceTypeEnum
        {
            /// <summary>
            /// Enum AVAILABILITYEVIDENCE for value: AVAILABILITY_EVIDENCE
            /// </summary>
            [EnumMember(Value = "AVAILABILITY_EVIDENCE")]
            AVAILABILITYEVIDENCE = 1,
            /// <summary>
            /// Enum EVENT for value: EVENT
            /// </summary>
            [EnumMember(Value = "EVENT")]
            EVENT = 2,
            /// <summary>
            /// Enum MAINTENANCEWINDOW for value: MAINTENANCE_WINDOW
            /// </summary>
            [EnumMember(Value = "MAINTENANCE_WINDOW")]
            MAINTENANCEWINDOW = 3,
            /// <summary>
            /// Enum METRIC for value: METRIC
            /// </summary>
            [EnumMember(Value = "METRIC")]
            METRIC = 4,
            /// <summary>
            /// Enum TRANSACTIONAL for value: TRANSACTIONAL
            /// </summary>
            [EnumMember(Value = "TRANSACTIONAL")]
            TRANSACTIONAL = 5        }
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  </value>
        [DataMember(Name="evidenceType", EmitDefaultValue=false)]
        public EvidenceTypeEnum EvidenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Evidence" /> class.
        /// </summary>
        /// <param name="evidenceType">Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence   (required).</param>
        /// <param name="displayName">The display name of the evidence. (required).</param>
        /// <param name="entity">entity (required).</param>
        /// <param name="groupingEntity">groupingEntity.</param>
        /// <param name="rootCauseRelevant">The evidence is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) a part of the root cause. (required).</param>
        /// <param name="startTime">The start time of the evidence, in UTC milliseconds. (required).</param>
        public Evidence(EvidenceTypeEnum evidenceType = default(EvidenceTypeEnum), string displayName = default(string), EntityStub entity = default(EntityStub), EntityStub groupingEntity = default(EntityStub), bool? rootCauseRelevant = default(bool?), long? startTime = default(long?))
        {
            // to ensure "evidenceType" is required (not null)
            if (evidenceType == null)
            {
                throw new InvalidDataException("evidenceType is a required property for Evidence and cannot be null");
            }
            else
            {
                this.EvidenceType = evidenceType;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for Evidence and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "entity" is required (not null)
            if (entity == null)
            {
                throw new InvalidDataException("entity is a required property for Evidence and cannot be null");
            }
            else
            {
                this.Entity = entity;
            }
            // to ensure "rootCauseRelevant" is required (not null)
            if (rootCauseRelevant == null)
            {
                throw new InvalidDataException("rootCauseRelevant is a required property for Evidence and cannot be null");
            }
            else
            {
                this.RootCauseRelevant = rootCauseRelevant;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for Evidence and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            this.GroupingEntity = groupingEntity;
        }
        

        /// <summary>
        /// The display name of the evidence.
        /// </summary>
        /// <value>The display name of the evidence.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public EntityStub Entity { get; set; }

        /// <summary>
        /// Gets or Sets GroupingEntity
        /// </summary>
        [DataMember(Name="groupingEntity", EmitDefaultValue=false)]
        public EntityStub GroupingEntity { get; set; }

        /// <summary>
        /// The evidence is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) a part of the root cause.
        /// </summary>
        /// <value>The evidence is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) a part of the root cause.</value>
        [DataMember(Name="rootCauseRelevant", EmitDefaultValue=false)]
        public bool? RootCauseRelevant { get; set; }

        /// <summary>
        /// The start time of the evidence, in UTC milliseconds.
        /// </summary>
        /// <value>The start time of the evidence, in UTC milliseconds.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Evidence {\n");
            sb.Append("  EvidenceType: ").Append(EvidenceType).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  GroupingEntity: ").Append(GroupingEntity).Append("\n");
            sb.Append("  RootCauseRelevant: ").Append(RootCauseRelevant).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Evidence);
        }

        /// <summary>
        /// Returns true if Evidence instances are equal
        /// </summary>
        /// <param name="input">Instance of Evidence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Evidence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EvidenceType == input.EvidenceType ||
                    (this.EvidenceType != null &&
                    this.EvidenceType.Equals(input.EvidenceType))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.GroupingEntity == input.GroupingEntity ||
                    (this.GroupingEntity != null &&
                    this.GroupingEntity.Equals(input.GroupingEntity))
                ) && 
                (
                    this.RootCauseRelevant == input.RootCauseRelevant ||
                    (this.RootCauseRelevant != null &&
                    this.RootCauseRelevant.Equals(input.RootCauseRelevant))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EvidenceType != null)
                    hashCode = hashCode * 59 + this.EvidenceType.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Entity != null)
                    hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.GroupingEntity != null)
                    hashCode = hashCode * 59 + this.GroupingEntity.GetHashCode();
                if (this.RootCauseRelevant != null)
                    hashCode = hashCode * 59 + this.RootCauseRelevant.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
