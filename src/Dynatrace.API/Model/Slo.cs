/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Parameters of a service-level objective (SLO).
    /// </summary>
    [DataContract]
        public partial class Slo :  IEquatable<Slo>, IValidatableObject
    {
        /// <summary>
        /// The evaluation type of the SLO.
        /// </summary>
        /// <value>The evaluation type of the SLO.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EvaluationTypeEnum
        {
            /// <summary>
            /// Enum AGGREGATE for value: AGGREGATE
            /// </summary>
            [EnumMember(Value = "AGGREGATE")]
            AGGREGATE = 1        }
        /// <summary>
        /// The evaluation type of the SLO.
        /// </summary>
        /// <value>The evaluation type of the SLO.</value>
        [DataMember(Name="evaluationType", EmitDefaultValue=false)]
        public EvaluationTypeEnum? EvaluationType { get; set; }
        /// <summary>
        /// The status of the calculated SLO.
        /// </summary>
        /// <value>The status of the calculated SLO.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum FAILURE for value: FAILURE
            /// </summary>
            [EnumMember(Value = "FAILURE")]
            FAILURE = 1,
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 2,
            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 3        }
        /// <summary>
        /// The status of the calculated SLO.
        /// </summary>
        /// <value>The status of the calculated SLO.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The error of the SLO calculation.   If the value differs from &#x60;NONE&#x60; there&#x27;s something wrong with the SLO calculation.
        /// </summary>
        /// <value>The error of the SLO calculation.   If the value differs from &#x60;NONE&#x60; there&#x27;s something wrong with the SLO calculation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ErrorEnum
        {
            /// <summary>
            /// Enum DIFFERENTENTITYTYPEINMETRICS for value: DIFFERENT_ENTITY_TYPE_IN_METRICS
            /// </summary>
            [EnumMember(Value = "DIFFERENT_ENTITY_TYPE_IN_METRICS")]
            DIFFERENTENTITYTYPEINMETRICS = 1,
            /// <summary>
            /// Enum EVALUATIONTIMEFRAMEOUTOFBOUNDS for value: EVALUATION_TIMEFRAME_OUT_OF_BOUNDS
            /// </summary>
            [EnumMember(Value = "EVALUATION_TIMEFRAME_OUT_OF_BOUNDS")]
            EVALUATIONTIMEFRAMEOUTOFBOUNDS = 2,
            /// <summary>
            /// Enum FILTERMATCHESINCONDITIONLIMITEXCEEDED for value: FILTER_MATCHES_IN_CONDITION_LIMIT_EXCEEDED
            /// </summary>
            [EnumMember(Value = "FILTER_MATCHES_IN_CONDITION_LIMIT_EXCEEDED")]
            FILTERMATCHESINCONDITIONLIMITEXCEEDED = 3,
            /// <summary>
            /// Enum INTERNALERROR for value: INTERNAL_ERROR
            /// </summary>
            [EnumMember(Value = "INTERNAL_ERROR")]
            INTERNALERROR = 4,
            /// <summary>
            /// Enum INVALIDENTITYSELECTOR for value: INVALID_ENTITY_SELECTOR
            /// </summary>
            [EnumMember(Value = "INVALID_ENTITY_SELECTOR")]
            INVALIDENTITYSELECTOR = 5,
            /// <summary>
            /// Enum INVALIDMETRICDENOMINATOR for value: INVALID_METRIC_DENOMINATOR
            /// </summary>
            [EnumMember(Value = "INVALID_METRIC_DENOMINATOR")]
            INVALIDMETRICDENOMINATOR = 6,
            /// <summary>
            /// Enum INVALIDMETRICNUMERATOR for value: INVALID_METRIC_NUMERATOR
            /// </summary>
            [EnumMember(Value = "INVALID_METRIC_NUMERATOR")]
            INVALIDMETRICNUMERATOR = 7,
            /// <summary>
            /// Enum INVALIDMETRICSELECTOR for value: INVALID_METRIC_SELECTOR
            /// </summary>
            [EnumMember(Value = "INVALID_METRIC_SELECTOR")]
            INVALIDMETRICSELECTOR = 8,
            /// <summary>
            /// Enum INVALIDTIMEFRAME for value: INVALID_TIMEFRAME
            /// </summary>
            [EnumMember(Value = "INVALID_TIMEFRAME")]
            INVALIDTIMEFRAME = 9,
            /// <summary>
            /// Enum METRICSNOTRESOLVED for value: METRICS_NOT_RESOLVED
            /// </summary>
            [EnumMember(Value = "METRICS_NOT_RESOLVED")]
            METRICSNOTRESOLVED = 10,
            /// <summary>
            /// Enum METRICSNODATA for value: METRICS_NO_DATA
            /// </summary>
            [EnumMember(Value = "METRICS_NO_DATA")]
            METRICSNODATA = 11,
            /// <summary>
            /// Enum METRICDENOMINATORNOTRESOLVED for value: METRIC_DENOMINATOR_NOT_RESOLVED
            /// </summary>
            [EnumMember(Value = "METRIC_DENOMINATOR_NOT_RESOLVED")]
            METRICDENOMINATORNOTRESOLVED = 12,
            /// <summary>
            /// Enum METRICDENOMINATORNODATA for value: METRIC_DENOMINATOR_NO_DATA
            /// </summary>
            [EnumMember(Value = "METRIC_DENOMINATOR_NO_DATA")]
            METRICDENOMINATORNODATA = 13,
            /// <summary>
            /// Enum METRICDENOMINATORNODATAPOINTS for value: METRIC_DENOMINATOR_NO_DATA_POINTS
            /// </summary>
            [EnumMember(Value = "METRIC_DENOMINATOR_NO_DATA_POINTS")]
            METRICDENOMINATORNODATAPOINTS = 14,
            /// <summary>
            /// Enum METRICDENOMINATORZERO for value: METRIC_DENOMINATOR_ZERO
            /// </summary>
            [EnumMember(Value = "METRIC_DENOMINATOR_ZERO")]
            METRICDENOMINATORZERO = 15,
            /// <summary>
            /// Enum METRICEXPRESSIONNOTRESOLVED for value: METRIC_EXPRESSION_NOT_RESOLVED
            /// </summary>
            [EnumMember(Value = "METRIC_EXPRESSION_NOT_RESOLVED")]
            METRICEXPRESSIONNOTRESOLVED = 16,
            /// <summary>
            /// Enum METRICEXPRESSIONNODATA for value: METRIC_EXPRESSION_NO_DATA
            /// </summary>
            [EnumMember(Value = "METRIC_EXPRESSION_NO_DATA")]
            METRICEXPRESSIONNODATA = 17,
            /// <summary>
            /// Enum METRICEXPRESSIONNODATAPOINTS for value: METRIC_EXPRESSION_NO_DATA_POINTS
            /// </summary>
            [EnumMember(Value = "METRIC_EXPRESSION_NO_DATA_POINTS")]
            METRICEXPRESSIONNODATAPOINTS = 18,
            /// <summary>
            /// Enum METRICGENERICTSMFAULT for value: METRIC_GENERIC_TSM_FAULT
            /// </summary>
            [EnumMember(Value = "METRIC_GENERIC_TSM_FAULT")]
            METRICGENERICTSMFAULT = 19,
            /// <summary>
            /// Enum METRICNUMERATORNOTRESOLVED for value: METRIC_NUMERATOR_NOT_RESOLVED
            /// </summary>
            [EnumMember(Value = "METRIC_NUMERATOR_NOT_RESOLVED")]
            METRICNUMERATORNOTRESOLVED = 20,
            /// <summary>
            /// Enum METRICNUMERATORNODATA for value: METRIC_NUMERATOR_NO_DATA
            /// </summary>
            [EnumMember(Value = "METRIC_NUMERATOR_NO_DATA")]
            METRICNUMERATORNODATA = 21,
            /// <summary>
            /// Enum METRICNUMERATORNODATAPOINTS for value: METRIC_NUMERATOR_NO_DATA_POINTS
            /// </summary>
            [EnumMember(Value = "METRIC_NUMERATOR_NO_DATA_POINTS")]
            METRICNUMERATORNODATAPOINTS = 22,
            /// <summary>
            /// Enum METRICRATENOTRESOLVED for value: METRIC_RATE_NOT_RESOLVED
            /// </summary>
            [EnumMember(Value = "METRIC_RATE_NOT_RESOLVED")]
            METRICRATENOTRESOLVED = 23,
            /// <summary>
            /// Enum METRICRATENODATA for value: METRIC_RATE_NO_DATA
            /// </summary>
            [EnumMember(Value = "METRIC_RATE_NO_DATA")]
            METRICRATENODATA = 24,
            /// <summary>
            /// Enum METRICRATENODATAPOINTS for value: METRIC_RATE_NO_DATA_POINTS
            /// </summary>
            [EnumMember(Value = "METRIC_RATE_NO_DATA_POINTS")]
            METRICRATENODATAPOINTS = 25,
            /// <summary>
            /// Enum METRICTOOMANYRESULTS for value: METRIC_TOO_MANY_RESULTS
            /// </summary>
            [EnumMember(Value = "METRIC_TOO_MANY_RESULTS")]
            METRICTOOMANYRESULTS = 26,
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 27        }
        /// <summary>
        /// The error of the SLO calculation.   If the value differs from &#x60;NONE&#x60; there&#x27;s something wrong with the SLO calculation.
        /// </summary>
        /// <value>The error of the SLO calculation.   If the value differs from &#x60;NONE&#x60; there&#x27;s something wrong with the SLO calculation.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorEnum? Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Slo" /> class.
        /// </summary>
        /// <param name="useRateMetric">The type of the metric to use for SLO calculation:   * &#x60;true&#x60;: An existing percentage-based metric.  * &#x60;false&#x60;: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call..</param>
        /// <param name="metricRate">The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to &#x60;true&#x60;..</param>
        /// <param name="metricNumerator">The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;..</param>
        /// <param name="metricDenominator">The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;..</param>
        /// <param name="numeratorValue">The numerator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;..</param>
        /// <param name="evaluatedPercentage">The calculated value of the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with SLO calculation; in that case check the value of the **error** parameter..</param>
        /// <param name="denominatorValue">The denominator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;..</param>
        /// <param name="relatedOpenProblems">Number of OPEN problems related to the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with fetching SLO related problems..</param>
        /// <param name="errorBudget">The error budget of the calculated SLO.   The error budget is the difference between the calculated and target values. A positive number means all is good; a negative number means trouble..</param>
        /// <param name="evaluationType">The evaluation type of the SLO..</param>
        /// <param name="timeframe">The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector..</param>
        /// <param name="filter">The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)..</param>
        /// <param name="description">A short description of the SLO..</param>
        /// <param name="enabled">The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;)..</param>
        /// <param name="status">The status of the calculated SLO..</param>
        /// <param name="warning">The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure..</param>
        /// <param name="error">The error of the SLO calculation.   If the value differs from &#x60;NONE&#x60; there&#x27;s something wrong with the SLO calculation..</param>
        /// <param name="name">The name of the SLO..</param>
        /// <param name="id">The ID of the SLO.</param>
        /// <param name="target">The target value of the SLO..</param>
        public Slo(bool? useRateMetric = default(bool?), string metricRate = default(string), string metricNumerator = default(string), string metricDenominator = default(string), double? numeratorValue = default(double?), double? evaluatedPercentage = default(double?), double? denominatorValue = default(double?), int? relatedOpenProblems = default(int?), double? errorBudget = default(double?), EvaluationTypeEnum? evaluationType = default(EvaluationTypeEnum?), string timeframe = default(string), string filter = default(string), string description = default(string), bool? enabled = default(bool?), StatusEnum? status = default(StatusEnum?), double? warning = default(double?), ErrorEnum? error = default(ErrorEnum?), string name = default(string), Guid? id = default(Guid?), double? target = default(double?))
        {
            this.UseRateMetric = useRateMetric;
            this.MetricRate = metricRate;
            this.MetricNumerator = metricNumerator;
            this.MetricDenominator = metricDenominator;
            this.NumeratorValue = numeratorValue;
            this.EvaluatedPercentage = evaluatedPercentage;
            this.DenominatorValue = denominatorValue;
            this.RelatedOpenProblems = relatedOpenProblems;
            this.ErrorBudget = errorBudget;
            this.EvaluationType = evaluationType;
            this.Timeframe = timeframe;
            this.Filter = filter;
            this.Description = description;
            this.Enabled = enabled;
            this.Status = status;
            this.Warning = warning;
            this.Error = error;
            this.Name = name;
            this.Id = id;
            this.Target = target;
        }
        
        /// <summary>
        /// The type of the metric to use for SLO calculation:   * &#x60;true&#x60;: An existing percentage-based metric.  * &#x60;false&#x60;: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.
        /// </summary>
        /// <value>The type of the metric to use for SLO calculation:   * &#x60;true&#x60;: An existing percentage-based metric.  * &#x60;false&#x60;: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.</value>
        [DataMember(Name="useRateMetric", EmitDefaultValue=false)]
        public bool? UseRateMetric { get; set; }

        /// <summary>
        /// The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to &#x60;true&#x60;.</value>
        [DataMember(Name="metricRate", EmitDefaultValue=false)]
        public string MetricRate { get; set; }

        /// <summary>
        /// The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="metricNumerator", EmitDefaultValue=false)]
        public string MetricNumerator { get; set; }

        /// <summary>
        /// The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="metricDenominator", EmitDefaultValue=false)]
        public string MetricDenominator { get; set; }

        /// <summary>
        /// The numerator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The numerator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="numeratorValue", EmitDefaultValue=false)]
        public double? NumeratorValue { get; set; }

        /// <summary>
        /// The calculated value of the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with SLO calculation; in that case check the value of the **error** parameter.
        /// </summary>
        /// <value>The calculated value of the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with SLO calculation; in that case check the value of the **error** parameter.</value>
        [DataMember(Name="evaluatedPercentage", EmitDefaultValue=false)]
        public double? EvaluatedPercentage { get; set; }

        /// <summary>
        /// The denominator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The denominator value used to evaluate the SLO when **useRateMetric** is set to &#x60;false&#x60;.</value>
        [DataMember(Name="denominatorValue", EmitDefaultValue=false)]
        public double? DenominatorValue { get; set; }

        /// <summary>
        /// Number of OPEN problems related to the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with fetching SLO related problems.
        /// </summary>
        /// <value>Number of OPEN problems related to the SLO.   Has the value of &#x60;-1&#x60; if there&#x27;s an error with fetching SLO related problems.</value>
        [DataMember(Name="relatedOpenProblems", EmitDefaultValue=false)]
        public int? RelatedOpenProblems { get; set; }

        /// <summary>
        /// The error budget of the calculated SLO.   The error budget is the difference between the calculated and target values. A positive number means all is good; a negative number means trouble.
        /// </summary>
        /// <value>The error budget of the calculated SLO.   The error budget is the difference between the calculated and target values. A positive number means all is good; a negative number means trouble.</value>
        [DataMember(Name="errorBudget", EmitDefaultValue=false)]
        public double? ErrorBudget { get; set; }


        /// <summary>
        /// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
        /// </summary>
        /// <value>The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.</value>
        [DataMember(Name="timeframe", EmitDefaultValue=false)]
        public string Timeframe { get; set; }

        /// <summary>
        /// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).
        /// </summary>
        /// <value>The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).</value>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public string Filter { get; set; }

        /// <summary>
        /// A short description of the SLO.
        /// </summary>
        /// <value>A short description of the SLO.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The SLO is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure.
        /// </summary>
        /// <value>The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure.</value>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public double? Warning { get; set; }


        /// <summary>
        /// The name of the SLO.
        /// </summary>
        /// <value>The name of the SLO.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the SLO
        /// </summary>
        /// <value>The ID of the SLO</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The target value of the SLO.
        /// </summary>
        /// <value>The target value of the SLO.</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public double? Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Slo {\n");
            sb.Append("  UseRateMetric: ").Append(UseRateMetric).Append("\n");
            sb.Append("  MetricRate: ").Append(MetricRate).Append("\n");
            sb.Append("  MetricNumerator: ").Append(MetricNumerator).Append("\n");
            sb.Append("  MetricDenominator: ").Append(MetricDenominator).Append("\n");
            sb.Append("  NumeratorValue: ").Append(NumeratorValue).Append("\n");
            sb.Append("  EvaluatedPercentage: ").Append(EvaluatedPercentage).Append("\n");
            sb.Append("  DenominatorValue: ").Append(DenominatorValue).Append("\n");
            sb.Append("  RelatedOpenProblems: ").Append(RelatedOpenProblems).Append("\n");
            sb.Append("  ErrorBudget: ").Append(ErrorBudget).Append("\n");
            sb.Append("  EvaluationType: ").Append(EvaluationType).Append("\n");
            sb.Append("  Timeframe: ").Append(Timeframe).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Slo);
        }

        /// <summary>
        /// Returns true if Slo instances are equal
        /// </summary>
        /// <param name="input">Instance of Slo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Slo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseRateMetric == input.UseRateMetric ||
                    (this.UseRateMetric != null &&
                    this.UseRateMetric.Equals(input.UseRateMetric))
                ) && 
                (
                    this.MetricRate == input.MetricRate ||
                    (this.MetricRate != null &&
                    this.MetricRate.Equals(input.MetricRate))
                ) && 
                (
                    this.MetricNumerator == input.MetricNumerator ||
                    (this.MetricNumerator != null &&
                    this.MetricNumerator.Equals(input.MetricNumerator))
                ) && 
                (
                    this.MetricDenominator == input.MetricDenominator ||
                    (this.MetricDenominator != null &&
                    this.MetricDenominator.Equals(input.MetricDenominator))
                ) && 
                (
                    this.NumeratorValue == input.NumeratorValue ||
                    (this.NumeratorValue != null &&
                    this.NumeratorValue.Equals(input.NumeratorValue))
                ) && 
                (
                    this.EvaluatedPercentage == input.EvaluatedPercentage ||
                    (this.EvaluatedPercentage != null &&
                    this.EvaluatedPercentage.Equals(input.EvaluatedPercentage))
                ) && 
                (
                    this.DenominatorValue == input.DenominatorValue ||
                    (this.DenominatorValue != null &&
                    this.DenominatorValue.Equals(input.DenominatorValue))
                ) && 
                (
                    this.RelatedOpenProblems == input.RelatedOpenProblems ||
                    (this.RelatedOpenProblems != null &&
                    this.RelatedOpenProblems.Equals(input.RelatedOpenProblems))
                ) && 
                (
                    this.ErrorBudget == input.ErrorBudget ||
                    (this.ErrorBudget != null &&
                    this.ErrorBudget.Equals(input.ErrorBudget))
                ) && 
                (
                    this.EvaluationType == input.EvaluationType ||
                    (this.EvaluationType != null &&
                    this.EvaluationType.Equals(input.EvaluationType))
                ) && 
                (
                    this.Timeframe == input.Timeframe ||
                    (this.Timeframe != null &&
                    this.Timeframe.Equals(input.Timeframe))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseRateMetric != null)
                    hashCode = hashCode * 59 + this.UseRateMetric.GetHashCode();
                if (this.MetricRate != null)
                    hashCode = hashCode * 59 + this.MetricRate.GetHashCode();
                if (this.MetricNumerator != null)
                    hashCode = hashCode * 59 + this.MetricNumerator.GetHashCode();
                if (this.MetricDenominator != null)
                    hashCode = hashCode * 59 + this.MetricDenominator.GetHashCode();
                if (this.NumeratorValue != null)
                    hashCode = hashCode * 59 + this.NumeratorValue.GetHashCode();
                if (this.EvaluatedPercentage != null)
                    hashCode = hashCode * 59 + this.EvaluatedPercentage.GetHashCode();
                if (this.DenominatorValue != null)
                    hashCode = hashCode * 59 + this.DenominatorValue.GetHashCode();
                if (this.RelatedOpenProblems != null)
                    hashCode = hashCode * 59 + this.RelatedOpenProblems.GetHashCode();
                if (this.ErrorBudget != null)
                    hashCode = hashCode * 59 + this.ErrorBudget.GetHashCode();
                if (this.EvaluationType != null)
                    hashCode = hashCode * 59 + this.EvaluationType.GetHashCode();
                if (this.Timeframe != null)
                    hashCode = hashCode * 59 + this.Timeframe.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
