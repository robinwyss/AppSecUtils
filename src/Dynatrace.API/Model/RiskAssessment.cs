/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Risk assessment of a security problem.
    /// </summary>
    [DataContract]
        public partial class RiskAssessment :  IEquatable<RiskAssessment>, IValidatableObject
    {
        /// <summary>
        /// The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
        /// </summary>
        /// <value>The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RiskLevelEnum
        {
            /// <summary>
            /// Enum CRITICAL for value: CRITICAL
            /// </summary>
            [EnumMember(Value = "CRITICAL")]
            CRITICAL = 1,
            /// <summary>
            /// Enum HIGH for value: HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGH = 2,
            /// <summary>
            /// Enum LOW for value: LOW
            /// </summary>
            [EnumMember(Value = "LOW")]
            LOW = 3,
            /// <summary>
            /// Enum MEDIUM for value: MEDIUM
            /// </summary>
            [EnumMember(Value = "MEDIUM")]
            MEDIUM = 4,
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 5        }
        /// <summary>
        /// The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
        /// </summary>
        /// <value>The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.</value>
        [DataMember(Name="riskLevel", EmitDefaultValue=false)]
        public RiskLevelEnum? RiskLevel { get; set; }
        /// <summary>
        /// The risk level from the CVSS score.
        /// </summary>
        /// <value>The risk level from the CVSS score.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BaseRiskLevelEnum
        {
            /// <summary>
            /// Enum CRITICAL for value: CRITICAL
            /// </summary>
            [EnumMember(Value = "CRITICAL")]
            CRITICAL = 1,
            /// <summary>
            /// Enum HIGH for value: HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGH = 2,
            /// <summary>
            /// Enum LOW for value: LOW
            /// </summary>
            [EnumMember(Value = "LOW")]
            LOW = 3,
            /// <summary>
            /// Enum MEDIUM for value: MEDIUM
            /// </summary>
            [EnumMember(Value = "MEDIUM")]
            MEDIUM = 4,
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 5        }
        /// <summary>
        /// The risk level from the CVSS score.
        /// </summary>
        /// <value>The risk level from the CVSS score.</value>
        [DataMember(Name="baseRiskLevel", EmitDefaultValue=false)]
        public BaseRiskLevelEnum? BaseRiskLevel { get; set; }
        /// <summary>
        /// The level of exposure of affected entities.
        /// </summary>
        /// <value>The level of exposure of affected entities.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExposureEnum
        {
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 1,
            /// <summary>
            /// Enum NOTDETECTED for value: NOT_DETECTED
            /// </summary>
            [EnumMember(Value = "NOT_DETECTED")]
            NOTDETECTED = 2,
            /// <summary>
            /// Enum PUBLICNETWORK for value: PUBLIC_NETWORK
            /// </summary>
            [EnumMember(Value = "PUBLIC_NETWORK")]
            PUBLICNETWORK = 3        }
        /// <summary>
        /// The level of exposure of affected entities.
        /// </summary>
        /// <value>The level of exposure of affected entities.</value>
        [DataMember(Name="exposure", EmitDefaultValue=false)]
        public ExposureEnum? Exposure { get; set; }
        /// <summary>
        /// The reachability of related data assets by affected entities.
        /// </summary>
        /// <value>The reachability of related data assets by affected entities.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DataAssetsEnum
        {
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 1,
            /// <summary>
            /// Enum NOTDETECTED for value: NOT_DETECTED
            /// </summary>
            [EnumMember(Value = "NOT_DETECTED")]
            NOTDETECTED = 2,
            /// <summary>
            /// Enum REACHABLE for value: REACHABLE
            /// </summary>
            [EnumMember(Value = "REACHABLE")]
            REACHABLE = 3        }
        /// <summary>
        /// The reachability of related data assets by affected entities.
        /// </summary>
        /// <value>The reachability of related data assets by affected entities.</value>
        [DataMember(Name="dataAssets", EmitDefaultValue=false)]
        public DataAssetsEnum? DataAssets { get; set; }
        /// <summary>
        /// The availability status of public exploits.
        /// </summary>
        /// <value>The availability status of public exploits.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PublicExploitEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 2        }
        /// <summary>
        /// The availability status of public exploits.
        /// </summary>
        /// <value>The availability status of public exploits.</value>
        [DataMember(Name="publicExploit", EmitDefaultValue=false)]
        public PublicExploitEnum? PublicExploit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskAssessment" /> class.
        /// </summary>
        public RiskAssessment()
        {
        }
        

        /// <summary>
        /// The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.
        /// </summary>
        /// <value>The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.</value>
        [DataMember(Name="riskScore", EmitDefaultValue=false)]
        public float? RiskScore { get; private set; }

        /// <summary>
        /// The attack vector calculated by DT based on the CVSS attack vector.
        /// </summary>
        /// <value>The attack vector calculated by DT based on the CVSS attack vector.</value>
        [DataMember(Name="riskVector", EmitDefaultValue=false)]
        public string RiskVector { get; private set; }


        /// <summary>
        /// The risk score (1-10) from the CVSS score.
        /// </summary>
        /// <value>The risk score (1-10) from the CVSS score.</value>
        [DataMember(Name="baseRiskScore", EmitDefaultValue=false)]
        public float? BaseRiskScore { get; private set; }

        /// <summary>
        /// The original attack vector of the CVSS assessment.
        /// </summary>
        /// <value>The original attack vector of the CVSS assessment.</value>
        [DataMember(Name="baseRiskVector", EmitDefaultValue=false)]
        public string BaseRiskVector { get; private set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskAssessment {\n");
            sb.Append("  RiskLevel: ").Append(RiskLevel).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  RiskVector: ").Append(RiskVector).Append("\n");
            sb.Append("  BaseRiskLevel: ").Append(BaseRiskLevel).Append("\n");
            sb.Append("  BaseRiskScore: ").Append(BaseRiskScore).Append("\n");
            sb.Append("  BaseRiskVector: ").Append(BaseRiskVector).Append("\n");
            sb.Append("  Exposure: ").Append(Exposure).Append("\n");
            sb.Append("  DataAssets: ").Append(DataAssets).Append("\n");
            sb.Append("  PublicExploit: ").Append(PublicExploit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskAssessment);
        }

        /// <summary>
        /// Returns true if RiskAssessment instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskAssessment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskAssessment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RiskLevel == input.RiskLevel ||
                    (this.RiskLevel != null &&
                    this.RiskLevel.Equals(input.RiskLevel))
                ) && 
                (
                    this.RiskScore == input.RiskScore ||
                    (this.RiskScore != null &&
                    this.RiskScore.Equals(input.RiskScore))
                ) && 
                (
                    this.RiskVector == input.RiskVector ||
                    (this.RiskVector != null &&
                    this.RiskVector.Equals(input.RiskVector))
                ) && 
                (
                    this.BaseRiskLevel == input.BaseRiskLevel ||
                    (this.BaseRiskLevel != null &&
                    this.BaseRiskLevel.Equals(input.BaseRiskLevel))
                ) && 
                (
                    this.BaseRiskScore == input.BaseRiskScore ||
                    (this.BaseRiskScore != null &&
                    this.BaseRiskScore.Equals(input.BaseRiskScore))
                ) && 
                (
                    this.BaseRiskVector == input.BaseRiskVector ||
                    (this.BaseRiskVector != null &&
                    this.BaseRiskVector.Equals(input.BaseRiskVector))
                ) && 
                (
                    this.Exposure == input.Exposure ||
                    (this.Exposure != null &&
                    this.Exposure.Equals(input.Exposure))
                ) && 
                (
                    this.DataAssets == input.DataAssets ||
                    (this.DataAssets != null &&
                    this.DataAssets.Equals(input.DataAssets))
                ) && 
                (
                    this.PublicExploit == input.PublicExploit ||
                    (this.PublicExploit != null &&
                    this.PublicExploit.Equals(input.PublicExploit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RiskLevel != null)
                    hashCode = hashCode * 59 + this.RiskLevel.GetHashCode();
                if (this.RiskScore != null)
                    hashCode = hashCode * 59 + this.RiskScore.GetHashCode();
                if (this.RiskVector != null)
                    hashCode = hashCode * 59 + this.RiskVector.GetHashCode();
                if (this.BaseRiskLevel != null)
                    hashCode = hashCode * 59 + this.BaseRiskLevel.GetHashCode();
                if (this.BaseRiskScore != null)
                    hashCode = hashCode * 59 + this.BaseRiskScore.GetHashCode();
                if (this.BaseRiskVector != null)
                    hashCode = hashCode * 59 + this.BaseRiskVector.GetHashCode();
                if (this.Exposure != null)
                    hashCode = hashCode * 59 + this.Exposure.GetHashCode();
                if (this.DataAssets != null)
                    hashCode = hashCode * 59 + this.DataAssets.GetHashCode();
                if (this.PublicExploit != null)
                    hashCode = hashCode * 59 + this.PublicExploit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
