/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The icon of a monitored entity.
    /// </summary>
    [DataContract]
        public partial class EntityIcon :  IEquatable<EntityIcon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityIcon" /> class.
        /// </summary>
        /// <param name="customIconPath">The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon..</param>
        public EntityIcon(string customIconPath = default(string))
        {
            this.CustomIconPath = customIconPath;
        }
        
        /// <summary>
        /// The secondary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
        /// </summary>
        /// <value>The secondary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.</value>
        [DataMember(Name="secondaryIconType", EmitDefaultValue=false)]
        public string SecondaryIconType { get; private set; }

        /// <summary>
        /// The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon.
        /// </summary>
        /// <value>The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon.</value>
        [DataMember(Name="customIconPath", EmitDefaultValue=false)]
        public string CustomIconPath { get; set; }

        /// <summary>
        /// The primary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
        /// </summary>
        /// <value>The primary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.</value>
        [DataMember(Name="primaryIconType", EmitDefaultValue=false)]
        public string PrimaryIconType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityIcon {\n");
            sb.Append("  SecondaryIconType: ").Append(SecondaryIconType).Append("\n");
            sb.Append("  CustomIconPath: ").Append(CustomIconPath).Append("\n");
            sb.Append("  PrimaryIconType: ").Append(PrimaryIconType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityIcon);
        }

        /// <summary>
        /// Returns true if EntityIcon instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityIcon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityIcon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecondaryIconType == input.SecondaryIconType ||
                    (this.SecondaryIconType != null &&
                    this.SecondaryIconType.Equals(input.SecondaryIconType))
                ) && 
                (
                    this.CustomIconPath == input.CustomIconPath ||
                    (this.CustomIconPath != null &&
                    this.CustomIconPath.Equals(input.CustomIconPath))
                ) && 
                (
                    this.PrimaryIconType == input.PrimaryIconType ||
                    (this.PrimaryIconType != null &&
                    this.PrimaryIconType.Equals(input.PrimaryIconType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecondaryIconType != null)
                    hashCode = hashCode * 59 + this.SecondaryIconType.GetHashCode();
                if (this.CustomIconPath != null)
                    hashCode = hashCode * 59 + this.CustomIconPath.GetHashCode();
                if (this.PrimaryIconType != null)
                    hashCode = hashCode * 59 + this.PrimaryIconType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
