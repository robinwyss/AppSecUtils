/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The tag of a monitored entity.
    /// </summary>
    [DataContract]
        public partial class METag :  IEquatable<METag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="METag" /> class.
        /// </summary>
        /// <param name="stringRepresentation">The string representation of the tag..</param>
        /// <param name="value">The value of the tag..</param>
        /// <param name="key">The key of the tag..</param>
        /// <param name="context">The origin of the tag, such as AWS or Cloud Foundry.  Custom tags use the &#x60;CONTEXTLESS&#x60; value..</param>
        public METag(string stringRepresentation = default(string), string value = default(string), string key = default(string), string context = default(string))
        {
            this.StringRepresentation = stringRepresentation;
            this.Value = value;
            this.Key = key;
            this.Context = context;
        }
        
        /// <summary>
        /// The string representation of the tag.
        /// </summary>
        /// <value>The string representation of the tag.</value>
        [DataMember(Name="stringRepresentation", EmitDefaultValue=false)]
        public string StringRepresentation { get; set; }

        /// <summary>
        /// The value of the tag.
        /// </summary>
        /// <value>The value of the tag.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// The key of the tag.
        /// </summary>
        /// <value>The key of the tag.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The origin of the tag, such as AWS or Cloud Foundry.  Custom tags use the &#x60;CONTEXTLESS&#x60; value.
        /// </summary>
        /// <value>The origin of the tag, such as AWS or Cloud Foundry.  Custom tags use the &#x60;CONTEXTLESS&#x60; value.</value>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class METag {\n");
            sb.Append("  StringRepresentation: ").Append(StringRepresentation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as METag);
        }

        /// <summary>
        /// Returns true if METag instances are equal
        /// </summary>
        /// <param name="input">Instance of METag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(METag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StringRepresentation == input.StringRepresentation ||
                    (this.StringRepresentation != null &&
                    this.StringRepresentation.Equals(input.StringRepresentation))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StringRepresentation != null)
                    hashCode = hashCode * 59 + this.StringRepresentation.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
