/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A synthetic location.
    /// </summary>
    [DataContract]
        public partial class LocationCollectionElement :  IEquatable<LocationCollectionElement>, IValidatableObject
    {
        /// <summary>
        /// The type of the location.
        /// </summary>
        /// <value>The type of the location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CLUSTER for value: CLUSTER
            /// </summary>
            [EnumMember(Value = "CLUSTER")]
            CLUSTER = 1,
            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 2,
            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 3        }
        /// <summary>
        /// The type of the location.
        /// </summary>
        /// <value>The type of the location.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The cloud provider where the location is hosted.  Only applicable to &#x60;PUBLIC&#x60; locations.
        /// </summary>
        /// <value>The cloud provider where the location is hosted.  Only applicable to &#x60;PUBLIC&#x60; locations.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CloudPlatformEnum
        {
            /// <summary>
            /// Enum ALIBABA for value: ALIBABA
            /// </summary>
            [EnumMember(Value = "ALIBABA")]
            ALIBABA = 1,
            /// <summary>
            /// Enum AMAZONEC2 for value: AMAZON_EC2
            /// </summary>
            [EnumMember(Value = "AMAZON_EC2")]
            AMAZONEC2 = 2,
            /// <summary>
            /// Enum AZURE for value: AZURE
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE = 3,
            /// <summary>
            /// Enum DYNATRACECLOUD for value: DYNATRACE_CLOUD
            /// </summary>
            [EnumMember(Value = "DYNATRACE_CLOUD")]
            DYNATRACECLOUD = 4,
            /// <summary>
            /// Enum GOOGLECLOUD for value: GOOGLE_CLOUD
            /// </summary>
            [EnumMember(Value = "GOOGLE_CLOUD")]
            GOOGLECLOUD = 5,
            /// <summary>
            /// Enum INTEROUTE for value: INTEROUTE
            /// </summary>
            [EnumMember(Value = "INTEROUTE")]
            INTEROUTE = 6,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7,
            /// <summary>
            /// Enum UNDEFINED for value: UNDEFINED
            /// </summary>
            [EnumMember(Value = "UNDEFINED")]
            UNDEFINED = 8        }
        /// <summary>
        /// The cloud provider where the location is hosted.  Only applicable to &#x60;PUBLIC&#x60; locations.
        /// </summary>
        /// <value>The cloud provider where the location is hosted.  Only applicable to &#x60;PUBLIC&#x60; locations.</value>
        [DataMember(Name="cloudPlatform", EmitDefaultValue=false)]
        public CloudPlatformEnum? CloudPlatform { get; set; }
        /// <summary>
        /// The release stage of the location.
        /// </summary>
        /// <value>The release stage of the location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StageEnum
        {
            /// <summary>
            /// Enum BETA for value: BETA
            /// </summary>
            [EnumMember(Value = "BETA")]
            BETA = 1,
            /// <summary>
            /// Enum COMINGSOON for value: COMING_SOON
            /// </summary>
            [EnumMember(Value = "COMING_SOON")]
            COMINGSOON = 2,
            /// <summary>
            /// Enum GA for value: GA
            /// </summary>
            [EnumMember(Value = "GA")]
            GA = 3        }
        /// <summary>
        /// The release stage of the location.
        /// </summary>
        /// <value>The release stage of the location.</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public StageEnum? Stage { get; set; }
        /// <summary>
        /// The status of the location.
        /// </summary>
        /// <value>The status of the location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 2,
            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 3        }
        /// <summary>
        /// The status of the location.
        /// </summary>
        /// <value>The status of the location.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationCollectionElement" /> class.
        /// </summary>
        /// <param name="name">The name of the location. (required).</param>
        /// <param name="entityId">The Dynatrace entity ID of the location. (required).</param>
        /// <param name="type">The type of the location. (required).</param>
        /// <param name="cloudPlatform">The cloud provider where the location is hosted.  Only applicable to &#x60;PUBLIC&#x60; locations..</param>
        /// <param name="ips">The list of IP addresses assigned to the location.  Only applicable to &#x60;PUBLIC&#x60; locations..</param>
        /// <param name="stage">The release stage of the location..</param>
        /// <param name="status">The status of the location..</param>
        /// <param name="geoLocationId">The Dynatrace GeoLocation ID of the location. (required).</param>
        public LocationCollectionElement(string name = default(string), string entityId = default(string), TypeEnum type = default(TypeEnum), CloudPlatformEnum? cloudPlatform = default(CloudPlatformEnum?), List<string> ips = default(List<string>), StageEnum? stage = default(StageEnum?), StatusEnum? status = default(StatusEnum?), string geoLocationId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LocationCollectionElement and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new InvalidDataException("entityId is a required property for LocationCollectionElement and cannot be null");
            }
            else
            {
                this.EntityId = entityId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for LocationCollectionElement and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "geoLocationId" is required (not null)
            if (geoLocationId == null)
            {
                throw new InvalidDataException("geoLocationId is a required property for LocationCollectionElement and cannot be null");
            }
            else
            {
                this.GeoLocationId = geoLocationId;
            }
            this.CloudPlatform = cloudPlatform;
            this.Ips = ips;
            this.Stage = stage;
            this.Status = status;
        }
        
        /// <summary>
        /// The name of the location.
        /// </summary>
        /// <value>The name of the location.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Dynatrace entity ID of the location.
        /// </summary>
        /// <value>The Dynatrace entity ID of the location.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }



        /// <summary>
        /// The list of IP addresses assigned to the location.  Only applicable to &#x60;PUBLIC&#x60; locations.
        /// </summary>
        /// <value>The list of IP addresses assigned to the location.  Only applicable to &#x60;PUBLIC&#x60; locations.</value>
        [DataMember(Name="ips", EmitDefaultValue=false)]
        public List<string> Ips { get; set; }



        /// <summary>
        /// The Dynatrace GeoLocation ID of the location.
        /// </summary>
        /// <value>The Dynatrace GeoLocation ID of the location.</value>
        [DataMember(Name="geoLocationId", EmitDefaultValue=false)]
        public string GeoLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationCollectionElement {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CloudPlatform: ").Append(CloudPlatform).Append("\n");
            sb.Append("  Ips: ").Append(Ips).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GeoLocationId: ").Append(GeoLocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationCollectionElement);
        }

        /// <summary>
        /// Returns true if LocationCollectionElement instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationCollectionElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationCollectionElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CloudPlatform == input.CloudPlatform ||
                    (this.CloudPlatform != null &&
                    this.CloudPlatform.Equals(input.CloudPlatform))
                ) && 
                (
                    this.Ips == input.Ips ||
                    this.Ips != null &&
                    input.Ips != null &&
                    this.Ips.SequenceEqual(input.Ips)
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.GeoLocationId == input.GeoLocationId ||
                    (this.GeoLocationId != null &&
                    this.GeoLocationId.Equals(input.GeoLocationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CloudPlatform != null)
                    hashCode = hashCode * 59 + this.CloudPlatform.GetHashCode();
                if (this.Ips != null)
                    hashCode = hashCode * 59 + this.Ips.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.GeoLocationId != null)
                    hashCode = hashCode * 59 + this.GeoLocationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
