/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Contains data related to a single instance of a release.An instance is a Process Group Instance and has an optional build version.
    /// </summary>
    [DataContract]
        public partial class ReleaseInstance :  IEquatable<ReleaseInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseInstance" /> class.
        /// </summary>
        /// <param name="securityVulnerabilities">List of Security vulnerabilities Ids.</param>
        /// <param name="entityId">The entity id of the instance..</param>
        /// <param name="buildVersion">The build version.</param>
        /// <param name="problems">List of event Ids of open problems.</param>
        public ReleaseInstance(List<string> securityVulnerabilities = default(List<string>), string entityId = default(string), string buildVersion = default(string), List<string> problems = default(List<string>))
        {
            this.SecurityVulnerabilities = securityVulnerabilities;
            this.EntityId = entityId;
            this.BuildVersion = buildVersion;
            this.Problems = problems;
        }
        
        /// <summary>
        /// List of Security vulnerabilities Ids
        /// </summary>
        /// <value>List of Security vulnerabilities Ids</value>
        [DataMember(Name="securityVulnerabilities", EmitDefaultValue=false)]
        public List<string> SecurityVulnerabilities { get; set; }

        /// <summary>
        /// The entity id of the instance.
        /// </summary>
        /// <value>The entity id of the instance.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The build version
        /// </summary>
        /// <value>The build version</value>
        [DataMember(Name="buildVersion", EmitDefaultValue=false)]
        public string BuildVersion { get; set; }

        /// <summary>
        /// List of event Ids of open problems
        /// </summary>
        /// <value>List of event Ids of open problems</value>
        [DataMember(Name="problems", EmitDefaultValue=false)]
        public List<string> Problems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseInstance {\n");
            sb.Append("  SecurityVulnerabilities: ").Append(SecurityVulnerabilities).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  Problems: ").Append(Problems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseInstance);
        }

        /// <summary>
        /// Returns true if ReleaseInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecurityVulnerabilities == input.SecurityVulnerabilities ||
                    this.SecurityVulnerabilities != null &&
                    input.SecurityVulnerabilities != null &&
                    this.SecurityVulnerabilities.SequenceEqual(input.SecurityVulnerabilities)
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.BuildVersion == input.BuildVersion ||
                    (this.BuildVersion != null &&
                    this.BuildVersion.Equals(input.BuildVersion))
                ) && 
                (
                    this.Problems == input.Problems ||
                    this.Problems != null &&
                    input.Problems != null &&
                    this.Problems.SequenceEqual(input.Problems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityVulnerabilities != null)
                    hashCode = hashCode * 59 + this.SecurityVulnerabilities.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.BuildVersion != null)
                    hashCode = hashCode * 59 + this.BuildVersion.GetHashCode();
                if (this.Problems != null)
                    hashCode = hashCode * 59 + this.Problems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
