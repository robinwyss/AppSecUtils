/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of constraint violations
    /// </summary>
    [DataContract]
        public partial class ConstraintViolation :  IEquatable<ConstraintViolation>, IValidatableObject
    {
        /// <summary>
        /// Defines ParameterLocation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ParameterLocationEnum
        {
            /// <summary>
            /// Enum PATH for value: PATH
            /// </summary>
            [EnumMember(Value = "PATH")]
            PATH = 1,
            /// <summary>
            /// Enum PAYLOADBODY for value: PAYLOAD_BODY
            /// </summary>
            [EnumMember(Value = "PAYLOAD_BODY")]
            PAYLOADBODY = 2,
            /// <summary>
            /// Enum QUERY for value: QUERY
            /// </summary>
            [EnumMember(Value = "QUERY")]
            QUERY = 3        }
        /// <summary>
        /// Gets or Sets ParameterLocation
        /// </summary>
        [DataMember(Name="parameterLocation", EmitDefaultValue=false)]
        public ParameterLocationEnum? ParameterLocation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstraintViolation" /> class.
        /// </summary>
        /// <param name="parameterLocation">parameterLocation.</param>
        /// <param name="location">location.</param>
        /// <param name="message">message.</param>
        /// <param name="path">path.</param>
        public ConstraintViolation(ParameterLocationEnum? parameterLocation = default(ParameterLocationEnum?), string location = default(string), string message = default(string), string path = default(string))
        {
            this.ParameterLocation = parameterLocation;
            this.Location = location;
            this.Message = message;
            this.Path = path;
        }
        

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstraintViolation {\n");
            sb.Append("  ParameterLocation: ").Append(ParameterLocation).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstraintViolation);
        }

        /// <summary>
        /// Returns true if ConstraintViolation instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstraintViolation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstraintViolation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParameterLocation == input.ParameterLocation ||
                    (this.ParameterLocation != null &&
                    this.ParameterLocation.Equals(input.ParameterLocation))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParameterLocation != null)
                    hashCode = hashCode * 59 + this.ParameterLocation.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
