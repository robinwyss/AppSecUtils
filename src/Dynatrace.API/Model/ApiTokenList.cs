/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of API tokens.
    /// </summary>
    [DataContract]
        public partial class ApiTokenList :  IEquatable<ApiTokenList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokenList" /> class.
        /// </summary>
        /// <param name="apiTokens">A list of API tokens..</param>
        /// <param name="nextPageKey">The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result..</param>
        /// <param name="pageSize">The number of entries per page..</param>
        /// <param name="totalCount">The total number of entries in the result. (required).</param>
        public ApiTokenList(List<ApiToken> apiTokens = default(List<ApiToken>), string nextPageKey = default(string), int? pageSize = default(int?), long? totalCount = default(long?))
        {
            // to ensure "totalCount" is required (not null)
            if (totalCount == null)
            {
                throw new InvalidDataException("totalCount is a required property for ApiTokenList and cannot be null");
            }
            else
            {
                this.TotalCount = totalCount;
            }
            this.ApiTokens = apiTokens;
            this.NextPageKey = nextPageKey;
            this.PageSize = pageSize;
        }
        
        /// <summary>
        /// A list of API tokens.
        /// </summary>
        /// <value>A list of API tokens.</value>
        [DataMember(Name="apiTokens", EmitDefaultValue=false)]
        public List<ApiToken> ApiTokens { get; set; }

        /// <summary>
        /// The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
        /// </summary>
        /// <value>The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.</value>
        [DataMember(Name="nextPageKey", EmitDefaultValue=false)]
        public string NextPageKey { get; set; }

        /// <summary>
        /// The number of entries per page.
        /// </summary>
        /// <value>The number of entries per page.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// The total number of entries in the result.
        /// </summary>
        /// <value>The total number of entries in the result.</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public long? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTokenList {\n");
            sb.Append("  ApiTokens: ").Append(ApiTokens).Append("\n");
            sb.Append("  NextPageKey: ").Append(NextPageKey).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTokenList);
        }

        /// <summary>
        /// Returns true if ApiTokenList instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTokenList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTokenList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiTokens == input.ApiTokens ||
                    this.ApiTokens != null &&
                    input.ApiTokens != null &&
                    this.ApiTokens.SequenceEqual(input.ApiTokens)
                ) && 
                (
                    this.NextPageKey == input.NextPageKey ||
                    (this.NextPageKey != null &&
                    this.NextPageKey.Equals(input.NextPageKey))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiTokens != null)
                    hashCode = hashCode * 59 + this.ApiTokens.GetHashCode();
                if (this.NextPageKey != null)
                    hashCode = hashCode * 59 + this.NextPageKey.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
