/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of a synthetic location.  **countryCode**, **regionCode**, **city** parameters are optional as they can be retrieved based on **latitude** and **longitude** of location. The actual set of fields depends on the **type** of the location.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(PrivateSyntheticLocation), "PrivateSyntheticLocation")]
    [JsonSubtypes.KnownSubType(typeof(PublicSyntheticLocation), "PublicSyntheticLocation")]
        public partial class SyntheticLocation :  IEquatable<SyntheticLocation>, IValidatableObject
    {
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; PublicSyntheticLocation * &#x60;PRIVATE&#x60; -&gt; PrivateSyntheticLocation * &#x60;CLUSTER&#x60; -&gt; PrivateSyntheticLocation 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; PublicSyntheticLocation * &#x60;PRIVATE&#x60; -&gt; PrivateSyntheticLocation * &#x60;CLUSTER&#x60; -&gt; PrivateSyntheticLocation </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CLUSTER for value: CLUSTER
            /// </summary>
            [EnumMember(Value = "CLUSTER")]
            CLUSTER = 1,
            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 2,
            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 3        }
        /// <summary>
        /// Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; PublicSyntheticLocation * &#x60;PRIVATE&#x60; -&gt; PrivateSyntheticLocation * &#x60;CLUSTER&#x60; -&gt; PrivateSyntheticLocation 
        /// </summary>
        /// <value>Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; PublicSyntheticLocation * &#x60;PRIVATE&#x60; -&gt; PrivateSyntheticLocation * &#x60;CLUSTER&#x60; -&gt; PrivateSyntheticLocation </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.
        /// </summary>
        /// <value>The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 2,
            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 3        }
        /// <summary>
        /// The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.
        /// </summary>
        /// <value>The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyntheticLocation" /> class.
        /// </summary>
        /// <param name="entityId">The Dynatrace entity ID of the location. (required).</param>
        /// <param name="type">Defines the actual set of fields depending on the value. See one of the following objects: * &#x60;PUBLIC&#x60; -&gt; PublicSyntheticLocation * &#x60;PRIVATE&#x60; -&gt; PrivateSyntheticLocation * &#x60;CLUSTER&#x60; -&gt; PrivateSyntheticLocation  (required).</param>
        /// <param name="name">The name of the location. (required).</param>
        /// <param name="countryCode">The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland)..</param>
        /// <param name="regionCode">The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)..</param>
        /// <param name="city">The city of the location..</param>
        /// <param name="latitude">The latitude of the location in &#x60;DDD.dddd&#x60; format. (required).</param>
        /// <param name="longitude">The longitude of the location in &#x60;DDD.dddd&#x60; format. (required).</param>
        /// <param name="status">The status of the location: * &#x60;ENABLED&#x60;: The location is displayed as active in the UI. You can assign monitors to the location. * &#x60;DISABLED&#x60;: The location is displayed as inactive in the UI. You can&#x27;t assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. * &#x60;HIDDEN&#x60;: The location is not displayed in the UI. You can&#x27;t assign monitors to the location. You can only set location as &#x60;HIDDEN&#x60; when no monitor is assigned to it..</param>
        /// <param name="geoLocationId">The Dynatrace GeoLocation ID of the location..</param>
        public SyntheticLocation(string entityId = default(string), TypeEnum type = default(TypeEnum), string name = default(string), string countryCode = default(string), string regionCode = default(string), string city = default(string), double? latitude = default(double?), double? longitude = default(double?), StatusEnum? status = default(StatusEnum?), string geoLocationId = default(string))
        {
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new InvalidDataException("entityId is a required property for SyntheticLocation and cannot be null");
            }
            else
            {
                this.EntityId = entityId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SyntheticLocation and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SyntheticLocation and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new InvalidDataException("latitude is a required property for SyntheticLocation and cannot be null");
            }
            else
            {
                this.Latitude = latitude;
            }
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new InvalidDataException("longitude is a required property for SyntheticLocation and cannot be null");
            }
            else
            {
                this.Longitude = longitude;
            }
            this.CountryCode = countryCode;
            this.RegionCode = regionCode;
            this.City = city;
            this.Status = status;
            this.GeoLocationId = geoLocationId;
        }
        
        /// <summary>
        /// The Dynatrace entity ID of the location.
        /// </summary>
        /// <value>The Dynatrace entity ID of the location.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }


        /// <summary>
        /// The name of the location.
        /// </summary>
        /// <value>The name of the location.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland).
        /// </summary>
        /// <value>The country code of the location.  Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, &#x60;AT&#x60; for Austria or &#x60;PL&#x60; for Poland).</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes).
        /// </summary>
        /// <value>The region code of the location.  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without &#x60;US-&#x60; or &#x60;CA-&#x60; prefix), for example, &#x60;VA&#x60; for Virginia or &#x60;OR&#x60; for Oregon.  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes).</value>
        [DataMember(Name="regionCode", EmitDefaultValue=false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// The city of the location.
        /// </summary>
        /// <value>The city of the location.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The latitude of the location in &#x60;DDD.dddd&#x60; format.
        /// </summary>
        /// <value>The latitude of the location in &#x60;DDD.dddd&#x60; format.</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude of the location in &#x60;DDD.dddd&#x60; format.
        /// </summary>
        /// <value>The longitude of the location in &#x60;DDD.dddd&#x60; format.</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }


        /// <summary>
        /// The Dynatrace GeoLocation ID of the location.
        /// </summary>
        /// <value>The Dynatrace GeoLocation ID of the location.</value>
        [DataMember(Name="geoLocationId", EmitDefaultValue=false)]
        public string GeoLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyntheticLocation {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GeoLocationId: ").Append(GeoLocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyntheticLocation);
        }

        /// <summary>
        /// Returns true if SyntheticLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of SyntheticLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyntheticLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.GeoLocationId == input.GeoLocationId ||
                    (this.GeoLocationId != null &&
                    this.GeoLocationId.Equals(input.GeoLocationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.GeoLocationId != null)
                    hashCode = hashCode * 59 + this.GeoLocationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
