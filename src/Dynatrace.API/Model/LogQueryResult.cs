/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of retrieved log records.
    /// </summary>
    [DataContract]
        public partial class LogQueryResult :  IEquatable<LogQueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogQueryResult" /> class.
        /// </summary>
        /// <param name="sliceSize">Total number of documents in a slice..</param>
        /// <param name="results">A list of retrieved log records..</param>
        /// <param name="nextSliceKey">Next slice for obtaining the remaining log records..</param>
        public LogQueryResult(long? sliceSize = default(long?), List<LogRecord> results = default(List<LogRecord>), string nextSliceKey = default(string))
        {
            this.SliceSize = sliceSize;
            this.Results = results;
            this.NextSliceKey = nextSliceKey;
        }
        
        /// <summary>
        /// Total number of documents in a slice.
        /// </summary>
        /// <value>Total number of documents in a slice.</value>
        [DataMember(Name="sliceSize", EmitDefaultValue=false)]
        public long? SliceSize { get; set; }

        /// <summary>
        /// A list of retrieved log records.
        /// </summary>
        /// <value>A list of retrieved log records.</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<LogRecord> Results { get; set; }

        /// <summary>
        /// Next slice for obtaining the remaining log records.
        /// </summary>
        /// <value>Next slice for obtaining the remaining log records.</value>
        [DataMember(Name="nextSliceKey", EmitDefaultValue=false)]
        public string NextSliceKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogQueryResult {\n");
            sb.Append("  SliceSize: ").Append(SliceSize).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  NextSliceKey: ").Append(NextSliceKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogQueryResult);
        }

        /// <summary>
        /// Returns true if LogQueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LogQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogQueryResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SliceSize == input.SliceSize ||
                    (this.SliceSize != null &&
                    this.SliceSize.Equals(input.SliceSize))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.NextSliceKey == input.NextSliceKey ||
                    (this.NextSliceKey != null &&
                    this.NextSliceKey.Equals(input.NextSliceKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SliceSize != null)
                    hashCode = hashCode * 59 + this.SliceSize.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.NextSliceKey != null)
                    hashCode = hashCode * 59 + this.NextSliceKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
