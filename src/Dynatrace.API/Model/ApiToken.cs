/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Metadata of an API token.
    /// </summary>
    [DataContract]
        public partial class ApiToken :  IEquatable<ApiToken>, IValidatableObject
    {
        /// <summary>
        /// Defines Scopes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ScopesEnum
        {
            /// <summary>
            /// Enum ActiveGateCertManagement for value: ActiveGateCertManagement
            /// </summary>
            [EnumMember(Value = "ActiveGateCertManagement")]
            ActiveGateCertManagement = 1,
            /// <summary>
            /// Enum AdvancedSyntheticIntegration for value: AdvancedSyntheticIntegration
            /// </summary>
            [EnumMember(Value = "AdvancedSyntheticIntegration")]
            AdvancedSyntheticIntegration = 2,
            /// <summary>
            /// Enum AppMonIntegration for value: AppMonIntegration
            /// </summary>
            [EnumMember(Value = "AppMonIntegration")]
            AppMonIntegration = 3,
            /// <summary>
            /// Enum CaptureRequestData for value: CaptureRequestData
            /// </summary>
            [EnumMember(Value = "CaptureRequestData")]
            CaptureRequestData = 4,
            /// <summary>
            /// Enum DTAQLAccess for value: DTAQLAccess
            /// </summary>
            [EnumMember(Value = "DTAQLAccess")]
            DTAQLAccess = 5,
            /// <summary>
            /// Enum DataExport for value: DataExport
            /// </summary>
            [EnumMember(Value = "DataExport")]
            DataExport = 6,
            /// <summary>
            /// Enum DataImport for value: DataImport
            /// </summary>
            [EnumMember(Value = "DataImport")]
            DataImport = 7,
            /// <summary>
            /// Enum DataPrivacy for value: DataPrivacy
            /// </summary>
            [EnumMember(Value = "DataPrivacy")]
            DataPrivacy = 8,
            /// <summary>
            /// Enum Davis for value: Davis
            /// </summary>
            [EnumMember(Value = "Davis")]
            Davis = 9,
            /// <summary>
            /// Enum DcrumIntegration for value: DcrumIntegration
            /// </summary>
            [EnumMember(Value = "DcrumIntegration")]
            DcrumIntegration = 10,
            /// <summary>
            /// Enum DiagnosticExport for value: DiagnosticExport
            /// </summary>
            [EnumMember(Value = "DiagnosticExport")]
            DiagnosticExport = 11,
            /// <summary>
            /// Enum DssFileManagement for value: DssFileManagement
            /// </summary>
            [EnumMember(Value = "DssFileManagement")]
            DssFileManagement = 12,
            /// <summary>
            /// Enum ExternalSyntheticIntegration for value: ExternalSyntheticIntegration
            /// </summary>
            [EnumMember(Value = "ExternalSyntheticIntegration")]
            ExternalSyntheticIntegration = 13,
            /// <summary>
            /// Enum InstallerDownload for value: InstallerDownload
            /// </summary>
            [EnumMember(Value = "InstallerDownload")]
            InstallerDownload = 14,
            /// <summary>
            /// Enum LogExport for value: LogExport
            /// </summary>
            [EnumMember(Value = "LogExport")]
            LogExport = 15,
            /// <summary>
            /// Enum MemoryDump for value: MemoryDump
            /// </summary>
            [EnumMember(Value = "MemoryDump")]
            MemoryDump = 16,
            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 17,
            /// <summary>
            /// Enum PluginUpload for value: PluginUpload
            /// </summary>
            [EnumMember(Value = "PluginUpload")]
            PluginUpload = 18,
            /// <summary>
            /// Enum ReadConfig for value: ReadConfig
            /// </summary>
            [EnumMember(Value = "ReadConfig")]
            ReadConfig = 19,
            /// <summary>
            /// Enum ReadSyntheticData for value: ReadSyntheticData
            /// </summary>
            [EnumMember(Value = "ReadSyntheticData")]
            ReadSyntheticData = 20,
            /// <summary>
            /// Enum RestRequestForwarding for value: RestRequestForwarding
            /// </summary>
            [EnumMember(Value = "RestRequestForwarding")]
            RestRequestForwarding = 21,
            /// <summary>
            /// Enum RumBrowserExtension for value: RumBrowserExtension
            /// </summary>
            [EnumMember(Value = "RumBrowserExtension")]
            RumBrowserExtension = 22,
            /// <summary>
            /// Enum RumJavaScriptTagManagement for value: RumJavaScriptTagManagement
            /// </summary>
            [EnumMember(Value = "RumJavaScriptTagManagement")]
            RumJavaScriptTagManagement = 23,
            /// <summary>
            /// Enum SupportAlert for value: SupportAlert
            /// </summary>
            [EnumMember(Value = "SupportAlert")]
            SupportAlert = 24,
            /// <summary>
            /// Enum TenantTokenManagement for value: TenantTokenManagement
            /// </summary>
            [EnumMember(Value = "TenantTokenManagement")]
            TenantTokenManagement = 25,
            /// <summary>
            /// Enum UserSessionAnonymization for value: UserSessionAnonymization
            /// </summary>
            [EnumMember(Value = "UserSessionAnonymization")]
            UserSessionAnonymization = 26,
            /// <summary>
            /// Enum ViewDashboard for value: ViewDashboard
            /// </summary>
            [EnumMember(Value = "ViewDashboard")]
            ViewDashboard = 27,
            /// <summary>
            /// Enum ViewReport for value: ViewReport
            /// </summary>
            [EnumMember(Value = "ViewReport")]
            ViewReport = 28,
            /// <summary>
            /// Enum WriteConfig for value: WriteConfig
            /// </summary>
            [EnumMember(Value = "WriteConfig")]
            WriteConfig = 29,
            /// <summary>
            /// Enum WriteSyntheticData for value: WriteSyntheticData
            /// </summary>
            [EnumMember(Value = "WriteSyntheticData")]
            WriteSyntheticData = 30,
            /// <summary>
            /// Enum ActiveGatesRead for value: activeGates.read
            /// </summary>
            [EnumMember(Value = "activeGates.read")]
            ActiveGatesRead = 31,
            /// <summary>
            /// Enum ActiveGatesWrite for value: activeGates.write
            /// </summary>
            [EnumMember(Value = "activeGates.write")]
            ActiveGatesWrite = 32,
            /// <summary>
            /// Enum ApiTokensRead for value: apiTokens.read
            /// </summary>
            [EnumMember(Value = "apiTokens.read")]
            ApiTokensRead = 33,
            /// <summary>
            /// Enum ApiTokensWrite for value: apiTokens.write
            /// </summary>
            [EnumMember(Value = "apiTokens.write")]
            ApiTokensWrite = 34,
            /// <summary>
            /// Enum AuditLogsRead for value: auditLogs.read
            /// </summary>
            [EnumMember(Value = "auditLogs.read")]
            AuditLogsRead = 35,
            /// <summary>
            /// Enum CredentialVaultRead for value: credentialVault.read
            /// </summary>
            [EnumMember(Value = "credentialVault.read")]
            CredentialVaultRead = 36,
            /// <summary>
            /// Enum CredentialVaultWrite for value: credentialVault.write
            /// </summary>
            [EnumMember(Value = "credentialVault.write")]
            CredentialVaultWrite = 37,
            /// <summary>
            /// Enum EntitiesRead for value: entities.read
            /// </summary>
            [EnumMember(Value = "entities.read")]
            EntitiesRead = 38,
            /// <summary>
            /// Enum EntitiesWrite for value: entities.write
            /// </summary>
            [EnumMember(Value = "entities.write")]
            EntitiesWrite = 39,
            /// <summary>
            /// Enum ExtensionConfigurationsRead for value: extensionConfigurations.read
            /// </summary>
            [EnumMember(Value = "extensionConfigurations.read")]
            ExtensionConfigurationsRead = 40,
            /// <summary>
            /// Enum ExtensionConfigurationsWrite for value: extensionConfigurations.write
            /// </summary>
            [EnumMember(Value = "extensionConfigurations.write")]
            ExtensionConfigurationsWrite = 41,
            /// <summary>
            /// Enum ExtensionEnvironmentRead for value: extensionEnvironment.read
            /// </summary>
            [EnumMember(Value = "extensionEnvironment.read")]
            ExtensionEnvironmentRead = 42,
            /// <summary>
            /// Enum ExtensionEnvironmentWrite for value: extensionEnvironment.write
            /// </summary>
            [EnumMember(Value = "extensionEnvironment.write")]
            ExtensionEnvironmentWrite = 43,
            /// <summary>
            /// Enum ExtensionsRead for value: extensions.read
            /// </summary>
            [EnumMember(Value = "extensions.read")]
            ExtensionsRead = 44,
            /// <summary>
            /// Enum ExtensionsWrite for value: extensions.write
            /// </summary>
            [EnumMember(Value = "extensions.write")]
            ExtensionsWrite = 45,
            /// <summary>
            /// Enum LogsIngest for value: logs.ingest
            /// </summary>
            [EnumMember(Value = "logs.ingest")]
            LogsIngest = 46,
            /// <summary>
            /// Enum LogsRead for value: logs.read
            /// </summary>
            [EnumMember(Value = "logs.read")]
            LogsRead = 47,
            /// <summary>
            /// Enum MetricsIngest for value: metrics.ingest
            /// </summary>
            [EnumMember(Value = "metrics.ingest")]
            MetricsIngest = 48,
            /// <summary>
            /// Enum MetricsRead for value: metrics.read
            /// </summary>
            [EnumMember(Value = "metrics.read")]
            MetricsRead = 49,
            /// <summary>
            /// Enum MetricsWrite for value: metrics.write
            /// </summary>
            [EnumMember(Value = "metrics.write")]
            MetricsWrite = 50,
            /// <summary>
            /// Enum NetworkZonesRead for value: networkZones.read
            /// </summary>
            [EnumMember(Value = "networkZones.read")]
            NetworkZonesRead = 51,
            /// <summary>
            /// Enum NetworkZonesWrite for value: networkZones.write
            /// </summary>
            [EnumMember(Value = "networkZones.write")]
            NetworkZonesWrite = 52,
            /// <summary>
            /// Enum ProblemsRead for value: problems.read
            /// </summary>
            [EnumMember(Value = "problems.read")]
            ProblemsRead = 53,
            /// <summary>
            /// Enum ProblemsWrite for value: problems.write
            /// </summary>
            [EnumMember(Value = "problems.write")]
            ProblemsWrite = 54,
            /// <summary>
            /// Enum ReleasesRead for value: releases.read
            /// </summary>
            [EnumMember(Value = "releases.read")]
            ReleasesRead = 55,
            /// <summary>
            /// Enum SecurityProblemsRead for value: securityProblems.read
            /// </summary>
            [EnumMember(Value = "securityProblems.read")]
            SecurityProblemsRead = 56,
            /// <summary>
            /// Enum SecurityProblemsWrite for value: securityProblems.write
            /// </summary>
            [EnumMember(Value = "securityProblems.write")]
            SecurityProblemsWrite = 57,
            /// <summary>
            /// Enum SettingsRead for value: settings.read
            /// </summary>
            [EnumMember(Value = "settings.read")]
            SettingsRead = 58,
            /// <summary>
            /// Enum SettingsWrite for value: settings.write
            /// </summary>
            [EnumMember(Value = "settings.write")]
            SettingsWrite = 59,
            /// <summary>
            /// Enum SloRead for value: slo.read
            /// </summary>
            [EnumMember(Value = "slo.read")]
            SloRead = 60,
            /// <summary>
            /// Enum SloWrite for value: slo.write
            /// </summary>
            [EnumMember(Value = "slo.write")]
            SloWrite = 61,
            /// <summary>
            /// Enum SyntheticLocationsRead for value: syntheticLocations.read
            /// </summary>
            [EnumMember(Value = "syntheticLocations.read")]
            SyntheticLocationsRead = 62,
            /// <summary>
            /// Enum SyntheticLocationsWrite for value: syntheticLocations.write
            /// </summary>
            [EnumMember(Value = "syntheticLocations.write")]
            SyntheticLocationsWrite = 63,
            /// <summary>
            /// Enum TenantTokenRotationWrite for value: tenantTokenRotation.write
            /// </summary>
            [EnumMember(Value = "tenantTokenRotation.write")]
            TenantTokenRotationWrite = 64        }
        /// <summary>
        /// A list of scopes assigned to the token.
        /// </summary>
        /// <value>A list of scopes assigned to the token.</value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<ScopesEnum> Scopes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiToken" /> class.
        /// </summary>
        /// <param name="lastUsedDate">Token last used date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;).</param>
        /// <param name="lastUsedIpAddress">Token last used IP address..</param>
        /// <param name="expirationDate">Token expiration date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;).</param>
        /// <param name="personalAccessToken">The token is a [personal access token](https://dt-url.net/wm03sop) (&#x60;true&#x60;) or an API token (&#x60;false&#x60;)..</param>
        /// <param name="creationDate">Token creation date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;).</param>
        /// <param name="scopes">A list of scopes assigned to the token..</param>
        /// <param name="name">The name of the token..</param>
        /// <param name="id">The ID of the token, consisting of prefix and public part of the token..</param>
        /// <param name="owner">The owner of the token..</param>
        /// <param name="enabled">The token is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;)..</param>
        public ApiToken(string lastUsedDate = default(string), string lastUsedIpAddress = default(string), string expirationDate = default(string), bool? personalAccessToken = default(bool?), string creationDate = default(string), List<ScopesEnum> scopes = default(List<ScopesEnum>), string name = default(string), string id = default(string), string owner = default(string), bool? enabled = default(bool?))
        {
            this.LastUsedDate = lastUsedDate;
            this.LastUsedIpAddress = lastUsedIpAddress;
            this.ExpirationDate = expirationDate;
            this.PersonalAccessToken = personalAccessToken;
            this.CreationDate = creationDate;
            this.Scopes = scopes;
            this.Name = name;
            this.Id = id;
            this.Owner = owner;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Token last used date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)
        /// </summary>
        /// <value>Token last used date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)</value>
        [DataMember(Name="lastUsedDate", EmitDefaultValue=false)]
        public string LastUsedDate { get; set; }

        /// <summary>
        /// Token last used IP address.
        /// </summary>
        /// <value>Token last used IP address.</value>
        [DataMember(Name="lastUsedIpAddress", EmitDefaultValue=false)]
        public string LastUsedIpAddress { get; set; }

        /// <summary>
        /// Token expiration date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)
        /// </summary>
        /// <value>Token expiration date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// The token is a [personal access token](https://dt-url.net/wm03sop) (&#x60;true&#x60;) or an API token (&#x60;false&#x60;).
        /// </summary>
        /// <value>The token is a [personal access token](https://dt-url.net/wm03sop) (&#x60;true&#x60;) or an API token (&#x60;false&#x60;).</value>
        [DataMember(Name="personalAccessToken", EmitDefaultValue=false)]
        public bool? PersonalAccessToken { get; set; }

        /// <summary>
        /// Token creation date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)
        /// </summary>
        /// <value>Token creation date in ISO 8601 format (&#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&#x60;)</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public string CreationDate { get; set; }


        /// <summary>
        /// The name of the token.
        /// </summary>
        /// <value>The name of the token.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the token, consisting of prefix and public part of the token.
        /// </summary>
        /// <value>The ID of the token, consisting of prefix and public part of the token.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The owner of the token.
        /// </summary>
        /// <value>The owner of the token.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// The token is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The token is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiToken {\n");
            sb.Append("  LastUsedDate: ").Append(LastUsedDate).Append("\n");
            sb.Append("  LastUsedIpAddress: ").Append(LastUsedIpAddress).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  PersonalAccessToken: ").Append(PersonalAccessToken).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiToken);
        }

        /// <summary>
        /// Returns true if ApiToken instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastUsedDate == input.LastUsedDate ||
                    (this.LastUsedDate != null &&
                    this.LastUsedDate.Equals(input.LastUsedDate))
                ) && 
                (
                    this.LastUsedIpAddress == input.LastUsedIpAddress ||
                    (this.LastUsedIpAddress != null &&
                    this.LastUsedIpAddress.Equals(input.LastUsedIpAddress))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.PersonalAccessToken == input.PersonalAccessToken ||
                    (this.PersonalAccessToken != null &&
                    this.PersonalAccessToken.Equals(input.PersonalAccessToken))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUsedDate != null)
                    hashCode = hashCode * 59 + this.LastUsedDate.GetHashCode();
                if (this.LastUsedIpAddress != null)
                    hashCode = hashCode * 59 + this.LastUsedIpAddress.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.PersonalAccessToken != null)
                    hashCode = hashCode * 59 + this.PersonalAccessToken.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
