/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The response to a creation- or update-request.
    /// </summary>
    [DataContract]
        public partial class SettingsObjectResponse :  IEquatable<SettingsObjectResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsObjectResponse" /> class.
        /// </summary>
        /// <param name="invalidValue">invalidValue.</param>
        /// <param name="objectId">For a successful request, the ID of the created or modified settings object..</param>
        /// <param name="code">The HTTP status code for the object..</param>
        /// <param name="error">error.</param>
        public SettingsObjectResponse(SettingsValue invalidValue = default(SettingsValue), string objectId = default(string), int? code = default(int?), Error error = default(Error))
        {
            this.InvalidValue = invalidValue;
            this.ObjectId = objectId;
            this.Code = code;
            this.Error = error;
        }
        
        /// <summary>
        /// Gets or Sets InvalidValue
        /// </summary>
        [DataMember(Name="invalidValue", EmitDefaultValue=false)]
        public SettingsValue InvalidValue { get; set; }

        /// <summary>
        /// For a successful request, the ID of the created or modified settings object.
        /// </summary>
        /// <value>For a successful request, the ID of the created or modified settings object.</value>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// The HTTP status code for the object.
        /// </summary>
        /// <value>The HTTP status code for the object.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public Error Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingsObjectResponse {\n");
            sb.Append("  InvalidValue: ").Append(InvalidValue).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingsObjectResponse);
        }

        /// <summary>
        /// Returns true if SettingsObjectResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingsObjectResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingsObjectResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvalidValue == input.InvalidValue ||
                    (this.InvalidValue != null &&
                    this.InvalidValue.Equals(input.InvalidValue))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidValue != null)
                    hashCode = hashCode * 59 + this.InvalidValue.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
