/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// information on the muted state of a security problem in relation to an event.
    /// </summary>
    [DataContract]
        public partial class MuteState :  IEquatable<MuteState>, IValidatableObject
    {
        /// <summary>
        /// The reason for the mute state change.
        /// </summary>
        /// <value>The reason for the mute state change.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReasonEnum
        {
            /// <summary>
            /// Enum AFFECTED for value: AFFECTED
            /// </summary>
            [EnumMember(Value = "AFFECTED")]
            AFFECTED = 1,
            /// <summary>
            /// Enum CONFIGURATIONNOTAFFECTED for value: CONFIGURATION_NOT_AFFECTED
            /// </summary>
            [EnumMember(Value = "CONFIGURATION_NOT_AFFECTED")]
            CONFIGURATIONNOTAFFECTED = 2,
            /// <summary>
            /// Enum FALSEPOSITIVE for value: FALSE_POSITIVE
            /// </summary>
            [EnumMember(Value = "FALSE_POSITIVE")]
            FALSEPOSITIVE = 3,
            /// <summary>
            /// Enum IGNORE for value: IGNORE
            /// </summary>
            [EnumMember(Value = "IGNORE")]
            IGNORE = 4,
            /// <summary>
            /// Enum INITIALSTATE for value: INITIAL_STATE
            /// </summary>
            [EnumMember(Value = "INITIAL_STATE")]
            INITIALSTATE = 5,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 6,
            /// <summary>
            /// Enum VULNERABLECODENOTINUSE for value: VULNERABLE_CODE_NOT_IN_USE
            /// </summary>
            [EnumMember(Value = "VULNERABLE_CODE_NOT_IN_USE")]
            VULNERABLECODENOTINUSE = 7        }
        /// <summary>
        /// The reason for the mute state change.
        /// </summary>
        /// <value>The reason for the mute state change.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MuteState" /> class.
        /// </summary>
        public MuteState()
        {
        }
        
        /// <summary>
        /// The user who has muted or unmuted the problem.
        /// </summary>
        /// <value>The user who has muted or unmuted the problem.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; private set; }


        /// <summary>
        /// A comment by the user.
        /// </summary>
        /// <value>A comment by the user.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MuteState {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MuteState);
        }

        /// <summary>
        /// Returns true if MuteState instances are equal
        /// </summary>
        /// <param name="input">Instance of MuteState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MuteState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
