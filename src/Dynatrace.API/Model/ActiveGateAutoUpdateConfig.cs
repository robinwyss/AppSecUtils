/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of the ActiveGate auto-updates.
    /// </summary>
    [DataContract]
        public partial class ActiveGateAutoUpdateConfig :  IEquatable<ActiveGateAutoUpdateConfig>, IValidatableObject
    {
        /// <summary>
        /// The state of the ActiveGate auto-update: enabled, disabled, or inherited.   If set to &#x60;INHERITED&#x60;, the setting is inherited from the global configuration set on the environment or Managed cluster level.
        /// </summary>
        /// <value>The state of the ActiveGate auto-update: enabled, disabled, or inherited.   If set to &#x60;INHERITED&#x60;, the setting is inherited from the global configuration set on the environment or Managed cluster level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingEnum
        {
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 2,
            /// <summary>
            /// Enum INHERITED for value: INHERITED
            /// </summary>
            [EnumMember(Value = "INHERITED")]
            INHERITED = 3        }
        /// <summary>
        /// The state of the ActiveGate auto-update: enabled, disabled, or inherited.   If set to &#x60;INHERITED&#x60;, the setting is inherited from the global configuration set on the environment or Managed cluster level.
        /// </summary>
        /// <value>The state of the ActiveGate auto-update: enabled, disabled, or inherited.   If set to &#x60;INHERITED&#x60;, the setting is inherited from the global configuration set on the environment or Managed cluster level.</value>
        [DataMember(Name="setting", EmitDefaultValue=false)]
        public SettingEnum Setting { get; set; }
        /// <summary>
        /// The actual state of the ActiveGate auto-update.   Applicable only if the **setting** parameter is set to &#x60;INHERITED&#x60;. In that case, the value is taken from the parent setting. Otherwise, it&#x27;s just a duplicate of the **setting** value.
        /// </summary>
        /// <value>The actual state of the ActiveGate auto-update.   Applicable only if the **setting** parameter is set to &#x60;INHERITED&#x60;. In that case, the value is taken from the parent setting. Otherwise, it&#x27;s just a duplicate of the **setting** value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EffectiveSettingEnum
        {
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 1,
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 2        }
        /// <summary>
        /// The actual state of the ActiveGate auto-update.   Applicable only if the **setting** parameter is set to &#x60;INHERITED&#x60;. In that case, the value is taken from the parent setting. Otherwise, it&#x27;s just a duplicate of the **setting** value.
        /// </summary>
        /// <value>The actual state of the ActiveGate auto-update.   Applicable only if the **setting** parameter is set to &#x60;INHERITED&#x60;. In that case, the value is taken from the parent setting. Otherwise, it&#x27;s just a duplicate of the **setting** value.</value>
        [DataMember(Name="effectiveSetting", EmitDefaultValue=false)]
        public EffectiveSettingEnum? EffectiveSetting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGateAutoUpdateConfig" /> class.
        /// </summary>
        /// <param name="setting">The state of the ActiveGate auto-update: enabled, disabled, or inherited.   If set to &#x60;INHERITED&#x60;, the setting is inherited from the global configuration set on the environment or Managed cluster level. (required).</param>
        public ActiveGateAutoUpdateConfig(SettingEnum setting = default(SettingEnum))
        {
            // to ensure "setting" is required (not null)
            if (setting == null)
            {
                throw new InvalidDataException("setting is a required property for ActiveGateAutoUpdateConfig and cannot be null");
            }
            else
            {
                this.Setting = setting;
            }
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveGateAutoUpdateConfig {\n");
            sb.Append("  Setting: ").Append(Setting).Append("\n");
            sb.Append("  EffectiveSetting: ").Append(EffectiveSetting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveGateAutoUpdateConfig);
        }

        /// <summary>
        /// Returns true if ActiveGateAutoUpdateConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveGateAutoUpdateConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveGateAutoUpdateConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Setting == input.Setting ||
                    (this.Setting != null &&
                    this.Setting.Equals(input.Setting))
                ) && 
                (
                    this.EffectiveSetting == input.EffectiveSetting ||
                    (this.EffectiveSetting != null &&
                    this.EffectiveSetting.Equals(input.EffectiveSetting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Setting != null)
                    hashCode = hashCode * 59 + this.Setting.GetHashCode();
                if (this.EffectiveSetting != null)
                    hashCode = hashCode * 59 + this.EffectiveSetting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
