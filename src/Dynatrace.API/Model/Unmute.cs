/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Information on un-muting a security problem.
    /// </summary>
    [DataContract]
        public partial class Unmute :  IEquatable<Unmute>, IValidatableObject
    {
        /// <summary>
        /// The reason for un-muting a security problem.
        /// </summary>
        /// <value>The reason for un-muting a security problem.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReasonEnum
        {
            /// <summary>
            /// Enum AFFECTED for value: AFFECTED
            /// </summary>
            [EnumMember(Value = "AFFECTED")]
            AFFECTED = 1,
            /// <summary>
            /// Enum INITIALSTATE for value: INITIAL_STATE
            /// </summary>
            [EnumMember(Value = "INITIAL_STATE")]
            INITIALSTATE = 2        }
        /// <summary>
        /// The reason for un-muting a security problem.
        /// </summary>
        /// <value>The reason for un-muting a security problem.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Unmute" /> class.
        /// </summary>
        /// <param name="reason">The reason for un-muting a security problem. (required).</param>
        /// <param name="comment">A comment about the un-muting reason. (required).</param>
        public Unmute(ReasonEnum reason = default(ReasonEnum), string comment = default(string))
        {
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new InvalidDataException("reason is a required property for Unmute and cannot be null");
            }
            else
            {
                this.Reason = reason;
            }
            // to ensure "comment" is required (not null)
            if (comment == null)
            {
                throw new InvalidDataException("comment is a required property for Unmute and cannot be null");
            }
            else
            {
                this.Comment = comment;
            }
        }
        

        /// <summary>
        /// A comment about the un-muting reason.
        /// </summary>
        /// <value>A comment about the un-muting reason.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Unmute {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Unmute);
        }

        /// <summary>
        /// Returns true if Unmute instances are equal
        /// </summary>
        /// <param name="input">Instance of Unmute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Unmute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
