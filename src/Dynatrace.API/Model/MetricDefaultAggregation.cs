/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The default aggregation of a metric.
    /// </summary>
    [DataContract]
        public partial class MetricDefaultAggregation :  IEquatable<MetricDefaultAggregation>, IValidatableObject
    {
        /// <summary>
        /// The type of default aggregation.
        /// </summary>
        /// <value>The type of default aggregation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 1,
            /// <summary>
            /// Enum Avg for value: avg
            /// </summary>
            [EnumMember(Value = "avg")]
            Avg = 2,
            /// <summary>
            /// Enum Count for value: count
            /// </summary>
            [EnumMember(Value = "count")]
            Count = 3,
            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            [EnumMember(Value = "max")]
            Max = 4,
            /// <summary>
            /// Enum Median for value: median
            /// </summary>
            [EnumMember(Value = "median")]
            Median = 5,
            /// <summary>
            /// Enum Min for value: min
            /// </summary>
            [EnumMember(Value = "min")]
            Min = 6,
            /// <summary>
            /// Enum Percentile for value: percentile
            /// </summary>
            [EnumMember(Value = "percentile")]
            Percentile = 7,
            /// <summary>
            /// Enum Sum for value: sum
            /// </summary>
            [EnumMember(Value = "sum")]
            Sum = 8,
            /// <summary>
            /// Enum Value for value: value
            /// </summary>
            [EnumMember(Value = "value")]
            Value = 9        }
        /// <summary>
        /// The type of default aggregation.
        /// </summary>
        /// <value>The type of default aggregation.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricDefaultAggregation" /> class.
        /// </summary>
        /// <param name="type">The type of default aggregation..</param>
        /// <param name="_parameter">The percentile to be delivered. Valid values are between &#x60;0&#x60; and &#x60;100&#x60;. Applicable only to the &#x60;percentile&#x60; aggregation type..</param>
        public MetricDefaultAggregation(TypeEnum? type = default(TypeEnum?), double? _parameter = default(double?))
        {
            this.Type = type;
            this._Parameter = _parameter;
        }
        

        /// <summary>
        /// The percentile to be delivered. Valid values are between &#x60;0&#x60; and &#x60;100&#x60;. Applicable only to the &#x60;percentile&#x60; aggregation type.
        /// </summary>
        /// <value>The percentile to be delivered. Valid values are between &#x60;0&#x60; and &#x60;100&#x60;. Applicable only to the &#x60;percentile&#x60; aggregation type.</value>
        [DataMember(Name="parameter", EmitDefaultValue=false)]
        public double? _Parameter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricDefaultAggregation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  _Parameter: ").Append(_Parameter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricDefaultAggregation);
        }

        /// <summary>
        /// Returns true if MetricDefaultAggregation instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricDefaultAggregation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricDefaultAggregation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this._Parameter == input._Parameter ||
                    (this._Parameter != null &&
                    this._Parameter.Equals(input._Parameter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this._Parameter != null)
                    hashCode = hashCode * 59 + this._Parameter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
