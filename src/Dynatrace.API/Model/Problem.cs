/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// The properties of a problem.
    /// </summary>
    [DataContract]
        public partial class Problem :  IEquatable<Problem>, IValidatableObject
    {
        /// <summary>
        /// The impact level of the problem. It shows what is affected by the problem.
        /// </summary>
        /// <value>The impact level of the problem. It shows what is affected by the problem.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ImpactLevelEnum
        {
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 1,
            /// <summary>
            /// Enum ENVIRONMENT for value: ENVIRONMENT
            /// </summary>
            [EnumMember(Value = "ENVIRONMENT")]
            ENVIRONMENT = 2,
            /// <summary>
            /// Enum INFRASTRUCTURE for value: INFRASTRUCTURE
            /// </summary>
            [EnumMember(Value = "INFRASTRUCTURE")]
            INFRASTRUCTURE = 3,
            /// <summary>
            /// Enum SERVICES for value: SERVICES
            /// </summary>
            [EnumMember(Value = "SERVICES")]
            SERVICES = 4        }
        /// <summary>
        /// The impact level of the problem. It shows what is affected by the problem.
        /// </summary>
        /// <value>The impact level of the problem. It shows what is affected by the problem.</value>
        [DataMember(Name="impactLevel", EmitDefaultValue=false)]
        public ImpactLevelEnum ImpactLevel { get; set; }
        /// <summary>
        /// The severity of the problem.
        /// </summary>
        /// <value>The severity of the problem.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SeverityLevelEnum
        {
            /// <summary>
            /// Enum AVAILABILITY for value: AVAILABILITY
            /// </summary>
            [EnumMember(Value = "AVAILABILITY")]
            AVAILABILITY = 1,
            /// <summary>
            /// Enum CUSTOMALERT for value: CUSTOM_ALERT
            /// </summary>
            [EnumMember(Value = "CUSTOM_ALERT")]
            CUSTOMALERT = 2,
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 3,
            /// <summary>
            /// Enum MONITORINGUNAVAILABLE for value: MONITORING_UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "MONITORING_UNAVAILABLE")]
            MONITORINGUNAVAILABLE = 4,
            /// <summary>
            /// Enum PERFORMANCE for value: PERFORMANCE
            /// </summary>
            [EnumMember(Value = "PERFORMANCE")]
            PERFORMANCE = 5,
            /// <summary>
            /// Enum RESOURCECONTENTION for value: RESOURCE_CONTENTION
            /// </summary>
            [EnumMember(Value = "RESOURCE_CONTENTION")]
            RESOURCECONTENTION = 6        }
        /// <summary>
        /// The severity of the problem.
        /// </summary>
        /// <value>The severity of the problem.</value>
        [DataMember(Name="severityLevel", EmitDefaultValue=false)]
        public SeverityLevelEnum SeverityLevel { get; set; }
        /// <summary>
        /// The status of the problem.
        /// </summary>
        /// <value>The status of the problem.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 1,
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 2        }
        /// <summary>
        /// The status of the problem.
        /// </summary>
        /// <value>The status of the problem.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Problem" /> class.
        /// </summary>
        /// <param name="affectedEntities">A list of all entities that are affected by the problem..</param>
        /// <param name="rootCauseEntity">rootCauseEntity.</param>
        /// <param name="problemFilters">A list of alerting profiles that match the problem..</param>
        /// <param name="evidenceDetails">evidenceDetails.</param>
        /// <param name="recentComments">recentComments.</param>
        /// <param name="impactAnalysis">impactAnalysis.</param>
        /// <param name="linkedProblemInfo">linkedProblemInfo.</param>
        /// <param name="managementZones">A list of all management zones that the problem belongs to..</param>
        /// <param name="impactLevel">The impact level of the problem. It shows what is affected by the problem. (required).</param>
        /// <param name="impactedEntities">A list of all entities that are impacted by the problem..</param>
        /// <param name="displayId">The display ID of the problem. (required).</param>
        /// <param name="severityLevel">The severity of the problem. (required).</param>
        /// <param name="entityTags">A list of all entity tags of the problem..</param>
        /// <param name="problemId">The ID of the problem. (required).</param>
        /// <param name="title">The name of the problem, displayed in the UI. (required).</param>
        /// <param name="status">The status of the problem. (required).</param>
        /// <param name="startTime">The start timestamp of the problem, in UTC milliseconds. (required).</param>
        /// <param name="endTime">The end timestamp of the problem, in UTC milliseconds.    Has &#x60;-1&#x60; value, if the problem is still open. (required).</param>
        public Problem(List<EntityStub> affectedEntities = default(List<EntityStub>), EntityStub rootCauseEntity = default(EntityStub), List<AlertingProfileStub> problemFilters = default(List<AlertingProfileStub>), EvidenceDetails evidenceDetails = default(EvidenceDetails), CommentsList recentComments = default(CommentsList), ImpactAnalysis impactAnalysis = default(ImpactAnalysis), LinkedProblem linkedProblemInfo = default(LinkedProblem), List<ManagementZone> managementZones = default(List<ManagementZone>), ImpactLevelEnum impactLevel = default(ImpactLevelEnum), List<EntityStub> impactedEntities = default(List<EntityStub>), string displayId = default(string), SeverityLevelEnum severityLevel = default(SeverityLevelEnum), List<METag> entityTags = default(List<METag>), string problemId = default(string), string title = default(string), StatusEnum status = default(StatusEnum), long? startTime = default(long?), long? endTime = default(long?))
        {
            // to ensure "impactLevel" is required (not null)
            if (impactLevel == null)
            {
                throw new InvalidDataException("impactLevel is a required property for Problem and cannot be null");
            }
            else
            {
                this.ImpactLevel = impactLevel;
            }
            // to ensure "displayId" is required (not null)
            if (displayId == null)
            {
                throw new InvalidDataException("displayId is a required property for Problem and cannot be null");
            }
            else
            {
                this.DisplayId = displayId;
            }
            // to ensure "severityLevel" is required (not null)
            if (severityLevel == null)
            {
                throw new InvalidDataException("severityLevel is a required property for Problem and cannot be null");
            }
            else
            {
                this.SeverityLevel = severityLevel;
            }
            // to ensure "problemId" is required (not null)
            if (problemId == null)
            {
                throw new InvalidDataException("problemId is a required property for Problem and cannot be null");
            }
            else
            {
                this.ProblemId = problemId;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Problem and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Problem and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for Problem and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for Problem and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            this.AffectedEntities = affectedEntities;
            this.RootCauseEntity = rootCauseEntity;
            this.ProblemFilters = problemFilters;
            this.EvidenceDetails = evidenceDetails;
            this.RecentComments = recentComments;
            this.ImpactAnalysis = impactAnalysis;
            this.LinkedProblemInfo = linkedProblemInfo;
            this.ManagementZones = managementZones;
            this.ImpactedEntities = impactedEntities;
            this.EntityTags = entityTags;
        }
        
        /// <summary>
        /// A list of all entities that are affected by the problem.
        /// </summary>
        /// <value>A list of all entities that are affected by the problem.</value>
        [DataMember(Name="affectedEntities", EmitDefaultValue=false)]
        public List<EntityStub> AffectedEntities { get; set; }

        /// <summary>
        /// Gets or Sets RootCauseEntity
        /// </summary>
        [DataMember(Name="rootCauseEntity", EmitDefaultValue=false)]
        public EntityStub RootCauseEntity { get; set; }

        /// <summary>
        /// A list of alerting profiles that match the problem.
        /// </summary>
        /// <value>A list of alerting profiles that match the problem.</value>
        [DataMember(Name="problemFilters", EmitDefaultValue=false)]
        public List<AlertingProfileStub> ProblemFilters { get; set; }

        /// <summary>
        /// Gets or Sets EvidenceDetails
        /// </summary>
        [DataMember(Name="evidenceDetails", EmitDefaultValue=false)]
        public EvidenceDetails EvidenceDetails { get; set; }

        /// <summary>
        /// Gets or Sets RecentComments
        /// </summary>
        [DataMember(Name="recentComments", EmitDefaultValue=false)]
        public CommentsList RecentComments { get; set; }

        /// <summary>
        /// Gets or Sets ImpactAnalysis
        /// </summary>
        [DataMember(Name="impactAnalysis", EmitDefaultValue=false)]
        public ImpactAnalysis ImpactAnalysis { get; set; }

        /// <summary>
        /// Gets or Sets LinkedProblemInfo
        /// </summary>
        [DataMember(Name="linkedProblemInfo", EmitDefaultValue=false)]
        public LinkedProblem LinkedProblemInfo { get; set; }

        /// <summary>
        /// A list of all management zones that the problem belongs to.
        /// </summary>
        /// <value>A list of all management zones that the problem belongs to.</value>
        [DataMember(Name="managementZones", EmitDefaultValue=false)]
        public List<ManagementZone> ManagementZones { get; set; }


        /// <summary>
        /// A list of all entities that are impacted by the problem.
        /// </summary>
        /// <value>A list of all entities that are impacted by the problem.</value>
        [DataMember(Name="impactedEntities", EmitDefaultValue=false)]
        public List<EntityStub> ImpactedEntities { get; set; }

        /// <summary>
        /// The display ID of the problem.
        /// </summary>
        /// <value>The display ID of the problem.</value>
        [DataMember(Name="displayId", EmitDefaultValue=false)]
        public string DisplayId { get; set; }


        /// <summary>
        /// A list of all entity tags of the problem.
        /// </summary>
        /// <value>A list of all entity tags of the problem.</value>
        [DataMember(Name="entityTags", EmitDefaultValue=false)]
        public List<METag> EntityTags { get; set; }

        /// <summary>
        /// The ID of the problem.
        /// </summary>
        /// <value>The ID of the problem.</value>
        [DataMember(Name="problemId", EmitDefaultValue=false)]
        public string ProblemId { get; set; }

        /// <summary>
        /// The name of the problem, displayed in the UI.
        /// </summary>
        /// <value>The name of the problem, displayed in the UI.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// The start timestamp of the problem, in UTC milliseconds.
        /// </summary>
        /// <value>The start timestamp of the problem, in UTC milliseconds.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// The end timestamp of the problem, in UTC milliseconds.    Has &#x60;-1&#x60; value, if the problem is still open.
        /// </summary>
        /// <value>The end timestamp of the problem, in UTC milliseconds.    Has &#x60;-1&#x60; value, if the problem is still open.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public long? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Problem {\n");
            sb.Append("  AffectedEntities: ").Append(AffectedEntities).Append("\n");
            sb.Append("  RootCauseEntity: ").Append(RootCauseEntity).Append("\n");
            sb.Append("  ProblemFilters: ").Append(ProblemFilters).Append("\n");
            sb.Append("  EvidenceDetails: ").Append(EvidenceDetails).Append("\n");
            sb.Append("  RecentComments: ").Append(RecentComments).Append("\n");
            sb.Append("  ImpactAnalysis: ").Append(ImpactAnalysis).Append("\n");
            sb.Append("  LinkedProblemInfo: ").Append(LinkedProblemInfo).Append("\n");
            sb.Append("  ManagementZones: ").Append(ManagementZones).Append("\n");
            sb.Append("  ImpactLevel: ").Append(ImpactLevel).Append("\n");
            sb.Append("  ImpactedEntities: ").Append(ImpactedEntities).Append("\n");
            sb.Append("  DisplayId: ").Append(DisplayId).Append("\n");
            sb.Append("  SeverityLevel: ").Append(SeverityLevel).Append("\n");
            sb.Append("  EntityTags: ").Append(EntityTags).Append("\n");
            sb.Append("  ProblemId: ").Append(ProblemId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Problem);
        }

        /// <summary>
        /// Returns true if Problem instances are equal
        /// </summary>
        /// <param name="input">Instance of Problem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Problem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffectedEntities == input.AffectedEntities ||
                    this.AffectedEntities != null &&
                    input.AffectedEntities != null &&
                    this.AffectedEntities.SequenceEqual(input.AffectedEntities)
                ) && 
                (
                    this.RootCauseEntity == input.RootCauseEntity ||
                    (this.RootCauseEntity != null &&
                    this.RootCauseEntity.Equals(input.RootCauseEntity))
                ) && 
                (
                    this.ProblemFilters == input.ProblemFilters ||
                    this.ProblemFilters != null &&
                    input.ProblemFilters != null &&
                    this.ProblemFilters.SequenceEqual(input.ProblemFilters)
                ) && 
                (
                    this.EvidenceDetails == input.EvidenceDetails ||
                    (this.EvidenceDetails != null &&
                    this.EvidenceDetails.Equals(input.EvidenceDetails))
                ) && 
                (
                    this.RecentComments == input.RecentComments ||
                    (this.RecentComments != null &&
                    this.RecentComments.Equals(input.RecentComments))
                ) && 
                (
                    this.ImpactAnalysis == input.ImpactAnalysis ||
                    (this.ImpactAnalysis != null &&
                    this.ImpactAnalysis.Equals(input.ImpactAnalysis))
                ) && 
                (
                    this.LinkedProblemInfo == input.LinkedProblemInfo ||
                    (this.LinkedProblemInfo != null &&
                    this.LinkedProblemInfo.Equals(input.LinkedProblemInfo))
                ) && 
                (
                    this.ManagementZones == input.ManagementZones ||
                    this.ManagementZones != null &&
                    input.ManagementZones != null &&
                    this.ManagementZones.SequenceEqual(input.ManagementZones)
                ) && 
                (
                    this.ImpactLevel == input.ImpactLevel ||
                    (this.ImpactLevel != null &&
                    this.ImpactLevel.Equals(input.ImpactLevel))
                ) && 
                (
                    this.ImpactedEntities == input.ImpactedEntities ||
                    this.ImpactedEntities != null &&
                    input.ImpactedEntities != null &&
                    this.ImpactedEntities.SequenceEqual(input.ImpactedEntities)
                ) && 
                (
                    this.DisplayId == input.DisplayId ||
                    (this.DisplayId != null &&
                    this.DisplayId.Equals(input.DisplayId))
                ) && 
                (
                    this.SeverityLevel == input.SeverityLevel ||
                    (this.SeverityLevel != null &&
                    this.SeverityLevel.Equals(input.SeverityLevel))
                ) && 
                (
                    this.EntityTags == input.EntityTags ||
                    this.EntityTags != null &&
                    input.EntityTags != null &&
                    this.EntityTags.SequenceEqual(input.EntityTags)
                ) && 
                (
                    this.ProblemId == input.ProblemId ||
                    (this.ProblemId != null &&
                    this.ProblemId.Equals(input.ProblemId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffectedEntities != null)
                    hashCode = hashCode * 59 + this.AffectedEntities.GetHashCode();
                if (this.RootCauseEntity != null)
                    hashCode = hashCode * 59 + this.RootCauseEntity.GetHashCode();
                if (this.ProblemFilters != null)
                    hashCode = hashCode * 59 + this.ProblemFilters.GetHashCode();
                if (this.EvidenceDetails != null)
                    hashCode = hashCode * 59 + this.EvidenceDetails.GetHashCode();
                if (this.RecentComments != null)
                    hashCode = hashCode * 59 + this.RecentComments.GetHashCode();
                if (this.ImpactAnalysis != null)
                    hashCode = hashCode * 59 + this.ImpactAnalysis.GetHashCode();
                if (this.LinkedProblemInfo != null)
                    hashCode = hashCode * 59 + this.LinkedProblemInfo.GetHashCode();
                if (this.ManagementZones != null)
                    hashCode = hashCode * 59 + this.ManagementZones.GetHashCode();
                if (this.ImpactLevel != null)
                    hashCode = hashCode * 59 + this.ImpactLevel.GetHashCode();
                if (this.ImpactedEntities != null)
                    hashCode = hashCode * 59 + this.ImpactedEntities.GetHashCode();
                if (this.DisplayId != null)
                    hashCode = hashCode * 59 + this.DisplayId.GetHashCode();
                if (this.SeverityLevel != null)
                    hashCode = hashCode * 59 + this.SeverityLevel.GetHashCode();
                if (this.EntityTags != null)
                    hashCode = hashCode * 59 + this.EntityTags.GetHashCode();
                if (this.ProblemId != null)
                    hashCode = hashCode * 59 + this.ProblemId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
