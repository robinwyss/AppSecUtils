/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Contains information about the used software technology.
    /// </summary>
    [DataContract]
        public partial class SoftwareTechs :  IEquatable<SoftwareTechs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareTechs" /> class.
        /// </summary>
        /// <param name="edition">The edition of the technology..</param>
        /// <param name="verbatimType">The verbatim type of the technology..</param>
        /// <param name="technology">The type of the technology..</param>
        /// <param name="version">The version of the technology..</param>
        public SoftwareTechs(string edition = default(string), string verbatimType = default(string), string technology = default(string), string version = default(string))
        {
            this.Edition = edition;
            this.VerbatimType = verbatimType;
            this.Technology = technology;
            this.Version = version;
        }
        
        /// <summary>
        /// The edition of the technology.
        /// </summary>
        /// <value>The edition of the technology.</value>
        [DataMember(Name="edition", EmitDefaultValue=false)]
        public string Edition { get; set; }

        /// <summary>
        /// The verbatim type of the technology.
        /// </summary>
        /// <value>The verbatim type of the technology.</value>
        [DataMember(Name="verbatimType", EmitDefaultValue=false)]
        public string VerbatimType { get; set; }

        /// <summary>
        /// The type of the technology.
        /// </summary>
        /// <value>The type of the technology.</value>
        [DataMember(Name="technology", EmitDefaultValue=false)]
        public string Technology { get; set; }

        /// <summary>
        /// The version of the technology.
        /// </summary>
        /// <value>The version of the technology.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwareTechs {\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  VerbatimType: ").Append(VerbatimType).Append("\n");
            sb.Append("  Technology: ").Append(Technology).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SoftwareTechs);
        }

        /// <summary>
        /// Returns true if SoftwareTechs instances are equal
        /// </summary>
        /// <param name="input">Instance of SoftwareTechs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareTechs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Edition == input.Edition ||
                    (this.Edition != null &&
                    this.Edition.Equals(input.Edition))
                ) && 
                (
                    this.VerbatimType == input.VerbatimType ||
                    (this.VerbatimType != null &&
                    this.VerbatimType.Equals(input.VerbatimType))
                ) && 
                (
                    this.Technology == input.Technology ||
                    (this.Technology != null &&
                    this.Technology.Equals(input.Technology))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Edition != null)
                    hashCode = hashCode * 59 + this.Edition.GetHashCode();
                if (this.VerbatimType != null)
                    hashCode = hashCode * 59 + this.VerbatimType.GetHashCode();
                if (this.Technology != null)
                    hashCode = hashCode * 59 + this.Technology.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
