/* 
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Configuration of a public synthetic location.    Some fields are inherited from the base *SyntheticLocation* object.
    /// </summary>
    [DataContract]
        public partial class PublicSyntheticLocation : SyntheticLocation,  IEquatable<PublicSyntheticLocation>, IValidatableObject
    {
        /// <summary>
        /// The cloud provider where the location is hosted.
        /// </summary>
        /// <value>The cloud provider where the location is hosted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CloudPlatformEnum
        {
            /// <summary>
            /// Enum ALIBABA for value: ALIBABA
            /// </summary>
            [EnumMember(Value = "ALIBABA")]
            ALIBABA = 1,
            /// <summary>
            /// Enum AMAZONEC2 for value: AMAZON_EC2
            /// </summary>
            [EnumMember(Value = "AMAZON_EC2")]
            AMAZONEC2 = 2,
            /// <summary>
            /// Enum AZURE for value: AZURE
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE = 3,
            /// <summary>
            /// Enum DYNATRACECLOUD for value: DYNATRACE_CLOUD
            /// </summary>
            [EnumMember(Value = "DYNATRACE_CLOUD")]
            DYNATRACECLOUD = 4,
            /// <summary>
            /// Enum GOOGLECLOUD for value: GOOGLE_CLOUD
            /// </summary>
            [EnumMember(Value = "GOOGLE_CLOUD")]
            GOOGLECLOUD = 5,
            /// <summary>
            /// Enum INTEROUTE for value: INTEROUTE
            /// </summary>
            [EnumMember(Value = "INTEROUTE")]
            INTEROUTE = 6,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7,
            /// <summary>
            /// Enum UNDEFINED for value: UNDEFINED
            /// </summary>
            [EnumMember(Value = "UNDEFINED")]
            UNDEFINED = 8        }
        /// <summary>
        /// The cloud provider where the location is hosted.
        /// </summary>
        /// <value>The cloud provider where the location is hosted.</value>
        [DataMember(Name="cloudPlatform", EmitDefaultValue=false)]
        public CloudPlatformEnum CloudPlatform { get; set; }
        /// <summary>
        /// The stage of the location.
        /// </summary>
        /// <value>The stage of the location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StageEnum
        {
            /// <summary>
            /// Enum BETA for value: BETA
            /// </summary>
            [EnumMember(Value = "BETA")]
            BETA = 1,
            /// <summary>
            /// Enum COMINGSOON for value: COMING_SOON
            /// </summary>
            [EnumMember(Value = "COMING_SOON")]
            COMINGSOON = 2,
            /// <summary>
            /// Enum GA for value: GA
            /// </summary>
            [EnumMember(Value = "GA")]
            GA = 3        }
        /// <summary>
        /// The stage of the location.
        /// </summary>
        /// <value>The stage of the location.</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public StageEnum Stage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSyntheticLocation" /> class.
        /// </summary>
        /// <param name="cloudPlatform">The cloud provider where the location is hosted. (required).</param>
        /// <param name="ips">The list of IP addresses assigned to the location. (required).</param>
        /// <param name="stage">The stage of the location. (required).</param>
        /// <param name="browserType">The type of the browser the location is using to execute browser monitors. (required).</param>
        /// <param name="browserVersion">The version of the browser the location is using to execute browser monitors. (required).</param>
        /// <param name="capabilities">A list of location capabilities..</param>
        public PublicSyntheticLocation(CloudPlatformEnum cloudPlatform = default(CloudPlatformEnum), List<string> ips = default(List<string>), StageEnum stage = default(StageEnum), string browserType = default(string), string browserVersion = default(string), List<string> capabilities = default(List<string>), string entityId = default(string), TypeEnum type = default(TypeEnum), string name = default(string), string countryCode = default(string), string regionCode = default(string), string city = default(string), double? latitude = default(double?), double? longitude = default(double?), StatusEnum? status = default(StatusEnum?), string geoLocationId = default(string)) : base(entityId, type, name, countryCode, regionCode, city, latitude, longitude, status, geoLocationId)
        {
            // to ensure "cloudPlatform" is required (not null)
            if (cloudPlatform == null)
            {
                throw new InvalidDataException("cloudPlatform is a required property for PublicSyntheticLocation and cannot be null");
            }
            else
            {
                this.CloudPlatform = cloudPlatform;
            }
            // to ensure "ips" is required (not null)
            if (ips == null)
            {
                throw new InvalidDataException("ips is a required property for PublicSyntheticLocation and cannot be null");
            }
            else
            {
                this.Ips = ips;
            }
            // to ensure "stage" is required (not null)
            if (stage == null)
            {
                throw new InvalidDataException("stage is a required property for PublicSyntheticLocation and cannot be null");
            }
            else
            {
                this.Stage = stage;
            }
            // to ensure "browserType" is required (not null)
            if (browserType == null)
            {
                throw new InvalidDataException("browserType is a required property for PublicSyntheticLocation and cannot be null");
            }
            else
            {
                this.BrowserType = browserType;
            }
            // to ensure "browserVersion" is required (not null)
            if (browserVersion == null)
            {
                throw new InvalidDataException("browserVersion is a required property for PublicSyntheticLocation and cannot be null");
            }
            else
            {
                this.BrowserVersion = browserVersion;
            }
            this.Capabilities = capabilities;
        }
        

        /// <summary>
        /// The list of IP addresses assigned to the location.
        /// </summary>
        /// <value>The list of IP addresses assigned to the location.</value>
        [DataMember(Name="ips", EmitDefaultValue=false)]
        public List<string> Ips { get; set; }


        /// <summary>
        /// The type of the browser the location is using to execute browser monitors.
        /// </summary>
        /// <value>The type of the browser the location is using to execute browser monitors.</value>
        [DataMember(Name="browserType", EmitDefaultValue=false)]
        public string BrowserType { get; set; }

        /// <summary>
        /// The version of the browser the location is using to execute browser monitors.
        /// </summary>
        /// <value>The version of the browser the location is using to execute browser monitors.</value>
        [DataMember(Name="browserVersion", EmitDefaultValue=false)]
        public string BrowserVersion { get; set; }

        /// <summary>
        /// A list of location capabilities.
        /// </summary>
        /// <value>A list of location capabilities.</value>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicSyntheticLocation {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CloudPlatform: ").Append(CloudPlatform).Append("\n");
            sb.Append("  Ips: ").Append(Ips).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  BrowserType: ").Append(BrowserType).Append("\n");
            sb.Append("  BrowserVersion: ").Append(BrowserVersion).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSyntheticLocation);
        }

        /// <summary>
        /// Returns true if PublicSyntheticLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSyntheticLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSyntheticLocation input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CloudPlatform == input.CloudPlatform ||
                    (this.CloudPlatform != null &&
                    this.CloudPlatform.Equals(input.CloudPlatform))
                ) && base.Equals(input) && 
                (
                    this.Ips == input.Ips ||
                    this.Ips != null &&
                    input.Ips != null &&
                    this.Ips.SequenceEqual(input.Ips)
                ) && base.Equals(input) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && base.Equals(input) && 
                (
                    this.BrowserType == input.BrowserType ||
                    (this.BrowserType != null &&
                    this.BrowserType.Equals(input.BrowserType))
                ) && base.Equals(input) && 
                (
                    this.BrowserVersion == input.BrowserVersion ||
                    (this.BrowserVersion != null &&
                    this.BrowserVersion.Equals(input.BrowserVersion))
                ) && base.Equals(input) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    input.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CloudPlatform != null)
                    hashCode = hashCode * 59 + this.CloudPlatform.GetHashCode();
                if (this.Ips != null)
                    hashCode = hashCode * 59 + this.Ips.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.BrowserType != null)
                    hashCode = hashCode * 59 + this.BrowserType.GetHashCode();
                if (this.BrowserVersion != null)
                    hashCode = hashCode * 59 + this.BrowserVersion.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
