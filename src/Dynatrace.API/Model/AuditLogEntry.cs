/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// An entry of the audit log.
    /// </summary>
    [DataContract]
        public partial class AuditLogEntry :  IEquatable<AuditLogEntry>, IValidatableObject
    {
        /// <summary>
        /// The type of the recorded operation.
        /// </summary>
        /// <value>The type of the recorded operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EventTypeEnum
        {
            /// <summary>
            /// Enum CREATE for value: CREATE
            /// </summary>
            [EnumMember(Value = "CREATE")]
            CREATE = 1,
            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 2,
            /// <summary>
            /// Enum GENERAL for value: GENERAL
            /// </summary>
            [EnumMember(Value = "GENERAL")]
            GENERAL = 3,
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 4,
            /// <summary>
            /// Enum LOGIN for value: LOGIN
            /// </summary>
            [EnumMember(Value = "LOGIN")]
            LOGIN = 5,
            /// <summary>
            /// Enum LOGOUT for value: LOGOUT
            /// </summary>
            [EnumMember(Value = "LOGOUT")]
            LOGOUT = 6,
            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCH = 7,
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 8,
            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 9,
            /// <summary>
            /// Enum READ for value: READ
            /// </summary>
            [EnumMember(Value = "READ")]
            READ = 10,
            /// <summary>
            /// Enum REVOKE for value: REVOKE
            /// </summary>
            [EnumMember(Value = "REVOKE")]
            REVOKE = 11,
            /// <summary>
            /// Enum UPDATE for value: UPDATE
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE = 12        }
        /// <summary>
        /// The type of the recorded operation.
        /// </summary>
        /// <value>The type of the recorded operation.</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// The category of the recorded operation.
        /// </summary>
        /// <value>The category of the recorded operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryEnum
        {
            /// <summary>
            /// Enum CONFIG for value: CONFIG
            /// </summary>
            [EnumMember(Value = "CONFIG")]
            CONFIG = 1,
            /// <summary>
            /// Enum DEBUGUI for value: DEBUG_UI
            /// </summary>
            [EnumMember(Value = "DEBUG_UI")]
            DEBUGUI = 2,
            /// <summary>
            /// Enum TOKEN for value: TOKEN
            /// </summary>
            [EnumMember(Value = "TOKEN")]
            TOKEN = 3,
            /// <summary>
            /// Enum WEBUI for value: WEB_UI
            /// </summary>
            [EnumMember(Value = "WEB_UI")]
            WEBUI = 4        }
        /// <summary>
        /// The category of the recorded operation.
        /// </summary>
        /// <value>The category of the recorded operation.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// The type of the authentication of the **user**.
        /// </summary>
        /// <value>The type of the authentication of the **user**.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UserTypeEnum
        {
            /// <summary>
            /// Enum PUBLICTOKENIDENTIFIER for value: PUBLIC_TOKEN_IDENTIFIER
            /// </summary>
            [EnumMember(Value = "PUBLIC_TOKEN_IDENTIFIER")]
            PUBLICTOKENIDENTIFIER = 1,
            /// <summary>
            /// Enum REQUESTID for value: REQUEST_ID
            /// </summary>
            [EnumMember(Value = "REQUEST_ID")]
            REQUESTID = 2,
            /// <summary>
            /// Enum SERVICENAME for value: SERVICE_NAME
            /// </summary>
            [EnumMember(Value = "SERVICE_NAME")]
            SERVICENAME = 3,
            /// <summary>
            /// Enum TOKENHASH for value: TOKEN_HASH
            /// </summary>
            [EnumMember(Value = "TOKEN_HASH")]
            TOKENHASH = 4,
            /// <summary>
            /// Enum USERNAME for value: USER_NAME
            /// </summary>
            [EnumMember(Value = "USER_NAME")]
            USERNAME = 5        }
        /// <summary>
        /// The type of the authentication of the **user**.
        /// </summary>
        /// <value>The type of the authentication of the **user**.</value>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public UserTypeEnum UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogEntry" /> class.
        /// </summary>
        public AuditLogEntry()
        {
        }
        
        /// <summary>
        /// The ID of the log entry.
        /// </summary>
        /// <value>The ID of the log entry.</value>
        [DataMember(Name="logId", EmitDefaultValue=false)]
        public string LogId { get; private set; }



        /// <summary>
        /// The ID of an entity from the **category**. For example, it can be config ID for the &#x60;CONFIG&#x60; category or token ID for the &#x60;TOKEN&#x60; category.
        /// </summary>
        /// <value>The ID of an entity from the **category**. For example, it can be config ID for the &#x60;CONFIG&#x60; category or token ID for the &#x60;TOKEN&#x60; category.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; private set; }

        /// <summary>
        /// The ID of the Dynatrace environment where the recorded operation occurred.
        /// </summary>
        /// <value>The ID of the Dynatrace environment where the recorded operation occurred.</value>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; private set; }

        /// <summary>
        /// The ID of the user who performed the recorded operation.
        /// </summary>
        /// <value>The ID of the user who performed the recorded operation.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; private set; }


        /// <summary>
        /// The origin and the IP address of the **user**.
        /// </summary>
        /// <value>The origin and the IP address of the **user**.</value>
        [DataMember(Name="userOrigin", EmitDefaultValue=false)]
        public string UserOrigin { get; private set; }

        /// <summary>
        /// The timestamp of the record creation, in UTC milliseconds.
        /// </summary>
        /// <value>The timestamp of the record creation, in UTC milliseconds.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; private set; }

        /// <summary>
        /// The recorded operation is successful (&#x60;true&#x60;) or failed (&#x60;false&#x60;).
        /// </summary>
        /// <value>The recorded operation is successful (&#x60;true&#x60;) or failed (&#x60;false&#x60;).</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; private set; }

        /// <summary>
        /// The logged message.
        /// </summary>
        /// <value>The logged message.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; private set; }

        /// <summary>
        /// The patch of the recorded operation as the JSON representation. The format is an enhanced RFC 6902. The patch also carries the previous value in the **oldValue** field.
        /// </summary>
        /// <value>The patch of the recorded operation as the JSON representation. The format is an enhanced RFC 6902. The patch also carries the previous value in the **oldValue** field.</value>
        [DataMember(Name="patch", EmitDefaultValue=false)]
        public Object Patch { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogEntry {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  UserOrigin: ").Append(UserOrigin).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditLogEntry);
        }

        /// <summary>
        /// Returns true if AuditLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogId == input.LogId ||
                    (this.LogId != null &&
                    this.LogId.Equals(input.LogId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.UserOrigin == input.UserOrigin ||
                    (this.UserOrigin != null &&
                    this.UserOrigin.Equals(input.UserOrigin))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Patch == input.Patch ||
                    (this.Patch != null &&
                    this.Patch.Equals(input.Patch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogId != null)
                    hashCode = hashCode * 59 + this.LogId.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.UserOrigin != null)
                    hashCode = hashCode * 59 + this.UserOrigin.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Patch != null)
                    hashCode = hashCode * 59 + this.Patch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
