/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// A list of releases.
    /// </summary>
    [DataContract]
        public partial class Releases :  IEquatable<Releases>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Releases" /> class.
        /// </summary>
        /// <param name="releasesWithProblems">Number of releases with problems..</param>
        /// <param name="releases">A list of releases..</param>
        /// <param name="nextPageKey">The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page. Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result..</param>
        /// <param name="pageSize">The number of entries per page..</param>
        /// <param name="totalCount">The total number of entries in the result. (required).</param>
        public Releases(long? releasesWithProblems = default(long?), List<Release> releases = default(List<Release>), string nextPageKey = default(string), int? pageSize = default(int?), long? totalCount = default(long?))
        {
            // to ensure "totalCount" is required (not null)
            if (totalCount == null)
            {
                throw new InvalidDataException("totalCount is a required property for Releases and cannot be null");
            }
            else
            {
                this.TotalCount = totalCount;
            }
            this.ReleasesWithProblems = releasesWithProblems;
            this._Releases = releases;
            this.NextPageKey = nextPageKey;
            this.PageSize = pageSize;
        }
        
        /// <summary>
        /// Number of releases with problems.
        /// </summary>
        /// <value>Number of releases with problems.</value>
        [DataMember(Name="releasesWithProblems", EmitDefaultValue=false)]
        public long? ReleasesWithProblems { get; set; }

        /// <summary>
        /// A list of releases.
        /// </summary>
        /// <value>A list of releases.</value>
        [DataMember(Name="releases", EmitDefaultValue=false)]
        public List<Release> _Releases { get; set; }

        /// <summary>
        /// The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page. Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
        /// </summary>
        /// <value>The cursor for the next page of results. Has the value of &#x60;null&#x60; on the last page. Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.</value>
        [DataMember(Name="nextPageKey", EmitDefaultValue=false)]
        public string NextPageKey { get; set; }

        /// <summary>
        /// The number of entries per page.
        /// </summary>
        /// <value>The number of entries per page.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// The total number of entries in the result.
        /// </summary>
        /// <value>The total number of entries in the result.</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public long? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Releases {\n");
            sb.Append("  ReleasesWithProblems: ").Append(ReleasesWithProblems).Append("\n");
            sb.Append("  _Releases: ").Append(_Releases).Append("\n");
            sb.Append("  NextPageKey: ").Append(NextPageKey).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Releases);
        }

        /// <summary>
        /// Returns true if Releases instances are equal
        /// </summary>
        /// <param name="input">Instance of Releases to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Releases input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleasesWithProblems == input.ReleasesWithProblems ||
                    (this.ReleasesWithProblems != null &&
                    this.ReleasesWithProblems.Equals(input.ReleasesWithProblems))
                ) && 
                (
                    this._Releases == input._Releases ||
                    this._Releases != null &&
                    input._Releases != null &&
                    this._Releases.SequenceEqual(input._Releases)
                ) && 
                (
                    this.NextPageKey == input.NextPageKey ||
                    (this.NextPageKey != null &&
                    this.NextPageKey.Equals(input.NextPageKey))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleasesWithProblems != null)
                    hashCode = hashCode * 59 + this.ReleasesWithProblems.GetHashCode();
                if (this._Releases != null)
                    hashCode = hashCode * 59 + this._Releases.GetHashCode();
                if (this.NextPageKey != null)
                    hashCode = hashCode * 59 + this.NextPageKey.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
