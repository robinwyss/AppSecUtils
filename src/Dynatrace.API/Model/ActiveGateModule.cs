/* 
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress. If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .Notes about compatibility:* Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this.* We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Dynatrace.API.Client.SwaggerDateConverter;

namespace Dynatrace.API.Model
{
    /// <summary>
    /// Information about ActiveGate module
    /// </summary>
    [DataContract]
        public partial class ActiveGateModule :  IEquatable<ActiveGateModule>, IValidatableObject
    {
        /// <summary>
        /// The type of ActiveGate module.
        /// </summary>
        /// <value>The type of ActiveGate module.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum AWS for value: AWS
            /// </summary>
            [EnumMember(Value = "AWS")]
            AWS = 1,
            /// <summary>
            /// Enum AZURE for value: AZURE
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE = 2,
            /// <summary>
            /// Enum BEACONFORWARDER for value: BEACON_FORWARDER
            /// </summary>
            [EnumMember(Value = "BEACON_FORWARDER")]
            BEACONFORWARDER = 3,
            /// <summary>
            /// Enum CLOUDFOUNDRY for value: CLOUD_FOUNDRY
            /// </summary>
            [EnumMember(Value = "CLOUD_FOUNDRY")]
            CLOUDFOUNDRY = 4,
            /// <summary>
            /// Enum DBINSIGHT for value: DB_INSIGHT
            /// </summary>
            [EnumMember(Value = "DB_INSIGHT")]
            DBINSIGHT = 5,
            /// <summary>
            /// Enum EXTENSIONSV1 for value: EXTENSIONS_V1
            /// </summary>
            [EnumMember(Value = "EXTENSIONS_V1")]
            EXTENSIONSV1 = 6,
            /// <summary>
            /// Enum EXTENSIONSV2 for value: EXTENSIONS_V2
            /// </summary>
            [EnumMember(Value = "EXTENSIONS_V2")]
            EXTENSIONSV2 = 7,
            /// <summary>
            /// Enum KUBERNETES for value: KUBERNETES
            /// </summary>
            [EnumMember(Value = "KUBERNETES")]
            KUBERNETES = 8,
            /// <summary>
            /// Enum LOGS for value: LOGS
            /// </summary>
            [EnumMember(Value = "LOGS")]
            LOGS = 9,
            /// <summary>
            /// Enum MEMORYDUMPS for value: MEMORY_DUMPS
            /// </summary>
            [EnumMember(Value = "MEMORY_DUMPS")]
            MEMORYDUMPS = 10,
            /// <summary>
            /// Enum METRICAPI for value: METRIC_API
            /// </summary>
            [EnumMember(Value = "METRIC_API")]
            METRICAPI = 11,
            /// <summary>
            /// Enum ONEAGENTROUTING for value: ONE_AGENT_ROUTING
            /// </summary>
            [EnumMember(Value = "ONE_AGENT_ROUTING")]
            ONEAGENTROUTING = 12,
            /// <summary>
            /// Enum OTLPINGEST for value: OTLP_INGEST
            /// </summary>
            [EnumMember(Value = "OTLP_INGEST")]
            OTLPINGEST = 13,
            /// <summary>
            /// Enum RESTAPI for value: REST_API
            /// </summary>
            [EnumMember(Value = "REST_API")]
            RESTAPI = 14,
            /// <summary>
            /// Enum SYNTHETIC for value: SYNTHETIC
            /// </summary>
            [EnumMember(Value = "SYNTHETIC")]
            SYNTHETIC = 15,
            /// <summary>
            /// Enum VMWARE for value: VMWARE
            /// </summary>
            [EnumMember(Value = "VMWARE")]
            VMWARE = 16,
            /// <summary>
            /// Enum ZOS for value: Z_OS
            /// </summary>
            [EnumMember(Value = "Z_OS")]
            ZOS = 17        }
        /// <summary>
        /// The type of ActiveGate module.
        /// </summary>
        /// <value>The type of ActiveGate module.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveGateModule" /> class.
        /// </summary>
        public ActiveGateModule()
        {
        }
        
        /// <summary>
        /// The module is misconfigured (&#x60;true&#x60;) or not (&#x60;false&#x60;).
        /// </summary>
        /// <value>The module is misconfigured (&#x60;true&#x60;) or not (&#x60;false&#x60;).</value>
        [DataMember(Name="misconfigured", EmitDefaultValue=false)]
        public bool? Misconfigured { get; private set; }

        /// <summary>
        /// The version of the ActiveGate module.
        /// </summary>
        /// <value>The version of the ActiveGate module.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }


        /// <summary>
        /// The attributes of the ActiveGate module.
        /// </summary>
        /// <value>The attributes of the ActiveGate module.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, string> Attributes { get; private set; }

        /// <summary>
        /// The module is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
        /// </summary>
        /// <value>The module is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveGateModule {\n");
            sb.Append("  Misconfigured: ").Append(Misconfigured).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveGateModule);
        }

        /// <summary>
        /// Returns true if ActiveGateModule instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveGateModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveGateModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Misconfigured == input.Misconfigured ||
                    (this.Misconfigured != null &&
                    this.Misconfigured.Equals(input.Misconfigured))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Misconfigured != null)
                    hashCode = hashCode * 59 + this.Misconfigured.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
